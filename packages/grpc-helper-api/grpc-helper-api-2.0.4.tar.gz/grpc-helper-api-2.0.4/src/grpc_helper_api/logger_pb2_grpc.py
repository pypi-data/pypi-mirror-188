# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_helper_api import common_pb2 as grpc__helper__api_dot_common__pb2
from grpc_helper_api import logger_pb2 as grpc__helper__api_dot_logger__pb2


class LoggerServiceStub(object):
    """Loggers service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
            "/LoggerService/get",
            request_serializer=grpc__helper__api_dot_common__pb2.Filter.SerializeToString,
            response_deserializer=grpc__helper__api_dot_logger__pb2.LoggerStatus.FromString,
        )
        self.reset = channel.unary_unary(
            "/LoggerService/reset",
            request_serializer=grpc__helper__api_dot_common__pb2.Filter.SerializeToString,
            response_deserializer=grpc__helper__api_dot_logger__pb2.LoggerStatus.FromString,
        )
        self.set = channel.unary_unary(
            "/LoggerService/set",
            request_serializer=grpc__helper__api_dot_logger__pb2.LoggerUpdate.SerializeToString,
            response_deserializer=grpc__helper__api_dot_logger__pb2.LoggerStatus.FromString,
        )


class LoggerServiceServicer(object):
    """Loggers service"""

    def get(self, request, context):
        """Get logger items"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def reset(self, request, context):
        """Reset logger items to their default configuration"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def set(self, request, context):
        """Update logger items configuration"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_LoggerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "get": grpc.unary_unary_rpc_method_handler(
            servicer.get,
            request_deserializer=grpc__helper__api_dot_common__pb2.Filter.FromString,
            response_serializer=grpc__helper__api_dot_logger__pb2.LoggerStatus.SerializeToString,
        ),
        "reset": grpc.unary_unary_rpc_method_handler(
            servicer.reset,
            request_deserializer=grpc__helper__api_dot_common__pb2.Filter.FromString,
            response_serializer=grpc__helper__api_dot_logger__pb2.LoggerStatus.SerializeToString,
        ),
        "set": grpc.unary_unary_rpc_method_handler(
            servicer.set,
            request_deserializer=grpc__helper__api_dot_logger__pb2.LoggerUpdate.FromString,
            response_serializer=grpc__helper__api_dot_logger__pb2.LoggerStatus.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("LoggerService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class LoggerService(object):
    """Loggers service"""

    @staticmethod
    def get(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/LoggerService/get",
            grpc__helper__api_dot_common__pb2.Filter.SerializeToString,
            grpc__helper__api_dot_logger__pb2.LoggerStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def reset(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/LoggerService/reset",
            grpc__helper__api_dot_common__pb2.Filter.SerializeToString,
            grpc__helper__api_dot_logger__pb2.LoggerStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def set(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/LoggerService/set",
            grpc__helper__api_dot_logger__pb2.LoggerUpdate.SerializeToString,
            grpc__helper__api_dot_logger__pb2.LoggerStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
