Metadata-Version: 2.1
Name: openeo-processes-dask
Version: 2023.1.1
Summary: Python implementations of many OpenEO processes, dask-friendly by default.
Home-page: https://github.com/Open-EO/openeo-processes-dask
License: Apache 2.0
Author: Lukas Weidenholzer
Author-email: lukas.weidenholzer@eodc.eu
Requires-Python: >=3.9,<3.11
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.9
Requires-Dist: dask-geopandas (>=0.2.0,<1)
Requires-Dist: dask[array] (>=2022.11.1)
Requires-Dist: datacube (>=1.8.4,<2.0.0)
Requires-Dist: geopandas (>=0.11.1,<1)
Requires-Dist: odc-algo (>=0.2.3,<1)
Requires-Dist: odc-geo (>=0.3.2,<0.4.0)
Requires-Dist: openeo-pg-parser-networkx (>=2023.1.0)
Requires-Dist: rasterio (>=1.3.4,<2.0.0)
Requires-Dist: rioxarray (>=0.12.0,<1)
Requires-Dist: xarray (>=2022.11.0)
Requires-Dist: xgboost (>=1.5.1,<2.0.0)
Project-URL: Repository, https://github.com/Open-EO/openeo-processes-dask
Description-Content-Type: text/markdown

# OpenEO Processes Dask

![PyPI - Status](https://img.shields.io/pypi/status/openeo-processes-dask)
![PyPI](https://img.shields.io/pypi/v/openeo-processes-dask)
![PyPI - Python Version](https://img.shields.io/pypi/pyversions/openeo-processes-dask)
[![codecov](https://codecov.io/github/Open-EO/openeo-processes-dask/branch/main/graph/badge.svg?token=RA82MUN9RZ)](https://codecov.io/github/Open-EO/openeo-processes-dask)

## Development environment
openeo-processes-dask requires poetry >1.2, see their [docs](https://python-poetry.org/docs/#installation) for installation instructions.

To setup the python venv and install this project into it run:
```
poetry install
```

To add a new core dependency run:
```
poetry add some_new_dependency
```

To add a new development dependency run:
```
poetry add some_new_dependency --group dev
```

To run the test suite run:
```
poetry run python -m pytest
```

Note that you can also use the virtual environment that's generated by poetry as the kernel for the ipynb notebooks.

**Pre-commit hooks**

This repo makes use of [pre-commit](https://pre-commit.com/) hooks to enforce linting & a few sanity checks. In a fresh development setup, install the hooks using `poetry run pre-commit install`. These will then automatically be checked against your changes before making the commit.

