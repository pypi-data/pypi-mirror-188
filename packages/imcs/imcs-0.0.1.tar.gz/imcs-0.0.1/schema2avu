#!/usr/bin/env python3

import argparse
import jsonavu
import json

# import own functions
from lib.verify_functions import *
from lib.avu_functions import *
from lib.shell import *

def main():
    parser = argparse.ArgumentParser()
    ruleflags = parser.add_argument_group("Setting behaviour")
    ruleflags.add_argument(
        "-i",
        "--ignore-duplicated-attribute",
        help="""
                           In case of existing attributes of a particular iRODS object, 
                           the script will take the new attribute from the input schema 
                           definition and add it to the iRODS object.
                           Be warned: This might lead to 'less searchable' meta data and
                                      possibly corrupted JSON output, when retrieving 
                                      the metadata.
                           """,
    )
    ruleflags.add_argument(
        "-f",
        "--force-overwrite-duplicated-attributes",
        help="""
                           In case of existing attributes of a particular iRODS object, 
                           the script will take the new attribute from the input schema 
                           definition and overwrite the previous attribute in the
                           iRODS object.
                           """,
    )

    export = parser.add_argument_group("Defining Export Formats")
    export.add_argument("-e", "--export", action="store_true", help="Export existing attributes of file to either JSON, XML or YAMl format")
    # unitless attributes shall be 1st level
    # existing output files shall NEVER be overwritten - better append a new number suffix

    parser.add_argument(
        "type",
        metavar="d|C|R",
        choices=["d", "C", "R"],
        help="the irods resource type [d=data objects (file), C=collection (directory), R=resources]",
    )
    parser.add_argument(
        "file", metavar="file", help="path to data object, collection or resource"
    )

    infiles = parser.add_argument_group("Defining input Files")
    infiles.add_argument("-j", "--json", action="store_true", help="defines json schema input")
    infiles.add_argument("-x", "--xml", action="store_true", help="defines xml schema input")
    infiles.add_argument("-y", "--yaml", action="store_true", help="defines meta data in yaml format")

    args = parser.parse_args()
    if args.export:
        json_data = jsonavu.avu2json(get_all_metada(args.file, args.type), "root")
        result_file_name = ".".join(args.file.split("/")[-1].split(".")[:-1])
        if args.json:
            with open(f'{result_file_name}.json', 'w') as f:
                json.dump(json_data, f)
        elif args.xml:
            dump_xml_file(args.json)
            # TODO: convert xml to json
        elif args.yaml:
            dump_yaml_file(args.json)
            # TODO: convert yaml to json
        else:
            print("Error, no format specified, options are --json, --xml and --yaml")
            return
    else:
        if args.json:
            data = load_json_file(args.json)
        elif args.xml:
            data = load_xml_file(args.json)
            #TODO: convert xml to json
        elif args.yaml:
            data = load_yaml_file(args.json)
            #TODO: convert yaml to json
        else:
            print("Error, no format specified, options are --json, --xml and --yaml")
            return
        check_irods_object_existence(args.file, args.type)
        avus = jsonavu.json2avu(data, "root")

        for triplet in avus:
            populate_avu(args.file, triplet, args.type)

if __name__ == "__main__":
    main()
