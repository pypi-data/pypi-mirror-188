Metadata-Version: 2.1
Name: kaioretry
Version: 0.2.0
Summary: All in one retry and aioretry decorators
Home-page: https://github.com/Anvil/kaioretry/
License: LGPL-2.1-or-later
Keywords: retry,decorator,asyncio
Author: Damien NadÃ©
Author-email: anvil.github+kaioretry@livna.org
Requires-Python: >=3.11,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Framework :: AsyncIO
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development
Project-URL: Documentation, https://kaioretry.readthedocs.io/en/latest/
Project-URL: Repository, https://github.com/Anvil/kaioretry/
Description-Content-Type: text/markdown

# KaioRetry

KaioRetry is (yet another) retry decorator implementation, which is
clearly inspired by the original
[retry](https://pypi.org/project/retry) module and is actually
backward compatible with it.

I say *backward* because, while `retry` clearly did the job for me for a
time, at some point I've encountered a big limitation: it did not work
with asyncio coroutines. And it's been unmaintained for 6 years.

I found a few alternatives for that but none of them were both sync
and async and since I did not wanted to use 2 differents modules for
the same goal, I've decided to write this one, with the rule that the
code duplication, between the sync and async versions, should be
smartly kept to a very very strict minimum.

And here we are then.


# Documentation

API Documentation is available on readthedocs:
[https://kaioretry.readthedocs.io/en/latest/]


## TODO List

* Stop messing up the stack trace
* Add unit tests pipelines
* Write a decent README
* Improve documentation display on the RTD
* Lower requirements to python 3.10 if possible (and if i feel like it)
* Lower requirements to python 3.9 if possible (and if i feel like it)

