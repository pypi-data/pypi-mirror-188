{"version":3,"file":"chunks/app_views_performance_onboarding_tsx-images_spot_performance-tour-metrics_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/performance/onboarding.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n}\n\nfunction OnboardingPanel({image, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/performance-empty-state.svg';\nimport tourAlert from 'sentry-images/spot/performance-tour-alert.svg';\nimport tourCorrelate from 'sentry-images/spot/performance-tour-correlate.svg';\nimport tourMetrics from 'sentry-images/spot/performance-tour-metrics.svg';\nimport tourTrace from 'sentry-images/spot/performance-tour-trace.svg';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport FeatureTourModal, {\n  TourImage,\n  TourStep,\n  TourText,\n} from 'sentry/components/modals/featureTourModal';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {filterProjects} from 'sentry/components/performanceOnboarding/utils';\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport {withPerformanceOnboarding} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useApi from 'sentry/utils/useApi';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useProjects from 'sentry/utils/useProjects';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nconst performanceSetupUrl =\n  'https://docs.sentry.io/performance-monitoring/getting-started/';\n\nconst docsLink = (\n  <Button external href={performanceSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const PERFORMANCE_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Track Application Metrics'),\n    image: <TourImage src={tourMetrics} />,\n    body: (\n      <TourText>\n        {t(\n          'Monitor your slowest pageloads and APIs to see which users are having the worst time.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Correlate Errors and Performance'),\n    image: <TourImage src={tourCorrelate} />,\n    body: (\n      <TourText>\n        {t(\n          'See what errors occurred within a transaction and the impact of those errors.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Watch and Alert'),\n    image: <TourImage src={tourAlert} />,\n    body: (\n      <TourText>\n        {t(\n          'Highlight mission-critical pages and APIs and set latency alerts to notify you before things go wrong.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Trace Across Systems'),\n    image: <TourImage src={tourTrace} />,\n    body: (\n      <TourText>\n        {t(\n          \"Follow a trace from a user's session and drill down to identify any bottlenecks that occur.\"\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nfunction Onboarding({organization, project}: Props) {\n  const api = useApi();\n  const {projects} = useProjects();\n  const location = useLocation();\n\n  const {projectsForOnboarding} = filterProjects(projects);\n\n  const showOnboardingChecklist = organization.features?.includes(\n    'performance-onboarding-checklist'\n  );\n\n  useEffect(() => {\n    if (\n      showOnboardingChecklist &&\n      location.hash === '#performance-sidequest' &&\n      projectsForOnboarding.some(p => p.id === project.id)\n    ) {\n      SidebarPanelStore.activatePanel(SidebarPanelKey.PerformanceOnboarding);\n    }\n  }, [location.hash, projectsForOnboarding, project.id, showOnboardingChecklist]);\n\n  function handleAdvance(step: number, duration: number) {\n    trackAdvancedAnalyticsEvent('performance_views.tour.advance', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  function handleClose(step: number, duration: number) {\n    trackAdvancedAnalyticsEvent('performance_views.tour.close', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  const currentPlatform = project.platform;\n  const hasPerformanceOnboarding = currentPlatform\n    ? withPerformanceOnboarding.has(currentPlatform)\n    : false;\n\n  let setupButton = (\n    <Button\n      priority=\"primary\"\n      href=\"https://docs.sentry.io/performance-monitoring/getting-started/\"\n      external\n    >\n      {t('Start Setup')}\n    </Button>\n  );\n\n  if (hasPerformanceOnboarding && showOnboardingChecklist) {\n    setupButton = (\n      <Button\n        priority=\"primary\"\n        onClick={event => {\n          event.preventDefault();\n          window.location.hash = 'performance-sidequest';\n          SidebarPanelStore.activatePanel(SidebarPanelKey.PerformanceOnboarding);\n        }}\n      >\n        {t('Start Checklist')}\n      </Button>\n    );\n  }\n\n  return (\n    <OnboardingPanel image={<PerfImage src={emptyStateImg} />}>\n      <h3>{t('Pinpoint problems')}</h3>\n      <p>\n        {t(\n          'Something seem slow? Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        {setupButton}\n        <Button\n          data-test-id=\"create-sample-transaction-btn\"\n          onClick={async () => {\n            trackAdvancedAnalyticsEvent('performance_views.create_sample_transaction', {\n              platform: project.platform,\n              organization,\n            });\n            addLoadingMessage(t('Processing sample event...'), {\n              duration: 15000,\n            });\n            const url = `/projects/${organization.slug}/${project.slug}/create-sample-transaction/`;\n            try {\n              const eventData = await api.requestPromise(url, {method: 'POST'});\n              browserHistory.push(\n                normalizeUrl(\n                  `/organizations/${organization.slug}/performance/${project.slug}:${eventData.eventID}/`\n                )\n              );\n              clearIndicators();\n            } catch (error) {\n              Sentry.withScope(scope => {\n                scope.setExtra('error', error);\n                Sentry.captureException(new Error('Failed to create sample event'));\n              });\n              clearIndicators();\n              addErrorMessage(t('Failed to create a new sample event'));\n              return;\n            }\n          }}\n        >\n          {t('View Sample Transaction')}\n        </Button>\n      </ButtonList>\n      <FeatureTourModal\n        steps={PERFORMANCE_TOUR_STEPS}\n        onAdvance={handleAdvance}\n        onCloseModal={handleClose}\n        doneUrl={performanceSetupUrl}\n        doneText={t('Start Setup')}\n      >\n        {({showModal}) => (\n          <Button\n            priority=\"link\"\n            onClick={() => {\n              trackAdvancedAnalyticsEvent('performance_views.tour.start', {organization});\n              showModal();\n            }}\n          >\n            {t('Take a Tour')}\n          </Button>\n        )}\n      </FeatureTourModal>\n    </OnboardingPanel>\n  );\n}\n\nconst PerfImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    max-width: unset;\n    user-select: none;\n    position: absolute;\n    top: 75px;\n    bottom: 0;\n    width: 450px;\n    margin-top: auto;\n    margin-bottom: auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 480px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 600px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n  margin-bottom: 16px;\n`;\n\nexport default Onboarding;\n"],"names":["OnboardingPanel","image","children","props","Container","IlloBox","StyledBox","centered","space","p","theme","breakpoints","small","medium","performanceSetupUrl","docsLink","external","href","t","PERFORMANCE_TOUR_STEPS","title","src","tourMetrics","body","actions","Onboarding","organization","project","api","useApi","projects","useProjects","location","useLocation","projectsForOnboarding","filterProjects","showOnboardingChecklist","features","includes","useEffect","hash","some","id","SidebarPanelStore","SidebarPanelKey","currentPlatform","platform","hasPerformanceOnboarding","withPerformanceOnboarding","setupButton","priority","onClick","event","preventDefault","window","PerfImage","emptyStateImg","ButtonList","gap","async","trackAdvancedAnalyticsEvent","addLoadingMessage","duration","url","slug","eventData","requestPromise","method","browserHistory","normalizeUrl","eventID","clearIndicators","error","Sentry","scope","setExtra","Error","addErrorMessage","steps","onAdvance","step","onCloseModal","doneUrl","doneText","showModal","large","ButtonBar"],"sourceRoot":""}