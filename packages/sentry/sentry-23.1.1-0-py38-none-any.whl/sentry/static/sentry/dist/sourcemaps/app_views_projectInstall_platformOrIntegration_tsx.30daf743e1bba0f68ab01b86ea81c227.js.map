{"version":3,"file":"chunks/app_views_projectInstall_platformOrIntegration_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/projectInstall/platform.tsx","webpack:///./app/views/onboarding/components/firstEventIndicator.tsx","webpack:///./app/views/projectInstall/components/firstEventFooter.tsx","webpack:///./app/views/projectInstall/components/platformHeaderButtonBar.tsx","webpack:///./app/views/projectInstall/platformIntegrationSetup.tsx","webpack:///./app/views/projectInstall/platformOrIntegration.tsx"],"sourcesContent":["import 'prism-sentry/index.css';\n\nimport {Component, Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {loadDocs} from 'sentry/actionCreators/projects';\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {\n  performance as performancePlatforms,\n  PlatformKey,\n} from 'sentry/data/platformCategories';\nimport platforms from 'sentry/data/platforms';\nimport {IconChevron} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport Projects from 'sentry/utils/projects';\nimport withApi from 'sentry/utils/withApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{platform: string; projectId: string}, {}>;\n\ntype State = {\n  error: boolean;\n  html: string;\n  loading: boolean;\n};\n\nclass ProjectInstallPlatform extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    html: '',\n  };\n\n  componentDidMount() {\n    this.fetchData();\n    window.scrollTo(0, 0);\n\n    const {platform} = this.props.params;\n\n    // redirect if platform is not known.\n    if (!platform || platform === 'other') {\n      this.redirectToNeutralDocs();\n    }\n  }\n\n  get isGettingStarted() {\n    return window.location.href.indexOf('getting-started') > 0;\n  }\n\n  fetchData = async () => {\n    const {api, organization, params} = this.props;\n    const {projectId, platform} = params;\n\n    this.setState({loading: true});\n\n    try {\n      const {html} = await loadDocs(\n        api,\n        organization.slug,\n        projectId,\n        platform as PlatformKey\n      );\n      this.setState({html});\n    } catch (error) {\n      this.setState({error});\n    }\n\n    this.setState({loading: false});\n  };\n\n  redirectToNeutralDocs() {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    const url = `/organizations/${organization.slug}/projects/${projectId}/getting-started/`;\n\n    browserHistory.push(normalizeUrl(url));\n  }\n\n  render() {\n    const {organization, params} = this.props;\n    const {projectId} = params;\n\n    const platform = platforms.find(p => p.id === params.platform);\n\n    if (!platform) {\n      return <NotFound />;\n    }\n\n    const issueStreamLink = `/organizations/${organization.slug}/issues/`;\n    const performanceOverviewLink = `/organizations/${organization.slug}/performance/`;\n    const gettingStartedLink = `/organizations/${organization.slug}/projects/${projectId}/getting-started/`;\n    const platformLink = platform.link ?? undefined;\n\n    return (\n      <Fragment>\n        <StyledPageHeader>\n          <h2>{t('Configure %(platform)s', {platform: platform.name})}</h2>\n          <ButtonBar gap={1}>\n            <Button\n              icon={<IconChevron direction=\"left\" size=\"sm\" />}\n              size=\"sm\"\n              to={gettingStartedLink}\n            >\n              {t('Back')}\n            </Button>\n            <Button size=\"sm\" href={platformLink} external>\n              {t('Full Documentation')}\n            </Button>\n          </ButtonBar>\n        </StyledPageHeader>\n\n        <div>\n          <Alert type=\"info\" showIcon>\n            {tct(\n              `\n             This is a quick getting started guide. For in-depth instructions\n             on integrating Sentry with [platform], view\n             [docLink:our complete documentation].`,\n              {\n                platform: platform.name,\n                docLink: <a href={platformLink} />,\n              }\n            )}\n          </Alert>\n\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : this.state.error ? (\n            <LoadingError onRetry={this.fetchData} />\n          ) : (\n            <Fragment>\n              <SentryDocumentTitle\n                title={`${t('Configure')} ${platform.name}`}\n                projectSlug={projectId}\n              />\n              <DocumentationWrapper dangerouslySetInnerHTML={{__html: this.state.html}} />\n            </Fragment>\n          )}\n\n          {this.isGettingStarted && (\n            <Projects\n              key={`${organization.slug}-${projectId}`}\n              orgId={organization.slug}\n              slugs={[projectId]}\n              passthroughPlaceholderProject={false}\n            >\n              {({projects, initiallyLoaded, fetching, fetchError}) => {\n                const projectsLoading = !initiallyLoaded && fetching;\n                const projectFilter =\n                  !projectsLoading && !fetchError && projects.length\n                    ? {\n                        project: (projects[0] as Project).id,\n                      }\n                    : {};\n\n                const showPerformancePrompt = performancePlatforms.includes(\n                  platform.id as PlatformKey\n                );\n\n                return (\n                  <Fragment>\n                    {showPerformancePrompt && (\n                      <Feature\n                        features={['performance-view']}\n                        hookName=\"feature-disabled:performance-new-project\"\n                      >\n                        {({hasFeature}) => {\n                          if (hasFeature) {\n                            return null;\n                          }\n                          return (\n                            <StyledAlert type=\"info\" showIcon>\n                              {t(\n                                `Your selected platform supports performance, but your organization does not have performance enabled.`\n                              )}\n                            </StyledAlert>\n                          );\n                        }}\n                      </Feature>\n                    )}\n\n                    <StyledButtonBar gap={1}>\n                      <Button\n                        priority=\"primary\"\n                        busy={projectsLoading}\n                        to={{\n                          pathname: issueStreamLink,\n                          query: projectFilter,\n                          hash: '#welcome',\n                        }}\n                      >\n                        {t('Take me to Issues')}\n                      </Button>\n                      <Button\n                        busy={projectsLoading}\n                        to={{\n                          pathname: performanceOverviewLink,\n                          query: projectFilter,\n                        }}\n                      >\n                        {t('Take me to Performance')}\n                      </Button>\n                    </StyledButtonBar>\n                  </Fragment>\n                );\n              }}\n            </Projects>\n          )}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst DocumentationWrapper = styled('div')`\n  line-height: 1.5;\n\n  .gatsby-highlight {\n    margin-bottom: ${space(3)};\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  .alert {\n    margin-bottom: ${space(3)};\n    border-radius: ${p => p.theme.borderRadius};\n  }\n\n  pre {\n    word-break: break-all;\n    white-space: pre-wrap;\n  }\n\n  blockquote {\n    padding: ${space(1)};\n    margin-left: 0;\n    background: ${p => p.theme.alert.info.backgroundLight};\n    border-left: 2px solid ${p => p.theme.alert.info.border};\n  }\n  blockquote > *:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(3)};\n  width: max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: auto;\n    grid-row-gap: ${space(1)};\n    grid-auto-flow: row;\n  }\n`;\n\nconst StyledPageHeader = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: ${space(3)};\n\n  h2 {\n    margin: 0;\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    flex-direction: column;\n    align-items: flex-start;\n\n    h2 {\n      margin-bottom: ${space(2)};\n    }\n  }\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-top: ${space(2)};\n`;\n\nexport {ProjectInstallPlatform};\nexport default withApi(withOrganization(ProjectInstallPlatform));\n","import styled from '@emotion/styled';\nimport {AnimatePresence, HTMLMotionProps, motion, Variants} from 'framer-motion';\n\nimport {Button} from 'sentry/components/button';\nimport {IconCheckmark} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport pulsingIndicatorStyles from 'sentry/styles/pulsingIndicator';\nimport space from 'sentry/styles/space';\nimport {Group} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventWaiter, {EventWaiterProps} from 'sentry/utils/eventWaiter';\nimport testableTransition from 'sentry/utils/testableTransition';\n\ntype RenderProps = {\n  firstEventButton: React.ReactNode;\n  indicator: React.ReactNode;\n};\n\ninterface FirstEventIndicatorProps extends Omit<EventWaiterProps, 'children' | 'api'> {\n  children: (props: RenderProps) => React.ReactNode;\n}\n\nconst FirstEventIndicator = ({children, ...props}: FirstEventIndicatorProps) => (\n  <EventWaiter {...props}>\n    {({firstIssue}) =>\n      children({\n        indicator: <Indicator firstIssue={firstIssue} {...props} />,\n        firstEventButton: (\n          <Button\n            title={t(\"You'll need to send your first error to continue\")}\n            tooltipProps={{disabled: !!firstIssue}}\n            disabled={!firstIssue}\n            priority=\"primary\"\n            onClick={() =>\n              trackAdvancedAnalyticsEvent('growth.onboarding_take_to_error', {\n                organization: props.organization,\n              })\n            }\n            to={`/organizations/${props.organization.slug}/issues/${\n              firstIssue && firstIssue !== true && 'id' in firstIssue\n                ? `${firstIssue.id}/`\n                : ''\n            }?referrer=onboarding-first-event-indicator`}\n          >\n            {t('Take me to my error')}\n          </Button>\n        ),\n      })\n    }\n  </EventWaiter>\n);\n\ninterface IndicatorProps extends Omit<EventWaiterProps, 'children' | 'api'> {\n  firstIssue: null | boolean | Group;\n}\n\nconst Indicator = ({firstIssue}: IndicatorProps) => (\n  <Container>\n    <AnimatePresence>\n      {!firstIssue ? <Waiting key=\"waiting\" /> : <Success key=\"received\" />}\n    </AnimatePresence>\n  </Container>\n);\n\nconst Container = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: right;\n`;\n\nconst StatusWrapper = styled(motion.div)`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  gap: ${space(1)};\n  align-items: center;\n  font-size: ${p => p.theme.fontSizeMedium};\n  /* Keep the wrapper in the parent grids first cell for transitions */\n  grid-column: 1;\n  grid-row: 1;\n`;\n\nStatusWrapper.defaultProps = {\n  initial: 'initial',\n  animate: 'animate',\n  exit: 'exit',\n  variants: {\n    initial: {opacity: 0, y: -10},\n    animate: {\n      opacity: 1,\n      y: 0,\n      transition: testableTransition({when: 'beforeChildren', staggerChildren: 0.35}),\n    },\n    exit: {opacity: 0, y: 10},\n  },\n};\n\nconst Waiting = (props: HTMLMotionProps<'div'>) => (\n  <StatusWrapper {...props}>\n    <AnimatedText>{t('Waiting to receive first event to continue')}</AnimatedText>\n    <WaitingIndicator />\n  </StatusWrapper>\n);\n\nconst Success = (props: HTMLMotionProps<'div'>) => (\n  <StatusWrapper {...props}>\n    <AnimatedText>{t('Event was received!')}</AnimatedText>\n    <ReceivedIndicator />\n  </StatusWrapper>\n);\n\nconst indicatorAnimation: Variants = {\n  initial: {opacity: 0, y: -10},\n  animate: {opacity: 1, y: 0},\n  exit: {opacity: 0, y: 10},\n};\n\nconst AnimatedText = styled(motion.div)``;\n\nAnimatedText.defaultProps = {\n  variants: indicatorAnimation,\n  transition: testableTransition(),\n};\n\nconst WaitingIndicator = styled(motion.div)`\n  margin: 0 6px;\n  ${pulsingIndicatorStyles};\n`;\n\nWaitingIndicator.defaultProps = {\n  variants: indicatorAnimation,\n  transition: testableTransition(),\n};\n\nconst ReceivedIndicator = styled(IconCheckmark)`\n  color: #fff;\n  background: ${p => p.theme.green300};\n  border-radius: 50%;\n  padding: 3px;\n  margin: 0 ${space(0.25)};\n`;\n\nReceivedIndicator.defaultProps = {\n  size: 'sm',\n};\n\nexport {Indicator};\n\nexport default FirstEventIndicator;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport FirstEventIndicator from 'sentry/views/onboarding/components/firstEventIndicator';\nimport CreateSampleEventButton from 'sentry/views/onboarding/createSampleEventButton';\n\ninterface FirstEventFooterProps {\n  organization: Organization;\n  project: Project;\n  docsLink?: string;\n  docsOnClick?: () => void;\n}\n\nexport default function FirstEventFooter({\n  organization,\n  project,\n  docsLink,\n  docsOnClick,\n}: FirstEventFooterProps) {\n  return (\n    <Fragment>\n      <FirstEventIndicator\n        organization={organization}\n        project={project}\n        eventType=\"error\"\n      >\n        {({indicator, firstEventButton}) => (\n          <CTAFooter>\n            <Actions gap={2}>\n              {firstEventButton}\n              <Button external href={docsLink} onClick={docsOnClick}>\n                {t('View full documentation')}\n              </Button>\n            </Actions>\n            {indicator}\n          </CTAFooter>\n        )}\n      </FirstEventIndicator>\n      <CTASecondary>\n        {tct(\n          'Just want to poke around before getting too cozy with the SDK? [sample:View a sample event for this SDK] or [skip:finish setup later].',\n          {\n            sample: (\n              <CreateSampleEventButton\n                aria-label=\"View a sample event\"\n                project={project}\n                source=\"onboarding\"\n                priority=\"link\"\n              />\n            ),\n            skip: (\n              <Button priority=\"link\" href=\"/\" aria-label={t('Finish setup later')} />\n            ),\n          }\n        )}\n      </CTASecondary>\n    </Fragment>\n  );\n}\n\nconst CTAFooter = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin: ${space(2)} 0;\n  margin-top: ${space(4)};\n`;\n\nconst CTASecondary = styled('p')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  max-width: 500px;\n`;\n\nconst Actions = styled(ButtonBar)`\n  display: inline-grid;\n  justify-self: start;\n`;\n","import {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {IconChevron} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  docsLink: string;\n  gettingStartedLink: string;\n};\n\nexport default function PlatformHeaderButtonBar({gettingStartedLink, docsLink}: Props) {\n  return (\n    <ButtonBar gap={1}>\n      <Button\n        size=\"sm\"\n        icon={<IconChevron size=\"xs\" direction=\"left\" />}\n        to={gettingStartedLink}\n      >\n        {t('Back')}\n      </Button>\n      <Button size=\"sm\" href={docsLink} external>\n        {t('Full Documentation')}\n      </Button>\n    </ButtonBar>\n  );\n}\n","import 'prism-sentry/index.css';\n\nimport {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport platforms from 'sentry/data/platforms';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {IntegrationProvider, Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AddInstallationInstructions from 'sentry/views/onboarding/components/integrations/addInstallationInstructions';\nimport PostInstallCodeSnippet from 'sentry/views/onboarding/components/integrations/postInstallCodeSnippet';\nimport {AddIntegrationButton} from 'sentry/views/organizationIntegrations/addIntegrationButton';\n\nimport FirstEventFooter from './components/firstEventFooter';\nimport PlatformHeaderButtonBar from './components/platformHeaderButtonBar';\n\ntype Props = {\n  integrationSlug: string;\n  organization: Organization;\n} & RouteComponentProps<{platform: string; projectId: string}, {}> &\n  AsyncComponent['props'];\n\ntype State = {\n  installed: boolean;\n  integrations: {providers: IntegrationProvider[]};\n  project: Project | null;\n} & AsyncComponent['state'];\n\nclass PlatformIntegrationSetup extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      installed: false,\n      integrations: {providers: []},\n      project: null,\n    };\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n\n    const {platform} = this.props.params;\n\n    // redirect if platform is not known.\n    if (!platform || platform === 'other') {\n      this.redirectToNeutralDocs();\n    }\n  }\n\n  get provider() {\n    const {providers} = this.state.integrations;\n    return providers.length ? providers[0] : null;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, integrationSlug, params} = this.props;\n\n    if (!integrationSlug) {\n      return [];\n    }\n\n    return [\n      [\n        'integrations',\n        `/organizations/${organization.slug}/config/integrations/?provider_key=${integrationSlug}`,\n      ],\n      ['project', `/projects/${organization.slug}/${params.projectId}/`],\n    ];\n  }\n\n  handleFullDocsClick = () => {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('growth.onboarding_view_full_docs', {organization});\n  };\n\n  redirectToNeutralDocs() {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    const url = `/organizations/${organization.slug}/projects/${projectId}/getting-started/`;\n\n    browserHistory.push(normalizeUrl(url));\n  }\n\n  handleAddIntegration = () => {\n    this.setState({installed: true});\n  };\n\n  trackSwitchToManual = () => {\n    const {organization, integrationSlug} = this.props;\n    trackIntegrationAnalytics('integrations.switch_manual_sdk_setup', {\n      integration_type: 'first_party',\n      integration: integrationSlug,\n      view: 'project_creation',\n      organization,\n    });\n  };\n\n  render() {\n    const {organization, params} = this.props;\n    const {installed, project} = this.state;\n    const {projectId, platform} = params;\n    const provider = this.provider;\n\n    const platformIntegration = platforms.find(p => p.id === platform);\n    if (!provider || !platformIntegration || !project) {\n      return null;\n    }\n    const gettingStartedLink = `/organizations/${organization.slug}/projects/${projectId}/getting-started/`;\n\n    // TODO: make dynamic when adding more integrations\n    const docsLink =\n      'https://docs.sentry.io/product/integrations/cloud-monitoring/aws-lambda/';\n\n    return (\n      <OuterWrapper>\n        <InnerWrapper>\n          <StyledTitle>\n            {t('Automatically instrument %s', platformIntegration.name)}\n          </StyledTitle>\n          <HeaderButtons>\n            <PlatformHeaderButtonBar\n              gettingStartedLink={gettingStartedLink}\n              docsLink={docsLink}\n            />\n          </HeaderButtons>\n          {!installed ? (\n            <Fragment>\n              <AddInstallationInstructions />\n              <StyledButtonBar gap={1}>\n                <AddIntegrationButton\n                  provider={provider}\n                  onAddIntegration={this.handleAddIntegration}\n                  organization={organization}\n                  priority=\"primary\"\n                  size=\"sm\"\n                  analyticsParams={{view: 'project_creation', already_installed: false}}\n                  modalParams={{projectId: project.id}}\n                  aria-label={t('Add integration')}\n                />\n                <Button\n                  size=\"sm\"\n                  to={{\n                    pathname: window.location.pathname,\n                    query: {manual: '1'},\n                  }}\n                  onClick={this.trackSwitchToManual}\n                >\n                  {t('Manual Setup')}\n                </Button>\n              </StyledButtonBar>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <PostInstallCodeSnippet provider={provider} />\n              <FirstEventFooter\n                project={project}\n                organization={organization}\n                docsLink={docsLink}\n                docsOnClick={this.handleFullDocsClick}\n              />\n            </Fragment>\n          )}\n        </InnerWrapper>\n      </OuterWrapper>\n    );\n  }\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(3)};\n  width: max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: auto;\n    grid-row-gap: ${space(1)};\n    grid-auto-flow: row;\n  }\n`;\n\nconst InnerWrapper = styled('div')`\n  max-width: 850px;\n`;\n\nconst OuterWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 50px;\n`;\n\nconst HeaderButtons = styled('div')`\n  width: min-content;\n  margin-bottom: ${space(3)};\n`;\n\nconst StyledTitle = styled('h2')`\n  margin: 0;\n  margin-bottom: ${space(2)};\n`;\n\nexport default withOrganization(PlatformIntegrationSetup);\n","import * as qs from 'query-string';\n\nimport {platformToIntegrationMap} from 'sentry/utils/integrationUtil';\n\nimport Platform from './platform';\nimport PlatformIntegrationSetup from './platformIntegrationSetup';\n\ntype Props = React.ComponentProps<typeof Platform> &\n  Omit<React.ComponentProps<typeof PlatformIntegrationSetup>, 'integrationSlug'>;\n\nconst PlatformOrIntegration = (props: Props) => {\n  const parsed = qs.parse(window.location.search);\n  const {platform} = props.params;\n  const integrationSlug = platform && platformToIntegrationMap[platform];\n  // check for manual override query param\n  if (integrationSlug && parsed.manual !== '1') {\n    return <PlatformIntegrationSetup integrationSlug={integrationSlug} {...props} />;\n  }\n  return <Platform {...props} />;\n};\n\nexport default PlatformOrIntegration;\n"],"names":["ProjectInstallPlatform","Component","loading","error","html","async","api","organization","params","this","props","projectId","platform","setState","loadDocs","slug","componentDidMount","fetchData","window","scrollTo","redirectToNeutralDocs","isGettingStarted","location","href","indexOf","url","browserHistory","normalizeUrl","render","platforms","p","id","issueStreamLink","performanceOverviewLink","gettingStartedLink","platformLink","link","undefined","Fragment","StyledPageHeader","t","name","gap","icon","direction","size","to","external","type","showIcon","tct","docLink","state","onRetry","title","projectSlug","DocumentationWrapper","dangerouslySetInnerHTML","__html","orgId","slugs","passthroughPlaceholderProject","projects","initiallyLoaded","fetching","fetchError","projectsLoading","projectFilter","length","project","showPerformancePrompt","performancePlatforms","features","hookName","hasFeature","StyledAlert","StyledButtonBar","priority","busy","pathname","query","hash","space","theme","borderRadius","alert","info","backgroundLight","border","ButtonBar","breakpoints","small","Alert","withApi","withOrganization","FirstEventIndicator","children","firstIssue","indicator","Indicator","firstEventButton","tooltipProps","disabled","onClick","trackAdvancedAnalyticsEvent","Container","AnimatePresence","Success","Waiting","StatusWrapper","motion","fontSizeMedium","defaultProps","initial","animate","exit","variants","opacity","y","transition","testableTransition","when","staggerChildren","AnimatedText","WaitingIndicator","ReceivedIndicator","indicatorAnimation","pulsingIndicatorStyles","IconCheckmark","green300","FirstEventFooter","docsLink","docsOnClick","eventType","CTAFooter","Actions","CTASecondary","sample","source","skip","subText","PlatformHeaderButtonBar","PlatformIntegrationSetup","AsyncComponent","installed","integrationSlug","trackIntegrationAnalytics","integration_type","integration","view","getDefaultState","super","integrations","providers","provider","getEndpoints","platformIntegration","OuterWrapper","InnerWrapper","StyledTitle","HeaderButtons","handleFullDocsClick","onAddIntegration","handleAddIntegration","analyticsParams","already_installed","modalParams","manual","trackSwitchToManual","PlatformOrIntegration","parsed","qs","search","platformToIntegrationMap"],"sourceRoot":""}