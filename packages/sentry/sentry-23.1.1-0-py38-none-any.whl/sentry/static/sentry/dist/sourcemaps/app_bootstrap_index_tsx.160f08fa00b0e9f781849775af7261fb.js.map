{"version":3,"file":"chunks/app_bootstrap_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"4KAEA,MAEMA,EAAmBC,IACvBC,OAAOC,eAAiBF,EAAKE,eAC7BD,OAAOE,oBAAsBH,EAAKG,oBAClCF,OAAOG,sBAAwBJ,EAAKI,4BAAyBC,EAEtDL,GAqBFM,eAAeC,IACpB,MAAMC,EAAgBP,OAAOQ,cAK7B,YAAsBJ,IAAlBG,QApBNF,iBACE,MAAMI,QAAiBC,MAfH,uBAgBdX,QAAqBU,EAASE,OAIpC,OAFAX,OAAOQ,cAAgBT,EAEhBD,EAAgBC,EACzB,CAciBa,GAGRd,EAAgBS,EACzB,C","sources":["webpack:///./app/bootstrap/index.tsx"],"sourcesContent":["import {Config} from 'sentry/types';\n\nconst BOOTSTRAP_URL = '/api/client-config/';\n\nconst bootApplication = (data: Config) => {\n  window.csrfCookieName = data.csrfCookieName;\n  window.superUserCookieName = data.superUserCookieName;\n  window.superUserCookieDomain = data.superUserCookieDomain ?? undefined;\n\n  return data;\n};\n\n/**\n * Load the client configuration data using the BOOTSTRAP_URL. Used when\n * running in standalone SPA mode.\n */\nasync function bootWithHydration() {\n  const response = await fetch(BOOTSTRAP_URL);\n  const data: Config = await response.json();\n\n  window.__initialData = data;\n\n  return bootApplication(data);\n}\n\n/**\n * Load client configuration bootstrap data. This will detect if the app is\n * running in SPA mode or being booted from the django-rendered layout.html\n * template.\n */\nexport async function bootstrap() {\n  const bootstrapData = window.__initialData;\n\n  // If __initialData is not already set on the window, we are likely running in\n  // pure SPA mode, meaning django is not serving our frontend application and we\n  // need to make an API request to hydrate the bootstrap data to boot the app.\n  if (bootstrapData === undefined) {\n    return await bootWithHydration();\n  }\n\n  return bootApplication(bootstrapData);\n}\n"],"names":["bootApplication","data","window","csrfCookieName","superUserCookieName","superUserCookieDomain","undefined","async","bootstrap","bootstrapData","__initialData","response","fetch","json","bootWithHydration"],"sourceRoot":""}