{"version":3,"file":"chunks/app_views_profiling_profileDetails_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/profiling/tableRenderer.tsx","webpack:///./app/views/profiling/profileDetails/utils.ts","webpack:///./app/views/profiling/profileDetails/hooks/useQuerystringState.ts","webpack:///./app/views/profiling/profileDetails/components/profileDetailsTable.tsx","webpack:///./app/views/profiling/profileDetails/hooks/useFuseSearch.ts","webpack:///./app/views/profiling/profileDetails/hooks/useColumnFilters.ts","webpack:///./app/views/profiling/profileDetails/hooks/useSortableColumn.ts","webpack:///./app/views/profiling/profileDetails/hooks/usePageLinks.ts","webpack:///./app/views/profiling/profileDetails/profileDetails.tsx"],"sourcesContent":["import {LocationDescriptorObject} from 'history';\n\nimport {GridColumnOrder, GridColumnSortBy} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\n\ninterface TableHeadProps<K> {\n  currentSort?: GridColumnSortBy<K> | null;\n  generateSortLink?: (column: K) => () => LocationDescriptorObject | undefined;\n  onClick?(column: GridColumnOrder<K>, e: React.MouseEvent<HTMLAnchorElement>): void;\n  rightAlignedColumns?: Set<K>;\n  sortableColumns?: Set<K>;\n}\n\nexport function renderTableHead<K>({\n  currentSort,\n  generateSortLink,\n  rightAlignedColumns,\n  sortableColumns,\n  onClick,\n}: TableHeadProps<K>) {\n  return (column: GridColumnOrder<K>, _columnIndex: number) => {\n    return (\n      <SortLink\n        onClick={e => onClick?.(column, e)}\n        align={rightAlignedColumns?.has(column.key) ? 'right' : 'left'}\n        title={column.name}\n        direction={currentSort?.key === column.key ? currentSort?.order : undefined}\n        canSort={sortableColumns?.has(column.key) || false}\n        generateSortLink={generateSortLink?.(column.key) ?? (() => undefined)}\n        replace\n      />\n    );\n  };\n}\n","import groupBy from 'lodash/groupBy';\n\nimport {CallTreeNode} from 'sentry/utils/profiling/callTreeNode';\nimport {Profile} from 'sentry/utils/profiling/profile/profile';\n\nexport function collectProfileFrames(profile: Profile) {\n  const nodes: CallTreeNode[] = [];\n\n  profile.forEach(\n    node => {\n      if (node.selfWeight > 0) {\n        nodes.push(node);\n      }\n    },\n    () => {}\n  );\n\n  return nodes\n    .sort((a, b) => b.selfWeight - a.selfWeight)\n    .map(node => ({\n      symbol: node.frame.name,\n      file: node.frame.file,\n      image: node.frame.image,\n      thread: profile.threadId,\n      type: node.frame.is_application ? 'application' : 'system',\n      'self weight': node.selfWeight,\n      'total weight': node.totalWeight,\n    }));\n}\n\nexport function pluckUniqueValues<T extends Record<string, any>>(\n  collection: T[],\n  key: keyof T\n) {\n  return collection.reduce((acc, record) => {\n    const value = record[key];\n    if (value && !acc.includes(value)) {\n      acc.push(value);\n    }\n    return acc;\n  }, [] as any[]);\n}\n\nexport type Row<K extends string = string> = Record<\n  Extract<K, string>,\n  string | number | any[]\n>;\nexport interface AggregateColumnConfig<K extends string> {\n  compute: (data: Row<K>[]) => number | any[];\n  key: string;\n}\nexport function aggregate<T extends string>(\n  data: Partial<Row<T>>[],\n  groups: Extract<T, string>[],\n  aggregates: AggregateColumnConfig<T>[]\n): Row<T>[] {\n  // group by a key composed by unique values\n  // ex: { a: \"foo\", b: \"bar\" } => { \"foo bar\": [...] }\n  const groupedData = groupBy(data, row => getGroupedKey(row, groups));\n\n  const rows: Row[] = [];\n  for (const groupedKey in groupedData) {\n    // unwrap the grouped key into a base value\n    // ex: { \"foo bar\": [...] } => {a: \"foo\", b: \"bar\"}\n    const row = makeRowFromGroupedKey(groupedKey, groups);\n    const groupedValues = groupedData[groupedKey] as Row<T>[];\n\n    aggregates.forEach(agg => {\n      // do the actual aggregation with the grouped values\n      // ex: { a: \"foo\", b: \"bar\", sum: 123 }\n      row[agg.key] = agg.compute(groupedValues);\n    });\n    rows.push(row);\n  }\n  return rows;\n}\n\n// we'll use the \"unit separator\" character to delimit grouped values\n// https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst FIELD_SEPARATOR = String.fromCharCode(31);\n\n// getGroupedKey will derive a key from an objects values and delimit them using\n// the unit separator\nfunction getGroupedKey(row: Record<string, unknown>, groups: string[]) {\n  return groups.map(key => row[key]).join(FIELD_SEPARATOR);\n}\n\nfunction makeRowFromGroupedKey(groupedKey: string, groups: string[]) {\n  const groupedKeyValues = groupedKey.split(FIELD_SEPARATOR);\n  return groups.reduce((acc, key, idx) => {\n    acc[key] = groupedKeyValues[idx];\n    return acc;\n  }, {} as Row);\n}\n","import {useCallback, useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\ninterface UseQuerystringStateOptions {\n  key: string;\n  initialState?: string | string[];\n}\n\nexport function useQuerystringState<T extends string | string[] = string>({\n  key,\n  initialState,\n}: UseQuerystringStateOptions) {\n  const location = useLocation();\n  const [state, setState] = useState<T | undefined>(\n    (location.query[key] as T) ?? (initialState as T)\n  );\n\n  const createLocationDescriptor = useCallback(\n    (nextState: T | undefined) => {\n      // we can't use the result of `useLocation` here\n      // if there are multiple instances of `useQuerystringState` firing at once\n      // the value of location will be stale in the callback\n      const currentLocation = browserHistory.getCurrentLocation();\n\n      return {\n        ...currentLocation,\n        query: {\n          ...currentLocation.query,\n          [key]: nextState,\n        },\n      };\n    },\n    [key]\n  );\n\n  const setQueryStringState = useCallback(\n    (nextState: T | undefined) => {\n      browserHistory.replace(createLocationDescriptor(nextState));\n      setState(nextState);\n    },\n    [createLocationDescriptor]\n  );\n\n  useEffect(() => {\n    const removeListener = browserHistory.listenBefore(nextLocation => {\n      const currentLocation = browserHistory.getCurrentLocation();\n\n      // if the next location is a different page altogether\n      // cleanup the querystring key to ensures querystring's aren't unintentionally passed around pages\n      if (\n        currentLocation.pathname !== nextLocation.pathname &&\n        key in nextLocation.query\n      ) {\n        delete nextLocation.query[key];\n        return;\n      }\n    });\n\n    return removeListener;\n  }, [key]);\n\n  return [state, setQueryStringState, createLocationDescriptor] as [\n    T | undefined,\n    typeof setQueryStringState,\n    typeof createLocationDescriptor\n  ];\n}\n","import {Fragment, useCallback, useEffect, useMemo, useState} from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport CompactSelect from 'sentry/components/compactSelect';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport Pagination from 'sentry/components/pagination';\nimport SearchBar from 'sentry/components/searchBar';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Container, NumberContainer} from 'sentry/utils/discover/styles';\nimport {generateProfileFlamechartRouteWithQuery} from 'sentry/utils/profiling/routes';\nimport {renderTableHead} from 'sentry/utils/profiling/tableRenderer';\nimport {makeFormatter} from 'sentry/utils/profiling/units/units';\nimport {useEffectAfterFirstRender} from 'sentry/utils/useEffectAfterFirstRender';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {useParams} from 'sentry/utils/useParams';\n\nimport {useProfileGroup} from '../../profileGroupProvider';\nimport {useColumnFilters} from '../hooks/useColumnFilters';\nimport {useFuseSearch} from '../hooks/useFuseSearch';\nimport {usePageLinks} from '../hooks/usePageLinks';\nimport {useQuerystringState} from '../hooks/useQuerystringState';\nimport {useSortableColumns} from '../hooks/useSortableColumn';\nimport {aggregate, AggregateColumnConfig, collectProfileFrames, Row} from '../utils';\n\nconst RESULTS_PER_PAGE = 50;\n\nexport function ProfileDetailsTable() {\n  const location = useLocation();\n  const profileGroup = useProfileGroup();\n  const [groupByViewKey, setGroupByView] = useQuerystringState({\n    key: 'detailView',\n    initialState: 'occurrence',\n  });\n\n  const [searchQuery, setSearchQuery] = useQuerystringState({\n    key: 'query',\n    initialState: '',\n  });\n\n  const [paginationCursor, setPaginationCursor] = useQuerystringState({\n    key: 'cursor',\n    initialState: '',\n  });\n\n  const groupByView = GROUP_BY_OPTIONS[groupByViewKey!] ?? GROUP_BY_OPTIONS.occurrence;\n\n  const cursor = paginationCursor ? parseInt(paginationCursor, 10) : 0;\n\n  const allData = useMemo(() => {\n    const data =\n      profileGroup.type === 'resolved'\n        ? profileGroup.data.profiles.flatMap(collectProfileFrames)\n        : [];\n\n    return groupByView.transform(data);\n  }, [profileGroup, groupByView]);\n\n  const {search} = useFuseSearch(allData, {\n    keys: groupByView.search.key,\n    threshold: 0.3,\n  });\n\n  const debouncedSearch = useMemo(\n    () => debounce(searchString => setFilteredDataBySearch(search(searchString)), 500),\n    [search]\n  );\n\n  const [filteredDataBySearch, setFilteredDataBySearch] =\n    useState<TableDataRow[]>(allData);\n\n  const [typeFilter, setTypeFilter] = useQuerystringState<string[]>({\n    key: 'type',\n  });\n\n  const [imageFilter, setImageFilter] = useQuerystringState<string[]>({\n    key: 'image',\n  });\n\n  const {filters, columnFilters, filterPredicate} = useColumnFilters(allData, {\n    columns: ['type', 'image'],\n    initialState: {\n      type: typeFilter,\n      image: imageFilter,\n    },\n  });\n\n  useEffect(() => {\n    setTypeFilter(filters.type);\n    setImageFilter(filters.image);\n  }, [filters, setTypeFilter, setImageFilter]);\n\n  const {currentSort, generateSortLink, sortCompareFn} = useSortableColumns({\n    ...groupByView.sort,\n    querystringKey: 'functionsSort',\n  });\n\n  const handleSearch = useCallback(\n    searchString => {\n      setSearchQuery(searchString);\n      setPaginationCursor(undefined);\n      debouncedSearch(searchString);\n    },\n    [setPaginationCursor, setSearchQuery, debouncedSearch]\n  );\n\n  useEffectAfterFirstRender(() => {\n    setFilteredDataBySearch(search(searchQuery ?? ''));\n    // purposely omitted `searchQuery` as we only want this to run once.\n    // future search filters are called by handleSearch\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allData, search]);\n\n  const filteredData = useMemo(\n    () => filteredDataBySearch.filter(filterPredicate),\n    [filterPredicate, filteredDataBySearch]\n  );\n\n  const sortedData = useMemo(\n    () => filteredData.sort(sortCompareFn),\n    [filteredData, sortCompareFn]\n  );\n\n  const pageLinks = usePageLinks(sortedData, cursor);\n\n  const data = sortedData.slice(cursor, cursor + RESULTS_PER_PAGE);\n\n  return (\n    <Fragment>\n      <ActionBar>\n        <CompactSelect\n          options={Object.values(GROUP_BY_OPTIONS).map(view => view.option)}\n          value={groupByView.option.value}\n          triggerProps={{\n            prefix: t('View'),\n          }}\n          placement=\"bottom right\"\n          onChange={option => {\n            setSearchQuery('');\n            setPaginationCursor(undefined);\n            setGroupByView(option.value);\n          }}\n        />\n        <SearchBar\n          defaultQuery=\"\"\n          query={searchQuery}\n          placeholder={groupByView.search.placeholder}\n          onChange={handleSearch}\n        />\n\n        <CompactSelect\n          options={columnFilters.type.values.map(value => ({value, label: value}))}\n          value={filters.type}\n          triggerLabel={\n            !filters.type ||\n            (Array.isArray(filters.type) &&\n              filters.type.length === columnFilters.type.values.length)\n              ? t('All')\n              : undefined\n          }\n          triggerProps={{\n            prefix: t('Type'),\n          }}\n          multiple\n          onChange={columnFilters.type.onChange}\n          placement=\"bottom right\"\n        />\n        <CompactSelect\n          options={columnFilters.image.values.map(value => ({value, label: value}))}\n          value={filters.image}\n          triggerLabel={\n            !filters.image ||\n            (Array.isArray(filters.image) &&\n              filters.image.length === columnFilters.image.values.length)\n              ? t('All')\n              : undefined\n          }\n          triggerProps={{\n            prefix: t('Package'),\n          }}\n          multiple\n          onChange={columnFilters.image.onChange}\n          placement=\"bottom right\"\n          isSearchable\n        />\n      </ActionBar>\n\n      <GridEditable\n        isLoading={profileGroup.type === 'loading'}\n        error={profileGroup.type === 'errored'}\n        data={data}\n        columnOrder={groupByView.columns.map(key => COLUMNS[key])}\n        columnSortBy={[currentSort]}\n        scrollable\n        stickyHeader\n        height=\"75vh\"\n        grid={{\n          renderHeadCell: renderTableHead({\n            rightAlignedColumns: new Set(groupByView.rightAlignedColumns),\n            sortableColumns: new Set(groupByView.rightAlignedColumns),\n            currentSort,\n            generateSortLink,\n          }),\n          renderBodyCell: renderFunctionCell,\n        }}\n        location={location}\n      />\n\n      <Pagination\n        pageLinks={pageLinks}\n        onCursor={cur => {\n          setPaginationCursor(cur);\n        }}\n      />\n    </Fragment>\n  );\n}\n\nconst ActionBar = styled('div')`\n  display: grid;\n  grid-template-columns: auto 1fr auto auto;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n`;\n\nfunction renderFunctionCell(\n  column: TableColumn,\n  dataRow: TableDataRow,\n  rowIndex: number,\n  columnIndex: number\n) {\n  return (\n    <ProfilingFunctionsTableCell\n      column={column}\n      dataRow={dataRow}\n      rowIndex={rowIndex}\n      columnIndex={columnIndex}\n    />\n  );\n}\n\ninterface ProfilingFunctionsTableCellProps {\n  column: TableColumn;\n  columnIndex: number;\n  dataRow: TableDataRow;\n  rowIndex: number;\n}\nconst formatter = makeFormatter('nanoseconds');\nfunction ProfilingFunctionsTableCell({\n  column,\n  dataRow,\n}: ProfilingFunctionsTableCellProps) {\n  const value = dataRow[column.key];\n  const {orgId, projectId, eventId} = useParams();\n\n  switch (column.key) {\n    case 'p75':\n    case 'p95':\n    case 'self weight':\n    case 'total weight':\n      return <NumberContainer>{formatter(value as number)}</NumberContainer>;\n    case 'count':\n      return <NumberContainer>{value}</NumberContainer>;\n    case 'image':\n      return <Container>{value ?? t('Unknown')}</Container>;\n    case 'thread': {\n      return (\n        <Container>\n          <Link\n            to={generateProfileFlamechartRouteWithQuery({\n              orgSlug: orgId,\n              projectSlug: projectId,\n              profileId: eventId,\n              query: {tid: dataRow.thread as string},\n            })}\n          >\n            {value}\n          </Link>\n        </Container>\n      );\n    }\n    case 'symbol': {\n      return (\n        <Container>\n          <Link\n            to={generateProfileFlamechartRouteWithQuery({\n              orgSlug: orgId,\n              projectSlug: projectId,\n              profileId: eventId,\n              query: {\n                frameName: dataRow.symbol as string,\n                framePackage: dataRow.image as string,\n                tid: (dataRow.thread ?? dataRow.tids?.[0]) as string,\n              },\n            })}\n          >\n            {value}\n          </Link>\n        </Container>\n      );\n    }\n    default:\n      return <Container>{value}</Container>;\n  }\n}\n\nconst tableColumnKey = [\n  'symbol',\n  'image',\n  'file',\n  'thread',\n  'type',\n  'self weight',\n  'total weight',\n  // computed columns\n  'p75',\n  'p95',\n  'count',\n  'tids',\n] as const;\n\ntype TableColumnKey = typeof tableColumnKey[number];\n\ntype TableDataRow = Partial<Row<TableColumnKey>>;\n\ntype TableColumn = GridColumnOrder<TableColumnKey>;\n\n// TODO: looks like these column names change depending on the platform?\nconst COLUMNS: Record<Exclude<TableColumnKey, 'tids'>, TableColumn> = {\n  symbol: {\n    key: 'symbol',\n    name: t('Symbol'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  image: {\n    key: 'image',\n    name: t('Package'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  file: {\n    key: 'file',\n    name: t('File'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  thread: {\n    key: 'thread',\n    name: t('Thread'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  type: {\n    key: 'type',\n    name: t('Type'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  'self weight': {\n    key: 'self weight',\n    name: t('Self Weight'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  'total weight': {\n    key: 'total weight',\n    name: t('Total Weight'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p75: {\n    key: 'p75',\n    name: t('P75(Self)'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p95: {\n    key: 'p95',\n    name: t('P95(Self)'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  count: {\n    key: 'count',\n    name: t('Count'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n};\n\nconst quantile = (arr: readonly number[], q: number) => {\n  const sorted = Array.from(arr).sort((a, b) => a - b);\n  const position = q * (sorted.length - 1);\n  const int = Math.floor(position);\n  const frac = position % 1;\n  if (position === int) {\n    return sorted[position];\n  }\n\n  return sorted[int] * (1 - frac) + sorted[int + 1] * frac;\n};\n\nconst p75AggregateColumn: AggregateColumnConfig<TableColumnKey> = {\n  key: 'p75',\n  compute: rows => quantile(rows.map(v => v['self weight']) as number[], 0.75),\n};\n\nconst p95AggregateColumn: AggregateColumnConfig<TableColumnKey> = {\n  key: 'p95',\n  compute: rows => quantile(rows.map(v => v['self weight']) as number[], 0.95),\n};\n\nconst countAggregateColumn: AggregateColumnConfig<TableColumnKey> = {\n  key: 'count',\n  compute: rows => rows.length,\n};\n\nconst uniqueTidAggregateColumn: AggregateColumnConfig<TableColumnKey> = {\n  key: 'tids',\n  compute: rows =>\n    rows.reduce((acc, val) => {\n      const thread = val.thread as number;\n      if (!acc.includes(thread)) {\n        acc.push(thread);\n      }\n      return acc;\n    }, [] as number[]),\n};\n\ninterface GroupByOptions<T> {\n  columns: T[];\n  option: {\n    label: string;\n    value: string;\n  };\n  rightAlignedColumns: T[];\n  search: {\n    key: T[];\n    placeholder: string;\n  };\n  sort: {\n    defaultSort: {\n      key: T;\n      order: 'asc' | 'desc';\n    };\n    sortableColumns: T[];\n  };\n  transform: (\n    data: Partial<Record<Extract<T, string>, string | number | undefined>>[]\n  ) => Row<Extract<T, string>>[];\n}\n\nconst GROUP_BY_OPTIONS: Record<string, GroupByOptions<TableColumnKey>> = {\n  occurrence: {\n    option: {\n      label: t('Slowest Functions'),\n      value: 'occurrence',\n    },\n    columns: ['symbol', 'image', 'file', 'thread', 'type', 'self weight', 'total weight'],\n    transform: (data: any[]) => data.slice(0, 500),\n    search: {\n      key: ['symbol'],\n      placeholder: t('Search for frames'),\n    },\n    sort: {\n      sortableColumns: ['self weight', 'total weight'],\n      defaultSort: {\n        key: 'self weight',\n        order: 'desc',\n      },\n    },\n    rightAlignedColumns: ['self weight', 'total weight'],\n  },\n  symbol: {\n    option: {\n      label: t('Group by Symbol'),\n      value: 'symbol',\n    },\n    columns: ['symbol', 'type', 'image', 'p75', 'p95', 'count'],\n    search: {\n      key: ['symbol'],\n      placeholder: t('Search for frames'),\n    },\n    transform: data =>\n      aggregate(\n        data,\n        ['symbol', 'type', 'image'],\n        [\n          p75AggregateColumn,\n          p95AggregateColumn,\n          countAggregateColumn,\n          uniqueTidAggregateColumn,\n        ]\n      ),\n    sort: {\n      sortableColumns: ['p75', 'p95', 'count'],\n      defaultSort: {\n        key: 'p75',\n        order: 'desc',\n      },\n    },\n    rightAlignedColumns: ['p75', 'p95', 'count'],\n  },\n  package: {\n    option: {\n      label: t('Group by Package'),\n      value: 'package',\n    },\n    columns: ['image', 'type', 'p75', 'p95', 'count'],\n    search: {\n      key: ['image'],\n      placeholder: t('Search for packages'),\n    },\n    transform: data =>\n      aggregate(\n        data,\n        ['type', 'image'],\n        [p75AggregateColumn, p95AggregateColumn, countAggregateColumn]\n      ),\n    sort: {\n      sortableColumns: ['p75', 'p95', 'count'],\n      defaultSort: {\n        key: 'p75',\n        order: 'desc',\n      },\n    },\n    rightAlignedColumns: ['p75', 'p95', 'count'],\n  },\n  file: {\n    option: {\n      label: t('Group by File'),\n      value: 'file',\n    },\n    columns: ['file', 'type', 'image', 'p75', 'p95', 'count'],\n    search: {\n      key: ['file'],\n      placeholder: t('Search for files'),\n    },\n    transform: data =>\n      aggregate(\n        data,\n        ['type', 'image', 'file'],\n        [p75AggregateColumn, p95AggregateColumn, countAggregateColumn]\n      ),\n    sort: {\n      sortableColumns: ['p75', 'p95', 'count'],\n      defaultSort: {\n        key: 'p75',\n        order: 'desc',\n      },\n    },\n    rightAlignedColumns: ['p75', 'p95', 'count'],\n  },\n};\n","import {useCallback, useMemo} from 'react';\nimport Fuse from 'fuse.js';\n\ntype FuseSearchParams<T> = Parameters<Fuse<T>['search']>;\nexport function useFuseSearch<T extends Record<string, unknown>>(\n  data: T[],\n  options: Fuse.IFuseOptions<T>\n) {\n  const searchIndex = useMemo(() => {\n    return new Fuse(data, options);\n    // purposely ignoring options as it will cause the effect to infinitely run\n    // data is sufficient as the index should only change if data ever changed\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  const search = useCallback(\n    (pattern: FuseSearchParams<T>[0] | undefined, opts?: FuseSearchParams<T>[1]) => {\n      if (!pattern) {\n        return data;\n      }\n      return searchIndex.search(pattern, opts).map(result => result.item);\n    },\n    [searchIndex, data]\n  );\n\n  return {search, searchIndex};\n}\n","import {useCallback, useEffect, useMemo, useRef, useState} from 'react';\n\nimport {pluckUniqueValues} from '../utils';\n\ntype ColumnFilters<T extends string | number | symbol> = {\n  [key in T]: {\n    onChange: (values: {value: string}[]) => void;\n    values: string[];\n  };\n};\n\ninterface ColumnFiltersOptions<K extends string> {\n  columns: K[];\n  initialState?: Record<K, string[] | string | undefined>;\n}\n\nfunction parseInitialState(state?: Record<string, string[] | string | undefined>) {\n  if (!state) {\n    return {};\n  }\n  return Object.entries(state).reduce((acc, [key, val]) => {\n    acc[key] = undefined;\n\n    if (Array.isArray(val)) {\n      acc[key] = val;\n    }\n\n    if (typeof val === 'string') {\n      acc[key] = [val];\n    }\n\n    return acc;\n  }, {});\n}\n\nexport function useColumnFilters<\n  T extends Record<string, string | number | undefined | any[]>,\n  K extends string = Extract<keyof T, string>\n>(data: T[], options: ColumnFiltersOptions<K>) {\n  const {columns} = options;\n  const [filters, setFilters] = useState<Partial<Record<K, string[]>>>(\n    parseInitialState(options.initialState)\n  );\n\n  const columnFilters = useMemo(() => {\n    function makeOnFilterChange(key: string) {\n      return (values: {value: string}[]) => {\n        setFilters(prevFilters => ({\n          ...prevFilters,\n          [key]: values.length > 0 ? values.map(val => val.value) : undefined,\n        }));\n      };\n    }\n\n    return columns.reduce((acc, key) => {\n      acc[key] = {\n        values: pluckUniqueValues(data, key as string).sort((a, b) => a.localeCompare(b)),\n        onChange: makeOnFilterChange(key as string),\n      };\n      return acc;\n    }, {} as ColumnFilters<K>);\n  }, [data, columns]);\n\n  // we need to validate that the initial state contain valid values\n  // if they do not we need to filter those out and update filters\n  // we only want this to run once\n  const didRun = useRef(false);\n  useEffect(() => {\n    if (didRun.current || data.length === 0) {\n      return;\n    }\n\n    setFilters(currentFilters => {\n      return Object.entries(currentFilters).reduce((acc, entry) => {\n        const [filterKey, filterValues] = entry as [string, any[] | undefined];\n        const possibleValues = columnFilters[filterKey].values;\n        const validValues = filterValues?.filter(v => possibleValues.includes(v));\n        acc[filterKey] =\n          Array.isArray(validValues) && validValues.length > 0 ? validValues : undefined;\n        return acc;\n      }, {});\n    });\n    didRun.current = true;\n  }, [data.length, columnFilters, filters]);\n\n  const filterPredicate = useCallback(\n    (row: Partial<T>) => {\n      let include = true;\n      for (const key in filters) {\n        const filterValues = filters[key];\n        if (!filterValues) {\n          continue;\n        }\n        const rowValue = row[key];\n        include = filterValues.includes(rowValue as string);\n        if (!include) {\n          return false;\n        }\n      }\n      return include;\n    },\n    [filters]\n  );\n\n  return {\n    filters,\n    columnFilters,\n    filterPredicate,\n  };\n}\n","import {useCallback, useMemo} from 'react';\n\nimport {GridColumnSortBy} from 'sentry/components/gridEditable';\n\nimport {useQuerystringState} from './useQuerystringState';\n\nexport function useSortableColumns<T extends string>(options: {\n  defaultSort: GridColumnSortBy<T>;\n  querystringKey: string;\n  sortableColumns: readonly string[];\n}) {\n  const {sortableColumns, querystringKey, defaultSort} = options;\n  const [queryStringState, _, createLocationDescriptor] = useQuerystringState({\n    key: querystringKey,\n  });\n  const currentSort = useMemo<GridColumnSortBy<T>>(() => {\n    let key = queryStringState ?? '';\n\n    const isDesc = key[0] === '-';\n    if (isDesc) {\n      key = key.slice(1);\n    }\n\n    if (!key || !sortableColumns.includes(key as T)) {\n      return defaultSort;\n    }\n\n    return {\n      key,\n      order: isDesc ? 'desc' : 'asc',\n    } as GridColumnSortBy<T>;\n  }, [sortableColumns, defaultSort, queryStringState]);\n\n  const generateSortLink = useCallback(\n    (column: T) => {\n      if (!sortableColumns.includes(column)) {\n        return () => undefined;\n      }\n      if (!currentSort) {\n        return () => createLocationDescriptor(column);\n      }\n\n      const direction =\n        currentSort.key === column && currentSort.order === 'desc' ? 'asc' : 'desc';\n\n      return () =>\n        createLocationDescriptor(`${direction === 'desc' ? '-' : ''}${column}`);\n    },\n    [currentSort, sortableColumns, createLocationDescriptor]\n  );\n\n  const sortCompareFn = useCallback(\n    (\n      a: Partial<Record<T, string | number | any[]>>,\n      b: Partial<Record<T, string | number | any[]>>\n    ) => {\n      const aValue = a[currentSort.key];\n      const bValue = b[currentSort.key];\n      if (!aValue || !bValue) {\n        return 1;\n      }\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        if (currentSort.order === 'asc') {\n          return aValue - bValue;\n        }\n        return bValue - aValue;\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        if (currentSort.order === 'asc') {\n          return aValue.localeCompare(bValue);\n        }\n        return bValue.localeCompare(aValue);\n      }\n      return 1;\n    },\n    [currentSort]\n  );\n\n  return {\n    currentSort,\n    generateSortLink,\n    sortCompareFn,\n  };\n}\n","import {useMemo} from 'react';\nimport * as qs from 'query-string';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\nconst RESULTS_PER_PAGE = 50;\n\nexport function usePageLinks(\n  data: any[],\n  cursor: number,\n  resultsPerPage = RESULTS_PER_PAGE\n) {\n  const location = useLocation();\n\n  const pageLinks = useMemo(() => {\n    const prevResults = cursor >= resultsPerPage ? 'true' : 'false';\n    const prevCursor = cursor >= resultsPerPage ? cursor - resultsPerPage : 0;\n    const prevQuery = {...location.query, cursor: prevCursor};\n    const prevHref = `${location.pathname}${qs.stringify(prevQuery)}`;\n    const prev = `<${prevHref}>; rel=\"previous\"; results=\"${prevResults}\"; cursor=\"${prevCursor}\"`;\n\n    const nextResults = cursor + resultsPerPage < data.length ? 'true' : 'false';\n    const nextCursor =\n      cursor + resultsPerPage < data.length ? cursor + resultsPerPage : 0;\n    const nextQuery = {...location.query, cursor: nextCursor};\n    const nextHref = `${location.pathname}${qs.stringify(nextQuery)}`;\n    const next = `<${nextHref}>; rel=\"next\"; results=\"${nextResults}\"; cursor=\"${nextCursor}\"`;\n\n    return `${prev},${next}`;\n  }, [cursor, location, data, resultsPerPage]);\n\n  return pageLinks;\n}\n","import {Fragment, useEffect} from 'react';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {useCurrentProjectFromRouteParam} from 'sentry/utils/profiling/hooks/useCurrentProjectFromRouteParam';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {ProfileDetailsTable} from './components/profileDetailsTable';\n\nfunction ProfileDetails() {\n  const organization = useOrganization();\n  const currentProject = useCurrentProjectFromRouteParam();\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('profiling_views.profile_summary', {\n      organization,\n      project_id: currentProject?.id,\n      project_platform: currentProject?.platform,\n    });\n    // ignore  currentProject so we don't block the analytics event\n    // or fire more than once unnecessarily\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [organization]);\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle\n        title={t('Profiling \\u2014 Details')}\n        orgSlug={organization.slug}\n      >\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <ProfileDetailsTable />\n          </Layout.Main>\n        </Layout.Body>\n      </SentryDocumentTitle>\n    </Fragment>\n  );\n}\n\nexport default ProfileDetails;\n"],"names":["renderTableHead","currentSort","generateSortLink","rightAlignedColumns","sortableColumns","onClick","column","_columnIndex","e","align","has","key","title","name","direction","order","undefined","canSort","replace","collectProfileFrames","profile","nodes","forEach","node","selfWeight","push","sort","a","b","map","symbol","frame","file","image","thread","threadId","type","is_application","totalWeight","pluckUniqueValues","collection","reduce","acc","record","value","includes","aggregate","data","groups","aggregates","groupedData","groupBy","row","join","FIELD_SEPARATOR","getGroupedKey","rows","groupedKey","makeRowFromGroupedKey","groupedValues","agg","compute","String","fromCharCode","groupedKeyValues","split","idx","useQuerystringState","initialState","location","useLocation","state","setState","useState","query","createLocationDescriptor","useCallback","nextState","currentLocation","browserHistory","setQueryStringState","useEffect","nextLocation","pathname","ProfileDetailsTable","profileGroup","useProfileGroup","groupByViewKey","setGroupByView","searchQuery","setSearchQuery","paginationCursor","setPaginationCursor","groupByView","GROUP_BY_OPTIONS","occurrence","cursor","parseInt","allData","useMemo","profiles","flatMap","transform","search","options","searchIndex","Fuse","pattern","opts","result","item","useFuseSearch","keys","threshold","debouncedSearch","debounce","searchString","setFilteredDataBySearch","filteredDataBySearch","typeFilter","setTypeFilter","imageFilter","setImageFilter","filters","columnFilters","filterPredicate","columns","setFilters","Object","entries","val","Array","isArray","makeOnFilterChange","values","prevFilters","length","localeCompare","onChange","didRun","useRef","current","currentFilters","entry","filterKey","filterValues","possibleValues","validValues","filter","v","include","rowValue","useColumnFilters","sortCompareFn","querystringKey","defaultSort","queryStringState","_","isDesc","slice","aValue","bValue","useSortableColumns","handleSearch","useEffectAfterFirstRender","filteredData","sortedData","pageLinks","resultsPerPage","prevResults","prevCursor","prevQuery","prev","qs","nextResults","nextCursor","nextQuery","usePageLinks","Fragment","ActionBar","view","option","triggerProps","prefix","t","placement","defaultQuery","placeholder","label","triggerLabel","multiple","isSearchable","isLoading","error","columnOrder","COLUMNS","columnSortBy","scrollable","stickyHeader","height","grid","renderHeadCell","Set","renderBodyCell","renderFunctionCell","onCursor","cur","space","dataRow","rowIndex","columnIndex","ProfilingFunctionsTableCell","formatter","makeFormatter","orgId","projectId","eventId","useParams","Link","to","generateProfileFlamechartRouteWithQuery","orgSlug","projectSlug","profileId","tid","frameName","framePackage","tids","width","COL_WIDTH_UNDEFINED","p75","p95","count","quantile","arr","q","sorted","from","position","int","Math","floor","frac","p75AggregateColumn","p95AggregateColumn","countAggregateColumn","uniqueTidAggregateColumn","package","ProfileDetails","organization","useOrganization","currentProject","useCurrentProjectFromRouteParam","trackAdvancedAnalyticsEvent","project_id","id","project_platform","platform","slug","fullWidth"],"sourceRoot":""}