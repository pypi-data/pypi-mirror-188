{"version":3,"file":"chunks/app_views_asyncView_tsx-app_views_settings_components_teamSelect_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/teamSelect.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {TeamBadge} from 'sentry/components/idBadge/teamBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Team} from 'sentry/types';\nimport useTeams from 'sentry/utils/useTeams';\n\ntype Props = {\n  /**\n   * Should button be disabled\n   */\n  disabled: boolean;\n  /**\n   * Should adding a team be disabled based\n   * on whether the team is idpProvisioned\n   */\n  enforceIdpProvisioned: boolean;\n  /**\n   * callback when teams are added\n   */\n  onAddTeam: (team: Team) => void;\n  /**\n   * Callback when teams are removed\n   */\n  onRemoveTeam: (teamSlug: string) => void;\n  organization: Organization;\n  /**\n   * Teams that are already selected.\n   */\n  selectedTeams: Team[];\n  /**\n   * Message to display when the last team is removed\n   * if empty no confirm will be displayed.\n   */\n  confirmLastTeamRemoveMessage?: string;\n  /**\n   * Used to determine whether we should show a loading state while waiting for teams\n   */\n  loadingTeams?: boolean;\n  /**\n   * Optional menu header.\n   */\n  menuHeader?: React.ReactElement;\n};\n\nfunction TeamSelect({\n  disabled,\n  enforceIdpProvisioned,\n  selectedTeams,\n  menuHeader,\n  organization,\n  onAddTeam,\n  onRemoveTeam,\n  confirmLastTeamRemoveMessage,\n  loadingTeams,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams();\n\n  const handleAddTeam = (option: Item) => {\n    const team = teams.find(tm => tm.slug === option.value);\n    if (team) {\n      onAddTeam(team);\n    }\n  };\n\n  const renderBody = () => {\n    if (selectedTeams.length === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n    const confirmMessage =\n      selectedTeams.length === 1 && confirmLastTeamRemoveMessage\n        ? confirmLastTeamRemoveMessage\n        : null;\n\n    return selectedTeams.map(team => (\n      <TeamRow\n        key={team.slug}\n        orgId={organization.slug}\n        team={team}\n        onRemove={slug => onRemoveTeam(slug)}\n        disabled={disabled}\n        confirmMessage={confirmMessage}\n        enforceIdpProvisioned={enforceIdpProvisioned}\n      />\n    ));\n  };\n\n  // Only show options that aren't selected in the dropdown\n  const options = teams\n    .filter(team => !selectedTeams.some(selectedTeam => selectedTeam.slug === team.slug))\n    .map((team, index) => ({\n      index,\n      value: team.slug,\n      searchKey: team.slug,\n      label: () => {\n        if (enforceIdpProvisioned && team.flags['idp:provisioned']) {\n          return (\n            <Tooltip\n              title={t(\n                \"Membership to this team is managed through your organization's identity provider.\"\n              )}\n            >\n              <DropdownTeamBadgeDisabled avatarSize={18} team={team} />\n            </Tooltip>\n          );\n        }\n        return <DropdownTeamBadge avatarSize={18} team={team} />;\n      },\n      disabled: enforceIdpProvisioned && team.flags['idp:provisioned'],\n    }));\n\n  return (\n    <Panel>\n      <PanelHeader hasButtons>\n        {t('Team')}\n        <DropdownAutoComplete\n          items={options}\n          busyItemsStillVisible={fetching}\n          onChange={debounce<(e: React.ChangeEvent<HTMLInputElement>) => void>(\n            e => onSearch(e.target.value),\n            DEFAULT_DEBOUNCE_DURATION\n          )}\n          onSelect={handleAddTeam}\n          emptyMessage={t('No teams')}\n          menuHeader={menuHeader}\n          disabled={disabled}\n          alignMenu=\"right\"\n        >\n          {({isOpen}) => (\n            <DropdownButton\n              aria-label={t('Add Team')}\n              isOpen={isOpen}\n              size=\"xs\"\n              disabled={disabled}\n            >\n              {t('Add Team')}\n            </DropdownButton>\n          )}\n        </DropdownAutoComplete>\n      </PanelHeader>\n\n      <PanelBody>{loadingTeams ? <LoadingIndicator /> : renderBody()}</PanelBody>\n    </Panel>\n  );\n}\n\ntype TeamRowProps = {\n  confirmMessage: string | null;\n  disabled: boolean;\n  enforceIdpProvisioned: boolean;\n  onRemove: Props['onRemoveTeam'];\n  orgId: string;\n  team: Team;\n};\n\nconst TeamRow = ({\n  orgId,\n  team,\n  onRemove,\n  disabled,\n  confirmMessage,\n  enforceIdpProvisioned,\n}: TeamRowProps) => (\n  <TeamPanelItem data-test-id=\"team-row\">\n    <StyledLink to={`/settings/${orgId}/teams/${team.slug}/`}>\n      <TeamBadge team={team} />\n    </StyledLink>\n    <Confirm\n      message={confirmMessage}\n      bypass={!confirmMessage}\n      onConfirm={() => onRemove(team.slug)}\n      disabled={disabled || (enforceIdpProvisioned && team.flags['idp:provisioned'])}\n    >\n      <Button\n        size=\"xs\"\n        icon={<IconSubtract isCircled size=\"xs\" />}\n        disabled={disabled || (enforceIdpProvisioned && team.flags['idp:provisioned'])}\n        title={\n          enforceIdpProvisioned && team.flags['idp:provisioned']\n            ? t(\n                \"Membership to this team is managed through your organization's identity provider.\"\n              )\n            : undefined\n        }\n      >\n        {t('Remove')}\n      </Button>\n    </Confirm>\n  </TeamPanelItem>\n);\n\nconst DropdownTeamBadge = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n`;\n\nconst DropdownTeamBadgeDisabled = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n  filter: grayscale(1);\n`;\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledLink = styled(Link)`\n  flex: 1;\n  margin-right: ${space(1)};\n`;\n\nexport default TeamSelect;\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","TeamSelect","disabled","enforceIdpProvisioned","selectedTeams","menuHeader","organization","onAddTeam","onRemoveTeam","confirmLastTeamRemoveMessage","loadingTeams","teams","onSearch","fetching","useTeams","options","filter","team","some","selectedTeam","slug","map","index","value","searchKey","label","flags","t","DropdownTeamBadgeDisabled","avatarSize","DropdownTeamBadge","hasButtons","items","busyItemsStillVisible","onChange","debounce","e","target","DEFAULT_DEBOUNCE_DURATION","onSelect","option","find","tm","emptyMessage","alignMenu","isOpen","size","length","confirmMessage","TeamRow","orgId","onRemove","renderBody","TeamPanelItem","StyledLink","to","message","bypass","onConfirm","icon","isCircled","undefined","TeamBadge","p","theme","fontSizeMedium","PanelItem","space","Link"],"sourceRoot":""}