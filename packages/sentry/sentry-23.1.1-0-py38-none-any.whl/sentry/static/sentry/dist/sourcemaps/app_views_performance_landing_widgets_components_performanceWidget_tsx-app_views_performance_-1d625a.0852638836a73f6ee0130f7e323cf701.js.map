{"version":3,"file":"chunks/app_views_performance_landing_widgets_components_performanceWidget_tsx-app_views_performance_-1d625a.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/contexts/metricsEnhancedPerformanceDataContext.tsx","webpack:///./app/views/performance/landing/widgets/components/performanceWidgetContainer.tsx","webpack:///./app/views/performance/landing/widgets/components/dataStateSwitch.tsx","webpack:///./app/views/performance/landing/widgets/components/queryHandler.tsx","webpack:///./app/views/performance/landing/widgets/components/widgetHeader.tsx","webpack:///./app/views/performance/landing/widgets/components/performanceWidget.tsx","webpack:///./app/views/performance/landing/widgets/components/selectableList.tsx"],"sourcesContent":["import {ReactNode, useCallback, useState} from 'react';\n\nimport Tag from 'sentry/components/tag';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {WIDGET_MAP_DENY_LIST} from 'sentry/views/performance/landing/widgets/utils';\nimport {PerformanceWidgetSetting} from 'sentry/views/performance/landing/widgets/widgetDefinitions';\n\nimport {AutoSampleState, useMEPSettingContext} from './metricsEnhancedSetting';\nimport {createDefinedContext} from './utils';\n\ninterface MetricsEnhancedPerformanceDataContext {\n  setIsMetricsData: (value?: boolean) => void;\n  isMetricsData?: boolean;\n}\n\nconst [_MEPDataProvider, _useMEPDataContext] =\n  createDefinedContext<MetricsEnhancedPerformanceDataContext>({\n    name: 'MetricsEnhancedPerformanceDataContext',\n  });\n\nexport const MEPDataProvider = ({\n  children,\n  chartSetting,\n}: {\n  children: ReactNode;\n  chartSetting?: PerformanceWidgetSetting;\n}) => {\n  const {setAutoSampleState} = useMEPSettingContext();\n  const [isMetricsData, _setIsMetricsData] = useState<boolean | undefined>(undefined); // Uses undefined to cover 'not initialized'\n\n  const setIsMetricsData = useCallback(\n    (value?: boolean) => {\n      if (WIDGET_MAP_DENY_LIST.includes(chartSetting as PerformanceWidgetSetting)) {\n        // Certain widgets shouldn't update their sampled tags or have the page info change eg. Auto(...)\n        return;\n      }\n      if (value === true) {\n        setAutoSampleState(AutoSampleState.metrics);\n      } else if (value === false) {\n        setAutoSampleState(AutoSampleState.transactions);\n      }\n      _setIsMetricsData(value);\n    },\n    [setAutoSampleState, _setIsMetricsData, chartSetting]\n  );\n\n  return (\n    <_MEPDataProvider value={{isMetricsData, setIsMetricsData}}>\n      {children}\n    </_MEPDataProvider>\n  );\n};\n\nexport const useMEPDataContext = _useMEPDataContext;\n\nexport const MEPTag = () => {\n  const {isMetricsData} = useMEPDataContext();\n  const organization = useOrganization();\n\n  if (!organization.features.includes('performance-use-metrics')) {\n    // Separate if for easier flag deletion\n    return null;\n  }\n\n  if (isMetricsData === undefined) {\n    return <span data-test-id=\"no-metrics-data-tag\" />;\n  }\n\n  const tagText = isMetricsData ? 'processed' : 'indexed';\n\n  return <Tag data-test-id=\"has-metrics-data-tag\">{tagText}</Tag>;\n};\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\nexport type PerformanceWidgetContainerTypes = 'panel' | 'inline';\n\nconst StyledPanel = styled(Panel)`\n  padding-top: ${space(2)};\n  margin-bottom: 0;\n`;\nconst Div = styled('div')``;\n\nconst getPerformanceWidgetContainer = ({\n  containerType,\n}: {\n  containerType: PerformanceWidgetContainerTypes;\n}) => {\n  if (containerType === 'panel') {\n    return StyledPanel;\n  }\n  if (containerType === 'inline') {\n    return Div;\n  }\n  return Div;\n};\n\nexport default getPerformanceWidgetContainer;\n","import {Fragment} from 'react';\n\nexport function DataStateSwitch(props: {\n  dataComponents: JSX.Element[];\n  emptyComponent: JSX.Element;\n  errorComponent: JSX.Element;\n\n  hasData: boolean;\n  isErrored: boolean;\n  isLoading: boolean;\n  loadingComponent?: JSX.Element;\n}): JSX.Element {\n  if (props.isErrored) {\n    return props.errorComponent;\n  }\n  if (props.isLoading && props.loadingComponent) {\n    return props.loadingComponent;\n  }\n  if (!props.hasData) {\n    return props.emptyComponent;\n  }\n  return <Fragment>{props.dataComponents}</Fragment>;\n}\n","import {Fragment, useEffect} from 'react';\n\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport {useMEPDataContext} from 'sentry/utils/performance/contexts/metricsEnhancedPerformanceDataContext';\n\nimport {QueryDefinitionWithKey, QueryHandlerProps, WidgetDataConstraint} from '../types';\nimport {PerformanceWidgetSetting} from '../widgetDefinitions';\n\n/*\n  Component to handle switching component-style queries over to state. This should be temporary to make it easier to switch away from waterfall style api components.\n*/\nexport function QueryHandler<T extends WidgetDataConstraint>(\n  props: QueryHandlerProps<T>\n) {\n  const children = props.children ?? <Fragment />;\n\n  if (!props.queries.length) {\n    return <Fragment>{children}</Fragment>;\n  }\n\n  return (\n    <Fragment>\n      {props.queries\n        .filter(q => (q.enabled ? q.enabled(props.widgetData) : true))\n        .map(query => (\n          <SingleQueryHandler key={query.queryKey} {...props} query={query} />\n        ))}\n    </Fragment>\n  );\n}\n\nfunction genericQueryReferrer(setting: PerformanceWidgetSetting) {\n  return `api.performance.generic-widget-chart.${setting.replace(/_/g, '-')}`;\n}\n\nfunction SingleQueryHandler<T extends WidgetDataConstraint>(\n  props: QueryHandlerProps<T> & {query: QueryDefinitionWithKey<T>}\n) {\n  const query = props.query;\n  const globalSelection = props.queryProps.eventView.getPageFilters();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : null;\n\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : null;\n\n  useEffect(\n    () => () => {\n      // Destroy previous data on unmount, in case enabled value changes and unmounts the query component.\n      props.removeWidgetDataForKey(query.queryKey);\n    },\n    []\n  );\n\n  return (\n    <query.component\n      key={query.queryKey}\n      fields={query.fields}\n      yAxis={query.fields}\n      start={start}\n      end={end}\n      period={globalSelection.datetime.period}\n      project={globalSelection.projects}\n      environment={globalSelection.environments}\n      organization={props.queryProps.organization}\n      orgSlug={props.queryProps.organization.slug}\n      eventView={props.queryProps.eventView}\n      query={props.queryProps.eventView.getQueryWithAdditionalConditions()}\n      widgetData={props.widgetData}\n      referrer={genericQueryReferrer(props.queryProps.chartSetting)}\n    >\n      {results => {\n        return (\n          <Fragment>\n            <QueryResultSaver<T> results={results} {...props} query={query} />\n          </Fragment>\n        );\n      }}\n    </query.component>\n  );\n}\n\nfunction QueryResultSaver<T extends WidgetDataConstraint>(\n  props: {\n    // TODO(k-fish): Fix this any.\n    query: QueryDefinitionWithKey<T>;\n    results: any;\n  } & QueryHandlerProps<T>\n) {\n  const mepContext = useMEPDataContext();\n  const {results, query} = props;\n\n  const transformed = query.transform(props.queryProps, results, props.query);\n\n  useEffect(() => {\n    const isMetricsData =\n      results?.seriesAdditionalInfo?.[props.queryProps.fields[0]]?.isMetricsData ??\n      results?.histograms?.meta?.isMetricsData ??\n      results?.tableData?.meta?.isMetricsData;\n    mepContext.setIsMetricsData(isMetricsData);\n    props.setWidgetDataForKey(query.queryKey, transformed);\n  }, [transformed?.hasData, transformed?.isLoading, transformed?.isErrored]);\n  return <Fragment />;\n}\n","import styled from '@emotion/styled';\n\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport space from 'sentry/styles/space';\nimport {MEPTag} from 'sentry/utils/performance/contexts/metricsEnhancedPerformanceDataContext';\n\nimport {\n  GenericPerformanceWidgetProps,\n  WidgetDataConstraint,\n  WidgetDataProps,\n} from '../types';\n\nexport function WidgetHeader<T extends WidgetDataConstraint>(\n  props: GenericPerformanceWidgetProps<T> & WidgetDataProps<T>\n) {\n  const {title, titleTooltip, Subtitle, HeaderActions, InteractiveTitle} = props;\n  return (\n    <WidgetHeaderContainer>\n      <TitleContainer>\n        <StyledHeaderTitleLegend data-test-id=\"performance-widget-title\">\n          {InteractiveTitle ? (\n            <InteractiveTitle {...props} />\n          ) : (\n            <TextOverflow>{title}</TextOverflow>\n          )}\n          <MEPTag />\n          {titleTooltip && (\n            <QuestionTooltip position=\"top\" size=\"sm\" title={titleTooltip} />\n          )}\n        </StyledHeaderTitleLegend>\n        {Subtitle ? <Subtitle {...props} /> : null}\n      </TitleContainer>\n      <HeaderActionsContainer>\n        {HeaderActions && <HeaderActions {...props} />}\n      </HeaderActionsContainer>\n    </WidgetHeaderContainer>\n  );\n}\n\nconst StyledHeaderTitleLegend = styled(HeaderTitleLegend)`\n  position: relative;\n  z-index: initial;\n  top: -${space(0.5)};\n`;\n\nconst TitleContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst WidgetHeaderContainer = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  gap: ${space(1)};\n`;\n\nconst HeaderActionsContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(1)};\n`;\n","import {Fragment, useCallback, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconWarning} from 'sentry/icons/iconWarning';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {MEPDataProvider} from 'sentry/utils/performance/contexts/metricsEnhancedPerformanceDataContext';\nimport useApi from 'sentry/utils/useApi';\nimport getPerformanceWidgetContainer from 'sentry/views/performance/landing/widgets/components/performanceWidgetContainer';\n\nimport {\n  GenericPerformanceWidgetProps,\n  WidgetDataConstraint,\n  WidgetDataProps,\n  WidgetDataResult,\n  WidgetPropUnion,\n} from '../types';\nimport {PerformanceWidgetSetting} from '../widgetDefinitions';\n\nimport {DataStateSwitch} from './dataStateSwitch';\nimport {QueryHandler} from './queryHandler';\nimport {WidgetHeader} from './widgetHeader';\n\n// Generic performance widget for type T, where T defines all the data contained in the widget.\nexport function GenericPerformanceWidget<T extends WidgetDataConstraint>(\n  props: WidgetPropUnion<T>\n) {\n  // Use object keyed to chart setting so switching between charts of a similar type doesn't retain data with query components still having inflight requests.\n  const [allWidgetData, setWidgetData] = useState<{[chartSetting: string]: T}>({});\n  const widgetData = allWidgetData[props.chartSetting] ?? {};\n  const widgetDataRef = useRef(widgetData);\n\n  const setWidgetDataForKey = useCallback(\n    (dataKey: string, result?: WidgetDataResult) => {\n      const _widgetData = widgetDataRef.current;\n      const newWidgetData = {..._widgetData, [dataKey]: result};\n      widgetDataRef.current = newWidgetData;\n      setWidgetData({[props.chartSetting]: newWidgetData});\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [allWidgetData, setWidgetData]\n  );\n  const removeWidgetDataForKey = useCallback(\n    (dataKey: string) => {\n      const _widgetData = widgetDataRef.current;\n      const newWidgetData = {..._widgetData};\n      delete newWidgetData[dataKey];\n      widgetDataRef.current = newWidgetData;\n      setWidgetData({[props.chartSetting]: newWidgetData});\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [allWidgetData, setWidgetData]\n  );\n  const widgetProps = {widgetData, setWidgetDataForKey, removeWidgetDataForKey};\n\n  const queries = Object.entries(props.Queries).map(([key, definition]) => ({\n    ...definition,\n    queryKey: key,\n  }));\n\n  const api = useApi();\n\n  const totalHeight = props.Visualizations.reduce((acc, curr) => acc + curr.height, 0);\n\n  return (\n    <Fragment>\n      <MEPDataProvider chartSetting={props.chartSetting}>\n        <QueryHandler\n          eventView={props.eventView}\n          widgetData={widgetData}\n          setWidgetDataForKey={setWidgetDataForKey}\n          removeWidgetDataForKey={removeWidgetDataForKey}\n          queryProps={props}\n          queries={queries}\n          api={api}\n        />\n        <DataDisplay<T> {...props} {...widgetProps} totalHeight={totalHeight} />\n      </MEPDataProvider>\n    </Fragment>\n  );\n}\n\nfunction trackDataComponentClicks(\n  chartSetting: PerformanceWidgetSetting,\n  organization: Organization\n) {\n  trackAdvancedAnalyticsEvent('performance_views.landingv3.widget.interaction', {\n    organization,\n    widget_type: chartSetting,\n  });\n}\n\nexport function DataDisplay<T extends WidgetDataConstraint>(\n  props: GenericPerformanceWidgetProps<T> & WidgetDataProps<T> & {totalHeight: number}\n) {\n  const {Visualizations, chartHeight, totalHeight, containerType, EmptyComponent} = props;\n\n  const Container = getPerformanceWidgetContainer({\n    containerType,\n  });\n\n  const numberKeys = Object.keys(props.Queries).length;\n  const missingDataKeys = Object.values(props.widgetData).length !== numberKeys;\n  const hasData =\n    !missingDataKeys && Object.values(props.widgetData).every(d => !d || d.hasData);\n  const isLoading = Object.values(props.widgetData).some(d => !d || d.isLoading);\n  const isErrored =\n    !missingDataKeys && Object.values(props.widgetData).some(d => d && d.isErrored);\n\n  return (\n    <Container data-test-id=\"performance-widget-container\">\n      <ContentContainer>\n        <WidgetHeader<T> {...props} />\n      </ContentContainer>\n      <DataStateSwitch\n        isLoading={isLoading}\n        isErrored={isErrored}\n        hasData={hasData}\n        errorComponent={<DefaultErrorComponent height={totalHeight} />}\n        dataComponents={Visualizations.map((Visualization, index) => (\n          <ContentContainer\n            key={index}\n            noPadding={Visualization.noPadding}\n            bottomPadding={Visualization.bottomPadding}\n            data-test-id=\"widget-state-has-data\"\n            onClick={() =>\n              trackDataComponentClicks(props.chartSetting, props.organization)\n            }\n          >\n            {getDynamicText({\n              value: (\n                <Visualization.component\n                  grid={defaultGrid}\n                  queryFields={Visualization.fields}\n                  widgetData={props.widgetData}\n                  height={chartHeight}\n                />\n              ),\n              fixed: <Placeholder height={`${chartHeight}px`} />,\n            })}\n          </ContentContainer>\n        ))}\n        loadingComponent={<PerformanceWidgetPlaceholder height={`${totalHeight}px`} />}\n        emptyComponent={\n          EmptyComponent ? (\n            <EmptyComponent />\n          ) : (\n            <PerformanceWidgetPlaceholder height={`${totalHeight}px`} />\n          )\n        }\n      />\n    </Container>\n  );\n}\n\nconst DefaultErrorComponent = (props: {height: number}) => {\n  return (\n    <ErrorPanel data-test-id=\"widget-state-is-errored\" height={`${props.height}px`}>\n      <IconWarning color=\"gray300\" size=\"lg\" />\n    </ErrorPanel>\n  );\n};\n\nconst defaultGrid = {\n  left: space(0),\n  right: space(0),\n  top: space(2),\n  bottom: space(1),\n};\n\nconst ContentContainer = styled('div')<{bottomPadding?: boolean; noPadding?: boolean}>`\n  padding-left: ${p => (p.noPadding ? space(0) : space(2))};\n  padding-right: ${p => (p.noPadding ? space(0) : space(2))};\n  padding-bottom: ${p => (p.bottomPadding ? space(1) : space(0))};\n`;\n\nconst PerformanceWidgetPlaceholder = styled(Placeholder)`\n  border-color: transparent;\n  border-bottom-right-radius: inherit;\n  border-bottom-left-radius: inherit;\n`;\n\nGenericPerformanceWidget.defaultProps = {\n  containerType: 'panel',\n  chartHeight: 200,\n};\n","import styled from '@emotion/styled';\n\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport {RadioLineItem} from 'sentry/components/forms/controls/radioGroup';\nimport Link from 'sentry/components/links/link';\nimport Radio from 'sentry/components/radio';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  items: (() => React.ReactNode)[];\n  selectedIndex: number;\n  setSelectedIndex: (index: number) => void;\n  radioColor?: string;\n};\n\nexport default function SelectableList(props: Props) {\n  return (\n    <div>\n      {props.items.map((item, index) => (\n        <SelectableItem\n          {...props}\n          isSelected={index === props.selectedIndex}\n          currentIndex={index}\n          key={index}\n        >\n          {item()}\n        </SelectableItem>\n      ))}\n    </div>\n  );\n}\n\nfunction SelectableItem({\n  isSelected,\n  currentIndex: index,\n  children,\n  setSelectedIndex,\n  radioColor,\n}: {children: React.ReactNode; currentIndex: number; isSelected: boolean} & Props) {\n  return (\n    <ListItemContainer>\n      <ItemRadioContainer color={radioColor ?? ''}>\n        <RadioLineItem index={index} role=\"radio\">\n          <Radio checked={isSelected} onChange={() => setSelectedIndex(index)} />\n        </RadioLineItem>\n      </ItemRadioContainer>\n      {children}\n    </ListItemContainer>\n  );\n}\n\nexport const RightAlignedCell = styled('div')`\n  text-align: right;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 ${space(1)};\n`;\n\nexport const Subtitle = styled('span')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n  display: inline-block;\n`;\n\nexport const GrowLink = styled(Link)`\n  flex-grow: 1;\n  display: inherit;\n`;\n\nexport const WidgetEmptyStateWarning = () => {\n  return (\n    <StyledEmptyStateWarning>\n      <PrimaryMessage>{t('No results found')}</PrimaryMessage>\n      <SecondaryMessage>\n        {t(\n          'Transactions may not be listed due to the filters above or a low sampling rate'\n        )}\n      </SecondaryMessage>\n    </StyledEmptyStateWarning>\n  );\n};\n\nexport function ListClose(props: {\n  onClick: () => void;\n  setSelectListIndex: (n: number) => void;\n}) {\n  return (\n    <StyledTooltip title={t('Exclude this transaction from the search filter.')}>\n      <StyledIconClose\n        onClick={() => {\n          props.onClick();\n          props.setSelectListIndex(0);\n        }}\n      />\n    </StyledTooltip>\n  );\n}\n\nconst StyledTooltip = styled(Tooltip)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledIconClose = styled(IconClose)`\n  cursor: pointer;\n  color: ${p => p.theme.gray200};\n`;\n\nconst StyledEmptyStateWarning = styled(EmptyStateWarning)`\n  min-height: 300px;\n  justify-content: center;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst PrimaryMessage = styled('span')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  color: ${p => p.theme.gray300};\n  font-weight: 600;\n  margin: 0 auto ${space(1)};\n`;\n\nconst SecondaryMessage = styled('p')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.gray300};\n  max-width: 300px;\n`;\n\nconst ListItemContainer = styled('div')`\n  display: flex;\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1)} ${space(2)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst ItemRadioContainer = styled('div')`\n  grid-row: 1/3;\n  input {\n    cursor: pointer;\n  }\n  input:checked::after {\n    background-color: ${p => p.color};\n  }\n`;\n"],"names":["_MEPDataProvider","_useMEPDataContext","createDefinedContext","name","MEPDataProvider","children","chartSetting","setAutoSampleState","useMEPSettingContext","isMetricsData","_setIsMetricsData","useState","undefined","setIsMetricsData","useCallback","value","WIDGET_MAP_DENY_LIST","AutoSampleState","useMEPDataContext","MEPTag","useOrganization","features","includes","tagText","StyledPanel","Panel","space","Div","DataStateSwitch","props","isErrored","errorComponent","isLoading","loadingComponent","hasData","Fragment","dataComponents","emptyComponent","QueryHandler","queries","length","filter","q","enabled","widgetData","map","query","SingleQueryHandler","queryKey","globalSelection","queryProps","eventView","getPageFilters","start","datetime","getUtcToLocalDateObject","end","useEffect","removeWidgetDataForKey","component","fields","yAxis","period","project","projects","environment","environments","organization","orgSlug","slug","getQueryWithAdditionalConditions","referrer","setting","replace","results","QueryResultSaver","mepContext","transformed","transform","seriesAdditionalInfo","histograms","meta","tableData","setWidgetDataForKey","WidgetHeader","title","titleTooltip","Subtitle","HeaderActions","InteractiveTitle","WidgetHeaderContainer","TitleContainer","StyledHeaderTitleLegend","position","size","HeaderActionsContainer","HeaderTitleLegend","GenericPerformanceWidget","allWidgetData","setWidgetData","widgetDataRef","useRef","dataKey","result","newWidgetData","current","widgetProps","Object","entries","Queries","key","definition","api","useApi","totalHeight","Visualizations","reduce","acc","curr","height","DataDisplay","chartHeight","containerType","EmptyComponent","Container","getPerformanceWidgetContainer","numberKeys","keys","missingDataKeys","values","every","d","some","ContentContainer","DefaultErrorComponent","Visualization","index","noPadding","bottomPadding","onClick","trackDataComponentClicks","trackAdvancedAnalyticsEvent","widget_type","getDynamicText","grid","defaultGrid","queryFields","fixed","PerformanceWidgetPlaceholder","color","left","right","top","bottom","p","Placeholder","defaultProps","SelectableList","items","item","SelectableItem","isSelected","selectedIndex","currentIndex","setSelectedIndex","radioColor","ListItemContainer","ItemRadioContainer","role","checked","onChange","RightAlignedCell","theme","gray300","fontSizeMedium","GrowLink","Link","WidgetEmptyStateWarning","StyledEmptyStateWarning","PrimaryMessage","t","SecondaryMessage","ListClose","StyledTooltip","StyledIconClose","setSelectListIndex","Tooltip","IconClose","gray200","EmptyStateWarning","fontSizeExtraLarge","border"],"sourceRoot":""}