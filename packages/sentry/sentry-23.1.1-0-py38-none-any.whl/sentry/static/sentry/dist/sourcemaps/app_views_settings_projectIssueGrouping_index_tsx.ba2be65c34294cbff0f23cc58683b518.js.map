{"version":3,"file":"chunks/app_views_settings_projectIssueGrouping_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectIssueGrouping/upgradeGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/utils.tsx","webpack:///./app/views/settings/projectIssueGrouping/index.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport {addLoadingMessage, clearIndicators} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport {openConfirmModal} from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {EventGroupingConfig, Organization, Project} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport marked from 'sentry/utils/marked';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport {getGroupingChanges, getGroupingRisk} from './utils';\n\nconst upgradeGroupingId = 'upgrade-grouping';\n\ntype Props = {\n  api: Client;\n  groupingConfigs: EventGroupingConfig[];\n  location: Location;\n  onUpgrade: () => void;\n  organization: Organization;\n  project: Project;\n  projectId: string;\n};\n\nfunction UpgradeGrouping({\n  groupingConfigs,\n  organization,\n  projectId,\n  project,\n  onUpgrade,\n  api,\n  location,\n}: Props) {\n  const hasProjectWriteAccess = organization.access.includes('project:write');\n  const {updateNotes, riskLevel, latestGroupingConfig} = getGroupingChanges(\n    project,\n    groupingConfigs\n  );\n  const {riskNote, alertType} = getGroupingRisk(riskLevel);\n  const noUpdates = project.groupingAutoUpdate || !latestGroupingConfig;\n  const priority = riskLevel >= 2 ? 'danger' : 'primary';\n\n  useEffect(() => {\n    if (\n      location.hash !== `#${upgradeGroupingId}` ||\n      noUpdates ||\n      !groupingConfigs ||\n      !hasProjectWriteAccess\n    ) {\n      return;\n    }\n    handleOpenConfirmModal();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.hash]);\n\n  if (!groupingConfigs) {\n    return null;\n  }\n\n  async function handleConfirmUpgrade() {\n    const newData: Record<string, string | number> = {};\n\n    if (latestGroupingConfig) {\n      const now = Math.floor(new Date().getTime() / 1000);\n      const ninety_days = 3600 * 24 * 90;\n\n      newData.groupingConfig = latestGroupingConfig.id;\n      newData.secondaryGroupingConfig = project.groupingConfig;\n      newData.secondaryGroupingExpiry = now + ninety_days;\n    }\n\n    addLoadingMessage(t('Changing grouping\\u2026'));\n    try {\n      const response = await api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/`,\n        {\n          method: 'PUT',\n          data: newData,\n        }\n      );\n      clearIndicators();\n      ProjectsStore.onUpdateSuccess(response);\n      onUpgrade();\n    } catch {\n      handleXhrErrorResponse(t('Unable to upgrade config'));\n    }\n  }\n\n  function handleOpenConfirmModal() {\n    openConfirmModal({\n      confirmText: t('Upgrade'),\n      priority,\n      onConfirm: handleConfirmUpgrade,\n      message: (\n        <Fragment>\n          <TextBlock>\n            <strong>{t('Upgrade Grouping Strategy')}</strong>\n          </TextBlock>\n          <TextBlock>\n            {t(\n              'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'\n            )}\n          </TextBlock>\n          <TextBlock>\n            <strong>{t('New Behavior')}</strong>\n            <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />\n          </TextBlock>\n          <TextBlock>\n            <Alert type={alertType}>{riskNote}</Alert>\n          </TextBlock>\n        </Fragment>\n      ),\n    });\n  }\n\n  function getButtonTitle() {\n    if (project.groupingAutoUpdate) {\n      return t('Disabled because automatic upgrading is enabled');\n    }\n\n    if (!hasProjectWriteAccess) {\n      return t('You do not have sufficient permissions to do this');\n    }\n\n    if (noUpdates) {\n      return t('You are already on the latest version');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <Panel id={upgradeGroupingId}>\n      <PanelHeader>{t('Upgrade Grouping')}</PanelHeader>\n      <PanelBody>\n        <FieldGroup\n          label={t('Upgrade Grouping Strategy')}\n          help={tct(\n            'If the project uses an old grouping strategy an update is possible.[linebreak]Doing so will cause new events to group differently.',\n            {\n              linebreak: <br />,\n            }\n          )}\n          disabled\n        >\n          <div>\n            <Button\n              onClick={handleOpenConfirmModal}\n              disabled={!hasProjectWriteAccess || noUpdates}\n              title={getButtonTitle()}\n              priority={priority}\n            >\n              {t('Upgrade Grouping Strategy')}\n            </Button>\n          </div>\n        </FieldGroup>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default UpgradeGrouping;\n","import {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {EventGroupingConfig, Project} from 'sentry/types';\n\nexport function getGroupingChanges(\n  project: Project,\n  groupingConfigs: EventGroupingConfig[]\n): {\n  latestGroupingConfig: EventGroupingConfig | null;\n  riskLevel: number;\n  updateNotes: string;\n} {\n  const byId: Record<string, EventGroupingConfig> = {};\n  let updateNotes: string = '';\n  let riskLevel: number = 0;\n  let latestGroupingConfig: EventGroupingConfig | null = null;\n\n  groupingConfigs.forEach(cfg => {\n    byId[cfg.id] = cfg;\n    if (cfg.latest && project.groupingConfig !== cfg.id) {\n      updateNotes = cfg.changelog;\n      latestGroupingConfig = cfg;\n      riskLevel = cfg.risk;\n    }\n  });\n\n  if (latestGroupingConfig) {\n    let next = (latestGroupingConfig as EventGroupingConfig).base ?? '';\n    while (next !== project.groupingConfig) {\n      const cfg = byId[next];\n      if (!cfg) {\n        break;\n      }\n      riskLevel = Math.max(riskLevel, cfg.risk);\n      updateNotes = cfg.changelog + '\\n' + updateNotes;\n      next = cfg.base ?? '';\n    }\n  }\n\n  return {updateNotes, riskLevel, latestGroupingConfig};\n}\n\nexport function getGroupingRisk(riskLevel: number): {\n  alertType: React.ComponentProps<typeof Alert>['type'];\n  riskNote: React.ReactNode;\n} {\n  switch (riskLevel) {\n    case 0:\n      return {\n        riskNote: t('This upgrade has the chance to create some new issues.'),\n        alertType: 'info',\n      };\n    case 1:\n      return {\n        riskNote: t('This upgrade will create some new issues.'),\n        alertType: 'warning',\n      };\n    case 2:\n      return {\n        riskNote: (\n          <strong>\n            {t(\n              'The new grouping strategy is incompatible with the current and will create entirely new issues.'\n            )}\n          </strong>\n        ),\n        alertType: 'error',\n      };\n    default:\n      return {riskNote: undefined, alertType: undefined};\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {fields} from 'sentry/data/forms/projectIssueGrouping';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {EventGroupingConfig, Organization, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport UpgradeGrouping from './upgradeGrouping';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  groupingConfigs: EventGroupingConfig[] | null;\n} & AsyncView['state'];\n\nclass ProjectIssueGrouping extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Issue Grouping'), projectId, false);\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      groupingConfigs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, project} = this.props;\n    return [\n      [\n        'groupingConfigs',\n        `/projects/${organization.slug}/${project.slug}/grouping-configs/`,\n      ],\n    ];\n  }\n\n  handleSubmit = (response: Project) => {\n    // This will update our project context\n    ProjectsStore.onUpdateSuccess(response);\n  };\n\n  renderBody() {\n    const {groupingConfigs} = this.state;\n    const {organization, project, params, location} = this.props;\n    const endpoint = `/projects/${organization.slug}/${project.slug}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n        groupingConfigs,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Issue Grouping')} />\n\n        <TextBlock>\n          {tct(\n            `All events have a fingerprint. Events with the same fingerprint are grouped together into an issue. To learn more about issue grouping, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={project}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleSubmit}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Fingerprint Rules')}\n            fields={[fields.fingerprintingRules]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Stack Trace Rules')}\n            fields={[fields.groupingEnhancements]}\n          />\n\n          <Feature features={['set-grouping-config']} organization={organization}>\n            <JsonForm\n              {...jsonFormProps}\n              title={t('Change defaults')}\n              fields={[\n                fields.groupingConfig,\n                fields.secondaryGroupingConfig,\n                fields.secondaryGroupingExpiry,\n              ]}\n            />\n          </Feature>\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Automatic Grouping Updates')}\n            fields={[fields.groupingAutoUpdate]}\n          />\n\n          <UpgradeGrouping\n            groupingConfigs={groupingConfigs ?? []}\n            organization={organization}\n            projectId={params.projectId}\n            project={project}\n            api={this.api}\n            onUpgrade={this.fetchData}\n            location={location}\n          />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nexport default ProjectIssueGrouping;\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","UpgradeGrouping","groupingConfigs","organization","projectId","project","onUpgrade","api","location","hasProjectWriteAccess","access","includes","updateNotes","riskLevel","latestGroupingConfig","byId","forEach","cfg","id","latest","groupingConfig","changelog","risk","next","base","Math","max","getGroupingChanges","riskNote","alertType","t","undefined","getGroupingRisk","noUpdates","groupingAutoUpdate","priority","useEffect","hash","handleOpenConfirmModal","async","handleConfirmUpgrade","newData","now","floor","Date","getTime","ninety_days","secondaryGroupingConfig","secondaryGroupingExpiry","addLoadingMessage","response","requestPromise","slug","method","data","clearIndicators","ProjectsStore","handleXhrErrorResponse","openConfirmModal","confirmText","onConfirm","message","Fragment","dangerouslySetInnerHTML","__html","marked","type","label","help","tct","linebreak","disabled","onClick","ProjectIssueGrouping","props","params","routeTitleGen","getDefaultState","super","getEndpoints","renderBody","state","endpoint","Set","jsonFormProps","additionalFieldProps","features","has","link","href","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","handleSubmit","fields","fetchData"],"sourceRoot":""}