{"version":3,"file":"chunks/app_views_replays_list_container_tsx-images_spot_replays-empty-state_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/components/replays/replaysFeatureBadge.tsx","webpack:///./app/utils/replays/hooks/useReplayOnboarding.tsx","webpack:///./app/utils/replays/hooks/useReplayPageview.tsx","webpack:///./app/views/replays/replaySearchBar.tsx","webpack:///./app/views/replays/filters.tsx","webpack:///./app/views/replays/list/replayOnboardingPanel.tsx","webpack:///./app/views/replays/list/replays.tsx","webpack:///./app/views/replays/list/container.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n}\n\nfunction OnboardingPanel({image, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import FeatureBadge from 'sentry/components/featureBadge';\n\nfunction ReplaysFeatureBadge(\n  props: Omit<React.ComponentProps<typeof FeatureBadge>, 'type'>\n) {\n  return <FeatureBadge {...props} type=\"beta\" />;\n}\n\nexport default ReplaysFeatureBadge;\n","import {useCallback, useEffect, useMemo} from 'react';\n\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {Project} from 'sentry/types';\nimport {PageFilters} from 'sentry/types/core';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\nfunction getSelectedProjectList(\n  selectedProjects: PageFilters['projects'],\n  projects: Project[]\n) {\n  if (selectedProjects[0] === ALL_ACCESS_PROJECTS || selectedProjects.length === 0) {\n    return projects;\n  }\n\n  const projectsByProjectId = projects.reduce<Record<string, Project>>((acc, project) => {\n    acc[project.id] = project;\n    return acc;\n  }, {});\n  return selectedProjects.map(id => projectsByProjectId[id]).filter(Boolean);\n}\n\nexport function useHaveSelectedProjectsSentAnyReplayEvents() {\n  const {projects} = useProjects();\n  const {selection} = usePageFilters();\n\n  const orgSentOneOrMoreReplayEvent = useMemo(() => {\n    const selectedProjects = getSelectedProjectList(selection.projects, projects);\n    const hasSentOneReplay = selectedProjects.some(project => project.hasReplays);\n    return hasSentOneReplay;\n  }, [selection.projects, projects]);\n\n  return orgSentOneOrMoreReplayEvent;\n}\n\nexport function useReplayOnboardingSidebarPanel() {\n  const {location} = useRouteContext();\n  const hasSentOneReplay = useHaveSelectedProjectsSentAnyReplayEvents();\n\n  useEffect(() => {\n    if (hasSentOneReplay && location.hash === '#replay-sidequest') {\n      SidebarPanelStore.activatePanel(SidebarPanelKey.ReplaysOnboarding);\n    }\n  }, [hasSentOneReplay, location.hash]);\n\n  const activateSidebar = useCallback((event: {preventDefault: () => void}) => {\n    event.preventDefault();\n    window.location.hash = 'replay-sidequest';\n    SidebarPanelStore.activatePanel(SidebarPanelKey.ReplaysOnboarding);\n  }, []);\n\n  return {hasSentOneReplay, activateSidebar};\n}\n","import {useEffect, useRef} from 'react';\n\nimport ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nfunction useReplayPageview(type: 'replay.details-time-spent' | 'replay.list-time-spent') {\n  const config = useLegacyStore(ConfigStore);\n  const location = useLocation();\n  const organization = useOrganization();\n  const startTimeRef = useRef(Date.now());\n\n  useEffect(() => {\n    const startTime = startTimeRef.current;\n\n    trackAdvancedAnalyticsEvent('replay.details-viewed', {\n      organization,\n      referrer: decodeScalar(location.query.referrer),\n      user_email: config.user.email,\n    });\n\n    return () => {\n      const endTime = Date.now();\n      trackAdvancedAnalyticsEvent(type, {\n        organization,\n        seconds: (endTime - startTime) / 1000,\n        user_email: config.user.email,\n      });\n    };\n  }, [organization, type, location.query.referrer, config.user.email]);\n}\n\nexport default useReplayPageview;\n","import SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH, NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, SavedSearchType, TagCollection} from 'sentry/types';\nimport {getFieldDefinition, REPLAY_FIELDS} from 'sentry/utils/fields';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\n/**\n * Prepare query string (e.g. strip special characters like negation operator)\n */\nfunction prepareQuery(searchQuery: string) {\n  return searchQuery.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n}\nconst getReplayFieldDefinition = (key: string) => getFieldDefinition(key, 'replay');\n\nfunction fieldDefinitionsToTagCollection(fieldKeys: string[]): TagCollection {\n  return Object.fromEntries(\n    fieldKeys.map(key => [\n      key,\n      {\n        key,\n        name: key,\n        kind: getReplayFieldDefinition(key)?.kind,\n      },\n    ])\n  );\n}\n\nconst REPLAY_TAGS = fieldDefinitionsToTagCollection(REPLAY_FIELDS);\n\ntype Props = React.ComponentProps<typeof SmartSearchBar> & {\n  organization: Organization;\n  pageFilters: PageFilters;\n};\n\nfunction SearchBar(props: Props) {\n  return (\n    <SmartSearchBar\n      {...props}\n      onGetTagValues={undefined}\n      supportedTags={REPLAY_TAGS}\n      placeholder={t('Search for users, duration, count_errors, and more')}\n      prepareQuery={prepareQuery}\n      maxQueryLength={MAX_QUERY_LENGTH}\n      searchSource=\"replay_index\"\n      savedSearchType={SavedSearchType.REPLAY}\n      maxMenuHeight={500}\n      hasRecentSearches\n      highlightUnsupportedTags\n      fieldDefinitionGetter={getReplayFieldDefinition}\n    />\n  );\n}\n\nexport default SearchBar;\n","import {useEffect, useRef} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport space from 'sentry/styles/space';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport ReplaySearchBar from 'sentry/views/replays/replaySearchBar';\n\nconst DEFAULT_QUERY = 'duration:>=5';\n\nfunction ReplaysFilters() {\n  const {selection} = usePageFilters();\n  const location = useLocation();\n  const organization = useOrganization();\n  const didMount = useRef(false);\n\n  const {pathname, query} = location;\n\n  useEffect(() => {\n    if (!didMount.current && !query?.query) {\n      browserHistory.push({\n        pathname,\n        query: {\n          ...query,\n          cursor: undefined,\n          query: DEFAULT_QUERY,\n        },\n      });\n    }\n    didMount.current = true;\n  }, [pathname, query]);\n\n  return (\n    <FilterContainer>\n      <PageFilterBar condensed>\n        <ProjectPageFilter resetParamsOnChange={['cursor']} />\n        <EnvironmentPageFilter resetParamsOnChange={['cursor']} />\n        <DatePageFilter alignDropdown=\"left\" resetParamsOnChange={['cursor']} />\n      </PageFilterBar>\n      <ReplaySearchBar\n        organization={organization}\n        pageFilters={selection}\n        defaultQuery={decodeScalar(query?.query ?? DEFAULT_QUERY, '')}\n        onSearch={searchQuery => {\n          browserHistory.push({\n            pathname,\n            query: {\n              ...query,\n              cursor: undefined,\n              query: searchQuery.trim(),\n            },\n          });\n        }}\n      />\n    </FilterContainer>\n  );\n}\n\nconst FilterContainer = styled('div')`\n  display: inline-grid;\n  grid-template-columns: minmax(0, max-content) minmax(20rem, 1fr);\n  gap: ${space(2)};\n  width: 100%;\n  margin-bottom: ${space(2)};\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\n\nexport default ReplaysFilters;\n","import styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/replays-empty-state.svg';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\nimport PreferencesStore from 'sentry/stores/preferencesStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\n\ninterface Props {\n  children?: React.ReactNode;\n}\ntype Breakpoints = {\n  large: string;\n  medium: string;\n  small: string;\n  xlarge: string;\n};\n\nexport default function ReplayOnboardingPanel(props: Props) {\n  const preferences = useLegacyStore(PreferencesStore);\n\n  const breakpoints = preferences.collapsed\n    ? {\n        small: '800px',\n        medium: '992px',\n        large: '1210px',\n        xlarge: '1450px',\n      }\n    : {\n        small: '800px',\n        medium: '1175px',\n        large: '1375px',\n        xlarge: '1450px',\n      };\n\n  return (\n    <OnboardingPanel image={<HeroImage src={emptyStateImg} breakpoints={breakpoints} />}>\n      <h3>{t('Get to the root cause faster')}</h3>\n      <p>\n        {t(\n          'See a video-like reproduction of your user sessions so you can see what happened before, during, and after an error or latency issue occurred.'\n        )}\n      </p>\n      <ButtonList gap={1}>{props.children}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst HeroImage = styled('img')<{breakpoints: Breakpoints}>`\n  @media (min-width: ${p => p.breakpoints.small}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.breakpoints.medium}) {\n    transform: translateX(-55%);\n    width: 300px;\n    min-width: 300px;\n  }\n\n  @media (min-width: ${p => p.breakpoints.large}) {\n    transform: translateX(-60%);\n    width: 380px;\n    min-width: 380px;\n  }\n\n  @media (min-width: ${p => p.breakpoints.xlarge}) {\n    transform: translateX(-65%);\n    width: 420px;\n    min-width: 420px;\n  }\n`;\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n","import {Fragment, useMemo} from 'react';\nimport {browserHistory} from 'react-router';\nimport {useTheme} from '@emotion/react';\n\nimport {Button} from 'sentry/components/button';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport Pagination from 'sentry/components/pagination';\nimport {t} from 'sentry/locale';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT, REPLAY_LIST_FIELDS} from 'sentry/utils/replays/fetchReplayList';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useReplayOnboardingSidebarPanel} from 'sentry/utils/replays/hooks/useReplayOnboarding';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplaysFilters from 'sentry/views/replays/filters';\nimport ReplayOnboardingPanel from 'sentry/views/replays/list/replayOnboardingPanel';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\nfunction ReplaysList() {\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const eventView = useMemo(() => {\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    return EventView.fromNewQueryWithLocation(\n      {\n        id: '',\n        name: '',\n        version: 2,\n        fields: REPLAY_LIST_FIELDS,\n        projects: [],\n        query: conditions.formatString(),\n        orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n      },\n      location\n    );\n  }, [location]);\n\n  const {replays, pageLinks, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  const {hasSentOneReplay, activateSidebar} = useReplayOnboardingSidebarPanel();\n\n  return (\n    <Layout.Body>\n      <Layout.Main fullWidth>\n        <ReplaysFilters />\n        {hasSentOneReplay ? (\n          <Fragment>\n            <ReplayTable\n              fetchError={fetchError}\n              isFetching={isFetching}\n              replays={replays}\n              sort={eventView.sorts[0]}\n              visibleColumns={[\n                ReplayColumns.session,\n                ...(hasRoomForColumns\n                  ? [ReplayColumns.projectId, ReplayColumns.startedAt]\n                  : []),\n                ReplayColumns.duration,\n                ReplayColumns.countErrors,\n                ReplayColumns.activity,\n              ]}\n            />\n            <Pagination\n              pageLinks={pageLinks}\n              onCursor={(cursor, path, searchQuery) => {\n                trackAdvancedAnalyticsEvent('replay.list-paginated', {\n                  organization,\n                  direction: cursor?.endsWith(':1') ? 'prev' : 'next',\n                });\n                browserHistory.push({\n                  pathname: path,\n                  query: {...searchQuery, cursor},\n                });\n              }}\n            />\n          </Fragment>\n        ) : (\n          <ReplayOnboardingPanel>\n            <Button onClick={activateSidebar} priority=\"primary\">\n              {t('Set Up Replays')}\n            </Button>\n            <Button\n              href=\"https://docs.sentry.io/platforms/javascript/session-replay/\"\n              external\n            >\n              {t('Read Docs')}\n            </Button>\n          </ReplayOnboardingPanel>\n        )}\n      </Layout.Main>\n    </Layout.Body>\n  );\n}\n\nexport default ReplaysList;\n","import {Fragment} from 'react';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport ReplaysFeatureBadge from 'sentry/components/replays/replaysFeatureBadge';\nimport {t} from 'sentry/locale';\nimport useReplayPageview from 'sentry/utils/replays/hooks/useReplayPageview';\nimport ReplaysList from 'sentry/views/replays/list/replays';\n\nfunction ReplaysListContainer() {\n  useReplayPageview('replay.list-time-spent');\n  return (\n    <Fragment>\n      <Layout.Header>\n        <Layout.HeaderContent>\n          <Layout.Title>\n            {t('Session Replay')} <ReplaysFeatureBadge space={1} />\n          </Layout.Title>\n        </Layout.HeaderContent>\n      </Layout.Header>\n      <PageFiltersContainer>\n        <ReplaysList />\n      </PageFiltersContainer>\n    </Fragment>\n  );\n}\n\nexport default ReplaysListContainer;\n"],"names":["OnboardingPanel","image","children","props","Container","IlloBox","StyledBox","centered","space","p","theme","breakpoints","small","medium","ReplaysFeatureBadge","type","useHaveSelectedProjectsSentAnyReplayEvents","projects","useProjects","selection","usePageFilters","orgSentOneOrMoreReplayEvent","useMemo","selectedProjects","ALL_ACCESS_PROJECTS","length","projectsByProjectId","reduce","acc","project","id","map","filter","Boolean","getSelectedProjectList","some","hasReplays","useReplayOnboardingSidebarPanel","location","useRouteContext","hasSentOneReplay","useEffect","hash","SidebarPanelStore","SidebarPanelKey","activateSidebar","useCallback","event","preventDefault","window","config","useLegacyStore","ConfigStore","useLocation","organization","useOrganization","startTimeRef","useRef","Date","now","startTime","current","trackAdvancedAnalyticsEvent","referrer","decodeScalar","query","user_email","user","email","endTime","seconds","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","prepareQuery","searchQuery","replace","getReplayFieldDefinition","key","getFieldDefinition","REPLAY_TAGS","fieldKeys","REPLAY_FIELDS","Object","fromEntries","name","kind","SearchBar","onGetTagValues","undefined","supportedTags","placeholder","t","maxQueryLength","MAX_QUERY_LENGTH","searchSource","savedSearchType","SavedSearchType","maxMenuHeight","hasRecentSearches","highlightUnsupportedTags","fieldDefinitionGetter","DEFAULT_QUERY","ReplaysFilters","didMount","pathname","browserHistory","cursor","FilterContainer","condensed","resetParamsOnChange","alignDropdown","pageFilters","defaultQuery","onSearch","trim","ReplayOnboardingPanel","PreferencesStore","collapsed","large","xlarge","HeroImage","src","emptyStateImg","ButtonList","gap","ButtonBar","ReplaysList","useTheme","hasRoomForColumns","useMedia","eventView","conditions","MutableSearch","EventView","version","fields","REPLAY_LIST_FIELDS","formatString","orderby","sort","DEFAULT_SORT","replays","pageLinks","isFetching","fetchError","useReplayList","fullWidth","Fragment","sorts","visibleColumns","ReplayColumns","onCursor","path","direction","endsWith","onClick","priority","href","external","ReplaysListContainer","useReplayPageview"],"sourceRoot":""}