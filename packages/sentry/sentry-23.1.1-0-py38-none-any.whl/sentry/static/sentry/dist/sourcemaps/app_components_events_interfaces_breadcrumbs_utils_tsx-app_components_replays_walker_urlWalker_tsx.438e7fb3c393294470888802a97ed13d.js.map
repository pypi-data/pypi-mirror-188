{"version":3,"file":"chunks/app_components_events_interfaces_breadcrumbs_utils_tsx-app_components_replays_walker_urlWalker_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/interfaces/breadcrumbs/breadcrumb/type/icon.tsx","webpack:///./app/components/events/interfaces/breadcrumbs/utils.tsx","webpack:///./app/components/replays/breadcrumbs/utils.tsx","webpack:///./app/components/replays/walker/chevronDividedList.tsx","webpack:///./app/components/replays/walker/splitCrumbs.tsx","webpack:///./app/components/replays/walker/urlWalker.tsx","webpack:///./app/types/breadcrumbs.tsx","webpack:///./app/utils/replays/hooks/useActiveReplayTab.tsx","webpack:///./app/utils/replays/hooks/useCrumbHandlers.tsx","webpack:///./app/utils/useUrlParams.tsx","webpack:///./app/views/replays/detail/breadcrumbs/breadcrumbItem.tsx","webpack:///./app/views/replays/detail/timestampButton.tsx"],"sourcesContent":["import {\n  IconFire,\n  IconFix,\n  IconInfo,\n  IconLocation,\n  IconMobile,\n  IconRefresh,\n  IconSort,\n  IconSpan,\n  IconStack,\n  IconTerminal,\n  IconUser,\n  IconWarning,\n} from 'sentry/icons';\nimport {BreadcrumbType} from 'sentry/types/breadcrumbs';\n\ntype Props = {\n  type: BreadcrumbType;\n};\n\nfunction Icon({type}: Props) {\n  switch (type) {\n    case BreadcrumbType.USER:\n    case BreadcrumbType.UI:\n      return <IconUser size=\"xs\" />;\n    case BreadcrumbType.NAVIGATION:\n      return <IconLocation size=\"xs\" />;\n    case BreadcrumbType.DEBUG:\n      return <IconFix size=\"xs\" />;\n    case BreadcrumbType.INFO:\n      return <IconInfo size=\"xs\" />;\n    case BreadcrumbType.ERROR:\n      return <IconFire size=\"xs\" />;\n    case BreadcrumbType.HTTP:\n      return <IconSort size=\"xs\" rotated />;\n    case BreadcrumbType.WARNING:\n      return <IconWarning size=\"xs\" />;\n    case BreadcrumbType.QUERY:\n      return <IconStack size=\"xs\" />;\n    case BreadcrumbType.SYSTEM:\n      return <IconMobile size=\"xs\" />;\n    case BreadcrumbType.SESSION:\n      return <IconRefresh size=\"xs\" />;\n    case BreadcrumbType.TRANSACTION:\n      return <IconSpan size=\"xs\" />;\n    default:\n      return <IconTerminal size=\"xs\" />;\n  }\n}\n\nexport default Icon;\n","import {t} from 'sentry/locale';\nimport {\n  BreadcrumbLevelType,\n  BreadcrumbType,\n  Crumb,\n  RawCrumb,\n} from 'sentry/types/breadcrumbs';\nimport {EntryType, Event} from 'sentry/types/event';\nimport {defined} from 'sentry/utils';\n\nexport function convertCrumbType(breadcrumb: RawCrumb): RawCrumb {\n  if (breadcrumb.type === BreadcrumbType.EXCEPTION) {\n    return {\n      ...breadcrumb,\n      type: BreadcrumbType.ERROR,\n    };\n  }\n  // special case for 'ui.' and `sentry.` category breadcrumbs\n  // TODO: find a better way to customize UI around non-schema data\n  if (breadcrumb.type === BreadcrumbType.DEFAULT && defined(breadcrumb?.category)) {\n    const [category, subcategory] = breadcrumb.category.split('.');\n    if (category === 'ui') {\n      return {\n        ...breadcrumb,\n        type: BreadcrumbType.UI,\n      };\n    }\n\n    if (category === 'console') {\n      return {\n        ...breadcrumb,\n        type: BreadcrumbType.DEBUG,\n      };\n    }\n\n    if (category === 'navigation') {\n      return {\n        ...breadcrumb,\n        type: BreadcrumbType.NAVIGATION,\n      };\n    }\n\n    if (\n      category === 'sentry' &&\n      (subcategory === 'transaction' || subcategory === 'event')\n    ) {\n      return {\n        ...breadcrumb,\n        type: BreadcrumbType.TRANSACTION,\n      };\n    }\n  }\n\n  if (!Object.values(BreadcrumbType).includes(breadcrumb.type)) {\n    return {\n      ...breadcrumb,\n      type: BreadcrumbType.DEFAULT,\n    };\n  }\n\n  return breadcrumb;\n}\n\nfunction getCrumbDescriptionAndColor(\n  type: BreadcrumbType\n): Pick<Crumb, 'color' | 'description'> {\n  switch (type) {\n    case BreadcrumbType.USER:\n    case BreadcrumbType.UI:\n      return {\n        color: 'purple300',\n        description: t('User Action'),\n      };\n\n    case BreadcrumbType.NAVIGATION:\n      return {\n        color: 'green300',\n        description: t('Navigation'),\n      };\n\n    case BreadcrumbType.DEBUG:\n      return {\n        color: 'purple300',\n        description: t('Debug'),\n      };\n\n    case BreadcrumbType.INFO:\n      return {\n        color: 'blue300',\n        description: t('Info'),\n      };\n\n    case BreadcrumbType.ERROR:\n      return {\n        color: 'red300',\n        description: t('Error'),\n      };\n\n    case BreadcrumbType.HTTP:\n      return {\n        color: 'green300',\n        description: t('HTTP request'),\n      };\n\n    case BreadcrumbType.WARNING:\n      return {\n        color: 'yellow300',\n        description: t('Warning'),\n      };\n    case BreadcrumbType.QUERY:\n      return {\n        color: 'blue300',\n        description: t('Query'),\n      };\n    case BreadcrumbType.SYSTEM:\n      return {\n        color: 'pink300',\n        description: t('System'),\n      };\n    case BreadcrumbType.SESSION:\n      return {\n        color: 'pink300',\n        description: t('Session'),\n      };\n    case BreadcrumbType.TRANSACTION:\n      return {\n        color: 'pink300',\n        description: t('Transaction'),\n      };\n    default:\n      return {\n        color: 'gray300',\n        description: t('Default'),\n      };\n  }\n}\n\nexport function transformCrumbs(breadcrumbs: Array<RawCrumb>): Crumb[] {\n  return breadcrumbs.map((breadcrumb, index) => {\n    const convertedCrumbType = convertCrumbType(breadcrumb);\n    const {color, description} = getCrumbDescriptionAndColor(convertedCrumbType.type);\n    return {\n      ...convertedCrumbType,\n      id: index,\n      color,\n      description,\n      level: convertedCrumbType.level ?? BreadcrumbLevelType.UNDEFINED,\n    };\n  });\n}\n\nfunction moduleToCategory(module: string | null | undefined) {\n  if (!module) {\n    return undefined;\n  }\n  const match = module.match(/^.*\\/(.*?)(:\\d+)/);\n  if (!match) {\n    return module.split(/./)[0];\n  }\n  return match[1];\n}\n\nexport function getVirtualCrumb(event: Event): RawCrumb | undefined {\n  const exception = event.entries.find(entry => entry.type === EntryType.EXCEPTION);\n\n  if (!exception && !event.message) {\n    return undefined;\n  }\n\n  const timestamp = event.dateCreated;\n\n  if (exception) {\n    const {type, value, module: mdl} = exception.data.values[0];\n    return {\n      type: BreadcrumbType.ERROR,\n      level: BreadcrumbLevelType.ERROR,\n      category: moduleToCategory(mdl) || 'exception',\n      data: {\n        type,\n        value,\n      },\n      timestamp,\n    };\n  }\n\n  const levelTag = (event.tags || []).find(tag => tag.key === 'level');\n\n  return {\n    type: BreadcrumbType.INFO,\n    level: (levelTag?.value as BreadcrumbLevelType) || BreadcrumbLevelType.UNDEFINED,\n    category: 'message',\n    message: event.message,\n    timestamp,\n  };\n}\n","import {BreadcrumbType, Crumb} from 'sentry/types/breadcrumbs';\n\n/**\n * Generate breadcrumb descriptions based on type\n */\nexport function getDescription(crumb: Crumb, startTimestampMs?: number) {\n  if (crumb.data && 'action' in crumb.data) {\n    switch (crumb.data.action) {\n      case 'largest-contentful-paint':\n        if (crumb.timestamp && startTimestampMs) {\n          return `${new Date(crumb.timestamp).getTime() - startTimestampMs}ms`;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  switch (crumb.type) {\n    case BreadcrumbType.NAVIGATION:\n      return `${crumb.data?.to ?? ''}`;\n    case BreadcrumbType.DEFAULT:\n      return JSON.stringify(crumb.data);\n    default:\n      return crumb.message || '';\n  }\n}\n\n/**\n * Get title of breadcrumb\n */\nexport function getTitle(crumb: Crumb) {\n  // Supports replay specific breadcrumbs\n  if (crumb.data && 'label' in crumb.data && crumb.data.label) {\n    return crumb.data.label;\n  }\n\n  const [type, action] = crumb.category?.split('.') || [];\n  if (type === 'ui') {\n    return `User ${action || ''}`;\n  }\n  return `${type} ${action || ''}`;\n}\n\n/**\n * Generate breadcrumb title + descriptions\n */\nexport function getDetails(crumb: Crumb, startTimestampMs?: number) {\n  return {title: getTitle(crumb), description: getDescription(crumb, startTimestampMs)};\n}\n","import {ReactElement} from 'react';\nimport styled from '@emotion/styled';\n\nimport {IconChevron} from 'sentry/icons';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  items: ReactElement[];\n};\n\nfunction ChevronDividedList({items}: Props) {\n  return (\n    <List cols={items.length}>\n      {items.flatMap((item, i) => {\n        const li = <Item key={`${i}-item`}>{item}</Item>;\n\n        return i === 0\n          ? li\n          : [\n              <Item key={`${i}-chev`} role=\"separator\">\n                <Chevron>\n                  <IconChevron color=\"gray300\" size=\"xs\" direction=\"right\" />\n                </Chevron>\n              </Item>,\n              li,\n            ];\n      })}\n    </List>\n  );\n}\n\nconst List = styled('ul')<{cols: number}>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  display: grid;\n  gap: ${space(1)};\n  grid-template-columns: ${p =>\n    p.cols <= 3\n      ? `minmax(auto, max-content) max-content minmax(auto, max-content) max-content minmax(auto, max-content)`\n      : `minmax(auto, max-content) repeat(3, max-content) minmax(auto, max-content)`};\n  flex-wrap: nowrap;\n  align-items: center;\n  overflow: hidden;\n`;\n\nconst Item = styled('li')`\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst Chevron = styled('span')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 1;\n`;\n\nexport default ChevronDividedList;\n","import styled from '@emotion/styled';\nimport first from 'lodash/first';\nimport last from 'lodash/last';\n\nimport {Hovercard} from 'sentry/components/hovercard';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {BreadcrumbTypeNavigation, Crumb} from 'sentry/types/breadcrumbs';\nimport useCrumbHandlers from 'sentry/utils/replays/hooks/useCrumbHandlers';\nimport BreadcrumbItem from 'sentry/views/replays/detail/breadcrumbs/breadcrumbItem';\n\ntype MaybeOnClickHandler = null | ((crumb: Crumb) => void);\n\nfunction splitCrumbs({\n  crumbs,\n  onClick,\n  startTimestampMs,\n}: {\n  crumbs: BreadcrumbTypeNavigation[];\n  onClick: MaybeOnClickHandler;\n  startTimestampMs: number;\n}) {\n  const firstUrl = first(crumbs)?.data?.to?.split('?')?.[0];\n  const summarizedCrumbs = crumbs.slice(1, -1) as Crumb[];\n  const lastUrl = last(crumbs)?.data?.to?.split('?')?.[0];\n\n  if (crumbs.length === 0) {\n    // This one shouldn't overflow, but by including the component css stays\n    // consistent with the other Segment types\n    return [\n      <Span key=\"summary\">\n        <TextOverflow>{tn('%s Page', '%s Pages', 0)}</TextOverflow>\n      </Span>,\n    ];\n  }\n\n  if (crumbs.length > 3) {\n    return [\n      <SingleLinkSegment\n        key=\"first\"\n        path={firstUrl}\n        onClick={onClick ? () => onClick(first(crumbs) as Crumb) : null}\n      />,\n      <SummarySegment\n        key=\"summary\"\n        crumbs={summarizedCrumbs}\n        startTimestampMs={startTimestampMs}\n        handleOnClick={onClick}\n      />,\n      <SingleLinkSegment\n        key=\"last\"\n        path={lastUrl}\n        onClick={onClick ? () => onClick(last(crumbs) as Crumb) : null}\n      />,\n    ];\n  }\n\n  return crumbs.map((crumb, i) => (\n    <SingleLinkSegment\n      key={i}\n      path={crumb.data?.to?.split('?')?.[0]}\n      onClick={onClick ? () => onClick(crumb as Crumb) : null}\n    />\n  ));\n}\n\nfunction SingleLinkSegment({\n  onClick,\n  path,\n}: {\n  onClick: null | (() => void);\n  path: undefined | string;\n}) {\n  if (!path) {\n    return null;\n  }\n  const content = (\n    <Tooltip title={path}>\n      <TextOverflow ellipsisDirection=\"left\">{path}</TextOverflow>\n    </Tooltip>\n  );\n  if (onClick) {\n    // TODO(replays): Add a href that deeplinks to `crumb.timestamp`\n    return <Link onClick={onClick}>{content}</Link>;\n  }\n  return <Span>{content}</Span>;\n}\n\nfunction SummarySegment({\n  crumbs,\n  handleOnClick,\n  startTimestampMs,\n}: {\n  crumbs: Crumb[];\n  handleOnClick: MaybeOnClickHandler;\n  startTimestampMs: number;\n}) {\n  const {handleMouseEnter, handleMouseLeave} = useCrumbHandlers(startTimestampMs);\n\n  const summaryItems = (\n    <ScrollingList>\n      {crumbs.map((crumb, i) => (\n        <li key={crumb.id || i}>\n          <BreadcrumbItem\n            crumb={crumb}\n            startTimestampMs={startTimestampMs}\n            isHovered={false}\n            isSelected={false}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleOnClick}\n          />\n        </li>\n      ))}\n    </ScrollingList>\n  );\n\n  return (\n    <Span>\n      <HalfPaddingHovercard body={summaryItems} position=\"right\">\n        <TextOverflow>{tn('%s Page', '%s Pages', crumbs.length)}</TextOverflow>\n      </HalfPaddingHovercard>\n    </Span>\n  );\n}\n\nconst ScrollingList = styled('ul')`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  max-height: calc(100vh - 32px);\n  overflow: scroll;\n`;\n\nconst Span = styled('span')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 0;\n  max-width: 240px;\n`;\n\nconst Link = styled('a')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 0;\n  text-decoration: underline;\n`;\n\nconst HalfPaddingHovercard = styled(\n  ({children, bodyClassName, ...props}: React.ComponentProps<typeof Hovercard>) => (\n    <Hovercard bodyClassName={bodyClassName || '' + ' half-padding'} {...props}>\n      {children}\n    </Hovercard>\n  )\n)`\n  .half-padding {\n    padding: ${space(0.5)};\n  }\n`;\n\nexport default splitCrumbs;\n","import {memo} from 'react';\n\nimport ChevronDividedList from 'sentry/components/replays/walker/chevronDividedList';\nimport splitCrumbs from 'sentry/components/replays/walker/splitCrumbs';\nimport {\n  BreadcrumbLevelType,\n  BreadcrumbType,\n  BreadcrumbTypeNavigation,\n  Crumb,\n} from 'sentry/types/breadcrumbs';\nimport useCrumbHandlers from 'sentry/utils/replays/hooks/useCrumbHandlers';\nimport type {ReplayRecord} from 'sentry/views/replays/types';\n\ntype CrumbProps = {\n  crumbs: Crumb[];\n  replayRecord: ReplayRecord;\n};\n\ntype StringProps = {\n  urls: string[];\n};\n\nexport const CrumbWalker = memo(function CrumbWalker({crumbs, replayRecord}: CrumbProps) {\n  const startTimestampMs = replayRecord.started_at.getTime();\n  const {handleClick} = useCrumbHandlers(startTimestampMs);\n\n  const navCrumbs = crumbs.filter(\n    crumb => crumb.type === BreadcrumbType.NAVIGATION\n  ) as BreadcrumbTypeNavigation[];\n\n  return (\n    <ChevronDividedList\n      items={splitCrumbs({\n        crumbs: navCrumbs,\n        startTimestampMs,\n        onClick: handleClick,\n      })}\n    />\n  );\n});\n\nexport const StringWalker = memo(function StringWalker({urls}: StringProps) {\n  return (\n    <ChevronDividedList\n      items={splitCrumbs({\n        crumbs: urls.map(urlToCrumb),\n        startTimestampMs: 0,\n        onClick: null,\n      })}\n    />\n  );\n});\n\nfunction urlToCrumb(url: string) {\n  return {\n    type: BreadcrumbType.NAVIGATION,\n    category: BreadcrumbType.NAVIGATION,\n    level: BreadcrumbLevelType.INFO,\n    description: 'Navigation',\n\n    id: 0,\n    color: 'green300',\n    timestamp: undefined,\n    data: {to: url},\n  } as BreadcrumbTypeNavigation;\n}\n","import type {Color} from 'sentry/utils/theme';\n\nexport enum BreadcrumbLevelType {\n  FATAL = 'fatal',\n  ERROR = 'error',\n  WARNING = 'warning',\n  INFO = 'info',\n  DEBUG = 'debug',\n  UNDEFINED = 'undefined',\n  LOG = 'log',\n}\n\nexport enum BreadcrumbType {\n  INFO = 'info',\n  DEBUG = 'debug',\n  MESSAGE = 'message',\n  QUERY = 'query',\n  UI = 'ui',\n  USER = 'user',\n  EXCEPTION = 'exception',\n  WARNING = 'warning',\n  ERROR = 'error',\n  DEFAULT = 'default',\n  HTTP = 'http',\n  NAVIGATION = 'navigation',\n  SYSTEM = 'system',\n  SESSION = 'session',\n  TRANSACTION = 'transaction',\n  INIT = 'init',\n}\n\ninterface BreadcrumbTypeBase {\n  level: BreadcrumbLevelType;\n  // it's recommended\n  category?: string | null;\n  event_id?: string | null;\n  message?: string;\n  timestamp?: string;\n}\n\nexport interface BreadcrumbTypeSystem extends BreadcrumbTypeBase {\n  action: string;\n  extras: Record<string, any>;\n  type: BreadcrumbType.SYSTEM;\n}\n\nexport interface BreadcrumbTypeSession extends BreadcrumbTypeBase {\n  action: string;\n  extras: Record<string, any>;\n  type: BreadcrumbType.SESSION;\n}\n\nexport interface BreadcrumbTypeNavigation extends BreadcrumbTypeBase {\n  type: BreadcrumbType.NAVIGATION;\n  data?: null | {\n    from?: string;\n    to?: string;\n  };\n}\n\nexport interface BreadcrumbTypeHTTP extends BreadcrumbTypeBase {\n  type: BreadcrumbType.HTTP;\n  data?: null | {\n    method?:\n      | 'POST'\n      | 'PUT'\n      | 'GET'\n      | 'HEAD'\n      | 'DELETE'\n      | 'CONNECT'\n      | 'OPTIONS'\n      | 'TRACE'\n      | 'PATCH';\n    reason?: string;\n    status_code?: number;\n    url?: string;\n  };\n}\n\nexport interface BreadcrumbTypeDefault extends BreadcrumbTypeBase {\n  type:\n    | BreadcrumbType.INFO\n    | BreadcrumbType.DEBUG\n    | BreadcrumbType.QUERY\n    | BreadcrumbType.UI\n    | BreadcrumbType.USER\n    | BreadcrumbType.EXCEPTION\n    | BreadcrumbType.WARNING\n    | BreadcrumbType.ERROR\n    | BreadcrumbType.DEFAULT\n    | BreadcrumbType.INIT\n    | BreadcrumbType.SESSION\n    | BreadcrumbType.SYSTEM\n    | BreadcrumbType.TRANSACTION;\n  data?: Record<string, any> | null;\n}\n\nexport type RawCrumb =\n  | BreadcrumbTypeNavigation\n  | BreadcrumbTypeHTTP\n  | BreadcrumbTypeDefault;\n\ninterface BaseCrumb {\n  color: Color;\n  description: string;\n  id: number;\n}\n\ninterface NavigationCrumb extends BaseCrumb, BreadcrumbTypeNavigation {}\ninterface HTTPCrumb extends BaseCrumb, BreadcrumbTypeHTTP {}\ninterface DefaultCrumb extends BaseCrumb, BreadcrumbTypeDefault {}\n\nexport type Crumb = NavigationCrumb | HTTPCrumb | DefaultCrumb;\n\nexport function isBreadcrumbLogLevel(logLevel: string): logLevel is BreadcrumbLevelType {\n  return Object.values(BreadcrumbLevelType).includes(logLevel as any);\n}\n\nexport function isBreadcrumbTypeDefault(\n  breadcrumb: Crumb\n): breadcrumb is Extract<Crumb, BreadcrumbTypeDefault> {\n  return ![BreadcrumbType.HTTP, BreadcrumbType.NAVIGATION].includes(breadcrumb.type);\n}\n","import {useCallback} from 'react';\n\nimport useUrlParams from 'sentry/utils/useUrlParams';\n\nexport enum TabKey {\n  console = 'console',\n  dom = 'dom',\n  network = 'network',\n  trace = 'trace',\n  issues = 'issues',\n  memory = 'memory',\n}\n\nfunction isReplayTab(tab: string): tab is TabKey {\n  return tab in TabKey;\n}\n\nconst DEFAULT_TAB = TabKey.console;\n\nfunction useActiveReplayTab() {\n  const {getParamValue, setParamValue} = useUrlParams('t_main', DEFAULT_TAB);\n\n  const paramValue = getParamValue();\n\n  return {\n    getActiveTab: useCallback(\n      () => (isReplayTab(paramValue || '') ? (paramValue as TabKey) : DEFAULT_TAB),\n      [paramValue]\n    ),\n    setActiveTab: useCallback(\n      (value: string) =>\n        isReplayTab(value) ? setParamValue(value) : setParamValue(DEFAULT_TAB),\n      [setParamValue]\n    ),\n  };\n}\n\nexport default useActiveReplayTab;\n","import {useCallback} from 'react';\n\nimport {useReplayContext} from 'sentry/components/replays/replayContext';\nimport {relativeTimeInMs} from 'sentry/components/replays/utils';\nimport {BreadcrumbType, Crumb} from 'sentry/types/breadcrumbs';\nimport useActiveReplayTab from 'sentry/utils/replays/hooks/useActiveReplayTab';\nimport type {NetworkSpan} from 'sentry/views/replays/types';\n\nfunction useCrumbHandlers(startTimestampMs: number = 0) {\n  const {\n    clearAllHighlights,\n    highlight,\n    removeHighlight,\n    setCurrentHoverTime,\n    setCurrentTime,\n  } = useReplayContext();\n  const {setActiveTab} = useActiveReplayTab();\n\n  const handleMouseEnter = useCallback(\n    (item: Crumb | NetworkSpan) => {\n      if (startTimestampMs) {\n        setCurrentHoverTime(relativeTimeInMs(item.timestamp ?? '', startTimestampMs));\n      }\n\n      if (item.data && 'nodeId' in item.data) {\n        // XXX: Kind of hacky, but mouseLeave does not fire if you move from a\n        // crumb to a tooltip\n        clearAllHighlights();\n        highlight({nodeId: item.data.nodeId, annotation: item.data.label});\n      }\n    },\n    [setCurrentHoverTime, startTimestampMs, highlight, clearAllHighlights]\n  );\n\n  const handleMouseLeave = useCallback(\n    (item: Crumb | NetworkSpan) => {\n      setCurrentHoverTime(undefined);\n\n      if (item.data && 'nodeId' in item.data) {\n        removeHighlight({nodeId: item.data.nodeId});\n      }\n    },\n    [setCurrentHoverTime, removeHighlight]\n  );\n\n  const handleClick = useCallback(\n    (crumb: Crumb | NetworkSpan) => {\n      if (crumb.timestamp !== undefined) {\n        setCurrentTime(relativeTimeInMs(crumb.timestamp, startTimestampMs));\n      }\n\n      if ('type' in crumb) {\n        switch (crumb.type) {\n          case BreadcrumbType.NAVIGATION:\n            setActiveTab('network');\n            break;\n          case BreadcrumbType.UI:\n            setActiveTab('dom');\n            break;\n          default:\n            setActiveTab('console');\n            break;\n        }\n      }\n    },\n    [setCurrentTime, startTimestampMs, setActiveTab]\n  );\n\n  return {\n    handleMouseEnter,\n    handleMouseLeave,\n    handleClick,\n  };\n}\n\nexport default useCrumbHandlers;\n","import {useCallback} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\nfunction useUrlParams(\n  defaultKey: string,\n  defaultValue: string\n): {\n  getParamValue: () => string;\n  setParamValue: (value: string) => void;\n};\nfunction useUrlParams(defaultKey: string): {\n  getParamValue: () => string;\n  setParamValue: (value: string) => void;\n};\nfunction useUrlParams(): {\n  getParamValue: (key: string) => string;\n  setParamValue: (key: string, value: string) => void;\n};\nfunction useUrlParams(defaultKey?: string, defaultValue?: string) {\n  const location = useLocation();\n\n  const getParamValue = useCallback(\n    (key: string) => {\n      return location.query[key] || defaultValue;\n    },\n    [location, defaultValue]\n  );\n\n  const setParamValue = useCallback(\n    (key: string, value: string) => {\n      browserHistory.push({\n        ...location,\n        query: {\n          ...location.query,\n          [key]: value,\n        },\n      });\n    },\n    [location]\n  );\n\n  const getWithDefault = useCallback(\n    () => getParamValue(defaultKey || ''),\n    [getParamValue, defaultKey]\n  );\n  const setWithDefault = useCallback(\n    (value: string) => setParamValue(defaultKey || '', value),\n    [setParamValue, defaultKey]\n  );\n\n  if (defaultKey !== undefined) {\n    return {\n      getParamValue: getWithDefault,\n      setParamValue: setWithDefault,\n    };\n  }\n\n  return {\n    getParamValue,\n    setParamValue,\n  };\n}\n\nexport default useUrlParams;\n","import {memo, useCallback} from 'react';\nimport styled from '@emotion/styled';\n\nimport BreadcrumbIcon from 'sentry/components/events/interfaces/breadcrumbs/breadcrumb/type/icon';\nimport {PanelItem} from 'sentry/components/panels';\nimport {getDetails} from 'sentry/components/replays/breadcrumbs/utils';\nimport {SVGIconProps} from 'sentry/icons/svgIcon';\nimport space from 'sentry/styles/space';\nimport type {Crumb} from 'sentry/types/breadcrumbs';\nimport TimestampButton from 'sentry/views/replays/detail/timestampButton';\n\ntype MouseCallback = (crumb: Crumb, e: React.MouseEvent<HTMLElement>) => void;\n\ninterface Props {\n  crumb: Crumb;\n  isHovered: boolean;\n  isSelected: boolean;\n  onClick: null | MouseCallback;\n  startTimestampMs: number;\n  allowHover?: boolean;\n  onMouseEnter?: MouseCallback;\n  onMouseLeave?: MouseCallback;\n}\n\nfunction BreadcrumbItem({\n  crumb,\n  isHovered,\n  isSelected,\n  startTimestampMs,\n  allowHover = true,\n  onMouseEnter,\n  onMouseLeave,\n  onClick,\n}: Props) {\n  const {title, description} = getDetails(crumb, startTimestampMs);\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLElement>) => onMouseEnter && onMouseEnter(crumb, e),\n    [onMouseEnter, crumb]\n  );\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLElement>) => onMouseLeave && onMouseLeave(crumb, e),\n    [onMouseLeave, crumb]\n  );\n  const handleClick = useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      onClick?.(crumb, e);\n    },\n    [crumb, onClick]\n  );\n\n  return (\n    <CrumbItem\n      as={onClick ? 'button' : 'span'}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleClick}\n      isHovered={isHovered}\n      isSelected={isSelected}\n      aria-current={isSelected}\n      allowHover={allowHover}\n    >\n      <IconWrapper color={crumb.color}>\n        <BreadcrumbIcon type={crumb.type} />\n      </IconWrapper>\n      <CrumbDetails>\n        <TitleContainer>\n          <Title>{title}</Title>\n          {onClick ? (\n            <TimestampButton\n              startTimestampMs={startTimestampMs}\n              timestampMs={crumb.timestamp || ''}\n            />\n          ) : null}\n        </TitleContainer>\n\n        <Description title={description}>{description}</Description>\n      </CrumbDetails>\n    </CrumbItem>\n  );\n}\n\nconst CrumbDetails = styled('div')`\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst TitleContainer = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  gap: ${space(1)};\n`;\n\nconst Title = styled('span')`\n  ${p => p.theme.overflowEllipsis};\n  text-transform: capitalize;\n  font-weight: 600;\n  color: ${p => p.theme.gray400};\n  line-height: ${p => p.theme.text.lineHeightBody};\n`;\n\nconst Description = styled('span')`\n  ${p => p.theme.overflowEllipsis};\n  font-size: 0.7rem;\n  font-variant-numeric: tabular-nums;\n  line-height: ${p => p.theme.text.lineHeightBody};\n  color: ${p => p.theme.subText};\n`;\n\ntype CrumbItemProps = {\n  isHovered: boolean;\n  isSelected: boolean;\n  allowHover?: boolean;\n};\n\nconst CrumbItem = styled(PanelItem)<CrumbItemProps>`\n  display: grid;\n  grid-template-columns: max-content auto;\n  align-items: flex-start;\n  gap: ${space(1)};\n  width: 100%;\n\n  font-size: ${p => p.theme.fontSizeMedium};\n  background: transparent;\n  padding: ${space(1)};\n  text-align: left;\n  border: none;\n  position: relative;\n  ${p => p.isSelected && `background-color: ${p.theme.purple100};`}\n  ${p => p.isHovered && `background-color: ${p.theme.surface100};`}\n  border-radius: ${p => p.theme.borderRadius};\n\n  ${p =>\n    p.allowHover &&\n    ` &:hover {\n    background-color: ${p.theme.surface100};\n  }`}\n\n  /* Draw a vertical line behind the breadcrumb icon. The line connects each row together, but is truncated for the first and last items */\n  &::after {\n    content: '';\n    position: absolute;\n    left: 19.5px;\n    width: 1px;\n    background: ${p => p.theme.gray200};\n    height: 100%;\n  }\n\n  &:first-of-type::after {\n    top: ${space(1)};\n    bottom: 0;\n  }\n\n  &:last-of-type::after {\n    top: 0;\n    height: ${space(1)};\n  }\n\n  &:only-of-type::after {\n    height: 0;\n  }\n`;\n\n/**\n * Taken `from events/interfaces/.../breadcrumbs/types`\n */\nconst IconWrapper = styled('div')<Required<Pick<SVGIconProps, 'color'>>>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  color: ${p => p.theme.white};\n  background: ${p => p.theme[p.color] ?? p.color};\n  box-shadow: ${p => p.theme.dropShadowLight};\n  position: relative;\n  z-index: ${p => p.theme.zIndex.initial};\n`;\n\nconst MemoizedBreadcrumbItem = memo(BreadcrumbItem);\n\nexport default MemoizedBreadcrumbItem;\n","import styled from '@emotion/styled';\n\nimport DateTime from 'sentry/components/dateTime';\nimport {showPlayerTime} from 'sentry/components/replays/utils';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconPlay} from 'sentry/icons';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  startTimestampMs: number;\n  timestampMs: string | number | Date;\n  className?: string;\n  format?: 'mm:ss' | 'mm:ss.SSS';\n  onClick?: () => void;\n};\n\nfunction TimestampButton({\n  className,\n  format = 'mm:ss',\n  onClick,\n  startTimestampMs,\n  timestampMs,\n}: Props) {\n  return (\n    <Tooltip title={<DateTime date={timestampMs} />}>\n      <StyledButton\n        as={onClick ? 'button' : 'span'}\n        onClick={onClick}\n        className={className}\n      >\n        <IconPlay size=\"xs\" />\n        {showPlayerTime(timestampMs, startTimestampMs, format === 'mm:ss.SSS')}\n      </StyledButton>\n    </Tooltip>\n  );\n}\n\nconst StyledButton = styled('button')`\n  background: transparent;\n  border: none;\n  color: 'inherit';\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-variant-numeric: tabular-nums;\n\n  display: flex;\n  align-items: center;\n  gap: ${space(0.25)};\n  padding: 0;\n\n  & > svg {\n    visibility: hidden;\n  }\n  &:hover svg {\n    visibility: visible;\n  }\n`;\n\nexport default TimestampButton;\n"],"names":["type","BreadcrumbType","size","rotated","transformCrumbs","breadcrumbs","map","breadcrumb","index","convertedCrumbType","defined","category","subcategory","split","Object","values","includes","convertCrumbType","color","description","t","getCrumbDescriptionAndColor","id","level","BreadcrumbLevelType","moduleToCategory","module","match","getVirtualCrumb","event","exception","entries","find","entry","EntryType","message","timestamp","dateCreated","value","mdl","data","levelTag","tags","tag","key","getDescription","crumb","startTimestampMs","action","Date","getTime","to","JSON","stringify","getTitle","label","getDetails","title","ChevronDividedList","items","List","cols","length","flatMap","item","i","li","Item","role","Chevron","direction","space","p","theme","gray300","fontSizeSmall","SingleLinkSegment","onClick","path","content","ellipsisDirection","Link","Span","SummarySegment","crumbs","handleOnClick","handleMouseEnter","handleMouseLeave","useCrumbHandlers","summaryItems","ScrollingList","isHovered","isSelected","onMouseEnter","onMouseLeave","HalfPaddingHovercard","body","position","tn","subText","children","bodyClassName","props","firstUrl","first","summarizedCrumbs","slice","lastUrl","last","CrumbWalker","memo","replayRecord","started_at","handleClick","navCrumbs","filter","splitCrumbs","StringWalker","urls","urlToCrumb","url","undefined","isBreadcrumbLogLevel","logLevel","isBreadcrumbTypeDefault","HTTP","NAVIGATION","TabKey","isReplayTab","tab","DEFAULT_TAB","console","getParamValue","setParamValue","useUrlParams","paramValue","getActiveTab","useCallback","setActiveTab","clearAllHighlights","highlight","removeHighlight","setCurrentHoverTime","setCurrentTime","useReplayContext","useActiveReplayTab","relativeTimeInMs","nodeId","annotation","defaultKey","defaultValue","location","useLocation","query","browserHistory","getWithDefault","setWithDefault","BreadcrumbItem","allowHover","e","CrumbItem","as","IconWrapper","CrumbDetails","TitleContainer","Title","timestampMs","Description","overflowEllipsis","gray400","text","lineHeightBody","PanelItem","fontSizeMedium","purple100","surface100","borderRadius","gray200","white","dropShadowLight","zIndex","initial","TimestampButton","className","format","date","StyledButton","showPlayerTime"],"sourceRoot":""}