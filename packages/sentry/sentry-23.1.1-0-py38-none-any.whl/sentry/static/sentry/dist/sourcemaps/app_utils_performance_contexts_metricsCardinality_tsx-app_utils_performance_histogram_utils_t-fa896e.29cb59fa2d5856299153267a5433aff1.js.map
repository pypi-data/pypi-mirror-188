{"version":3,"file":"chunks/app_utils_performance_contexts_metricsCardinality_tsx-app_utils_performance_histogram_utils_t-fa896e.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuery.tsx","webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums.tsx","webpack:///./app/utils/performance/contexts/metricsCardinality.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdModal.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx"],"sourcesContent":["import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nexport interface MetricsCompatibilityData {\n  compatible_projects?: number[];\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilityData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilityQuery({children, ...props}: QueryProps) {\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilityData, {}>\n      route=\"metrics-compatibility-sums\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nexport interface MetricsCompatibilitySumData {\n  sum: {\n    metrics?: number;\n    metrics_null?: number;\n    metrics_unparam?: number;\n  };\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilitySumData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilitySumsQuery({children, ...props}: QueryProps) {\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilitySumData, {}>\n      route=\"metrics-compatibility\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import {ComponentProps, Fragment, ReactNode, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {parsePeriodToHours} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {canUseMetricsData} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport MetricsCompatibilityQuery, {\n  MetricsCompatibilityData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuery';\nimport MetricsCompatibilitySumsQuery, {\n  MetricsCompatibilitySumData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums';\n\nimport {createDefinedContext} from './utils';\n\nconst UNPARAM_THRESHOLD = 0.01;\nconst NULL_THRESHOLD = 0.01;\n\nexport interface MetricDataSwitcherOutcome {\n  forceTransactionsOnly: boolean;\n  compatibleProjects?: number[];\n  shouldNotifyUnnamedTransactions?: boolean;\n  shouldWarnIncompatibleSDK?: boolean;\n}\nexport interface MetricsCardinalityContext {\n  isLoading: boolean;\n  outcome?: MetricDataSwitcherOutcome;\n}\n\ntype MergedMetricsData = MetricsCompatibilityData & MetricsCompatibilitySumData;\n\nconst [_Provider, _useContext, _Context] =\n  createDefinedContext<MetricsCardinalityContext>({\n    name: 'MetricsCardinalityContext',\n    strict: false,\n  });\n\n/**\n * This provider determines whether the metrics data is storing performance information correctly before we\n * make dozens of requests on pages such as performance landing and dashboards.\n */\nexport const MetricsCardinalityProvider = (props: {\n  children: ReactNode;\n  location: Location;\n  organization: Organization;\n  sendOutcomeAnalytics?: boolean;\n}) => {\n  const isUsingMetrics = canUseMetricsData(props.organization);\n\n  if (!isUsingMetrics) {\n    return (\n      <_Provider\n        value={{\n          isLoading: false,\n          outcome: {\n            forceTransactionsOnly: true,\n          },\n        }}\n      >\n        {props.children}\n      </_Provider>\n    );\n  }\n\n  const baseDiscoverProps = {\n    location: props.location,\n    orgSlug: props.organization.slug,\n    cursor: '0:0:0',\n  };\n  const eventView = EventView.fromLocation(props.location);\n  eventView.fields = [{field: 'tpm()'}];\n  const _eventView = adjustEventViewTime(eventView);\n\n  return (\n    <Fragment>\n      <MetricsCompatibilityQuery eventView={_eventView} {...baseDiscoverProps}>\n        {compatabilityResult => (\n          <MetricsCompatibilitySumsQuery eventView={_eventView} {...baseDiscoverProps}>\n            {sumsResult => {\n              const isLoading = compatabilityResult.isLoading || sumsResult.isLoading;\n              const outcome =\n                compatabilityResult.isLoading || sumsResult.isLoading\n                  ? undefined\n                  : getMetricsOutcome(\n                      compatabilityResult.tableData && sumsResult.tableData\n                        ? {\n                            ...compatabilityResult.tableData,\n                            ...sumsResult.tableData,\n                          }\n                        : null,\n                      !!compatabilityResult.error && !!sumsResult.error,\n                      props.organization\n                    );\n\n              return (\n                <Provider\n                  sendOutcomeAnalytics={props.sendOutcomeAnalytics}\n                  organization={props.organization}\n                  value={{\n                    isLoading,\n                    outcome,\n                  }}\n                >\n                  {props.children}\n                </Provider>\n              );\n            }}\n          </MetricsCompatibilitySumsQuery>\n        )}\n      </MetricsCompatibilityQuery>\n    </Fragment>\n  );\n};\n\nconst Provider = (\n  props: ComponentProps<typeof _Provider> & {\n    organization: Organization;\n    sendOutcomeAnalytics?: boolean;\n  }\n) => {\n  const fallbackFromNull = props.value.outcome?.shouldWarnIncompatibleSDK ?? false;\n  const fallbackFromUnparam =\n    props.value.outcome?.shouldNotifyUnnamedTransactions ?? false;\n  const isOnMetrics = !props.value.outcome?.forceTransactionsOnly;\n  useEffect(() => {\n    if (!props.value.isLoading && props.sendOutcomeAnalytics) {\n      trackAdvancedAnalyticsEvent('performance_views.mep.metrics_outcome', {\n        organization: props.organization,\n        is_on_metrics: isOnMetrics,\n        fallback_from_null: fallbackFromNull,\n        fallback_from_unparam: fallbackFromUnparam,\n      });\n    }\n  }, [\n    props.organization,\n    props.value.isLoading,\n    isOnMetrics,\n    fallbackFromUnparam,\n    fallbackFromNull,\n    props.sendOutcomeAnalytics,\n  ]);\n  return <_Provider {...props}>{props.children}</_Provider>;\n};\n\nexport const MetricsCardinalityConsumer = _Context.Consumer;\n\nexport const useMetricsCardinalityContext = _useContext;\n\n/**\n * Logic for picking sides of metrics vs. transactions along with the associated warnings.\n */\nfunction getMetricsOutcome(\n  dataCounts: MergedMetricsData | null,\n  hasOtherFallbackCondition: boolean,\n  organization: Organization\n) {\n  const fallbackOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: true,\n  };\n  const successOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: false,\n  };\n  const isOnFallbackThresolds = organization.features.includes(\n    'performance-mep-bannerless-ui'\n  );\n\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n  const compatibleProjects = dataCounts.compatible_projects;\n\n  if (hasOtherFallbackCondition) {\n    return fallbackOutcome;\n  }\n\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n\n  if (checkNoDataFallback(dataCounts)) {\n    return fallbackOutcome;\n  }\n\n  if (checkIncompatibleData(dataCounts, isOnFallbackThresolds)) {\n    return {\n      shouldWarnIncompatibleSDK: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfAllOtherData(dataCounts)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfPartialOtherData(dataCounts, isOnFallbackThresolds)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      compatibleProjects,\n      forceTransactionsOnly: false,\n    };\n  }\n\n  return successOutcome;\n}\n\n/**\n * Fallback if no metrics found.\n */\nfunction checkNoDataFallback(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return !counts.metricsCount;\n}\n\n/**\n * Fallback and warn if incompatible data found (old specific SDKs).\n */\nfunction checkIncompatibleData(\n  dataCounts: MergedMetricsData,\n  isOnFallbackThresolds: boolean\n) {\n  const counts = normalizeCounts(dataCounts);\n  if (isOnFallbackThresolds) {\n    const ratio = counts.nullCount / counts.metricsCount;\n    return ratio > NULL_THRESHOLD;\n  }\n  return counts.nullCount > 0;\n}\n\n/**\n * Fallback and warn about unnamed transactions (specific SDKs).\n */\nfunction checkIfAllOtherData(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return counts.unparamCount >= counts.metricsCount;\n}\n\n/**\n * Show metrics but warn about unnamed transactions.\n */\nfunction checkIfPartialOtherData(\n  dataCounts: MergedMetricsData,\n  isOnFallbackThresolds: boolean\n) {\n  const counts = normalizeCounts(dataCounts);\n  if (isOnFallbackThresolds) {\n    const ratio = counts.unparamCount / counts.metricsCount;\n    return ratio > UNPARAM_THRESHOLD;\n  }\n  return counts.unparamCount > 0;\n}\n\n/**\n * Temporary function, can be removed after API changes.\n */\nfunction normalizeCounts({sum}: MergedMetricsData) {\n  try {\n    const metricsCount = Number(sum.metrics);\n    const unparamCount = Number(sum.metrics_unparam);\n    const nullCount = Number(sum.metrics_null);\n    return {\n      metricsCount,\n      unparamCount,\n      nullCount,\n    };\n  } catch (_) {\n    return {\n      metricsCount: 0,\n      unparamCount: 0,\n      nullCount: 0,\n    };\n  }\n}\n\n/**\n * Performance optimization to limit the amount of rows scanned before showing the landing page.\n */\nfunction adjustEventViewTime(eventView: EventView) {\n  const _eventView = eventView.clone();\n\n  if (!_eventView.start && !_eventView.end) {\n    if (!_eventView.statsPeriod) {\n      _eventView.statsPeriod = '1h';\n      _eventView.start = undefined;\n      _eventView.end = undefined;\n    } else {\n      const periodHours = parsePeriodToHours(_eventView.statsPeriod);\n      if (periodHours > 1) {\n        _eventView.statsPeriod = '1h';\n        _eventView.start = undefined;\n        _eventView.end = undefined;\n      }\n    }\n  }\n  return _eventView;\n}\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {QueryFieldValue} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type PercentileValues = Record<EventsDisplayFilterName, number>;\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n\nexport function mapPercentileValues(percentileData?: TableDataRow | null) {\n  return {\n    p100: percentileData?.['p100()'],\n    p99: percentileData?.['p99()'],\n    p95: percentileData?.['p95()'],\n    p75: percentileData?.['p75()'],\n    p50: percentileData?.['p50()'],\n  } as PercentileValues;\n}\n\nexport function getPercentilesEventView(eventView: EventView): EventView {\n  const percentileColumns: QueryFieldValue[] = [\n    {\n      kind: 'function',\n      function: ['p100', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p99', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p95', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p50', '', undefined, undefined],\n    },\n  ];\n\n  return eventView.withColumns(percentileColumns);\n}\n","import {Component, Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Input from 'sentry/components/input';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {transactionSummaryRouteWithQuery} from './utils';\n\nexport enum TransactionThresholdMetric {\n  TRANSACTION_DURATION = 'duration',\n  LARGEST_CONTENTFUL_PAINT = 'lcp',\n}\n\nexport const METRIC_CHOICES = [\n  {label: t('Transaction Duration'), value: 'duration'},\n  {label: t('Largest Contentful Paint'), value: 'lcp'},\n];\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n  onApply?: (threshold, metric) => void;\n  project?: string;\n} & ModalRenderProps;\n\ntype State = {\n  error: string | null;\n  metric: TransactionThresholdMetric | undefined;\n  threshold: number | undefined;\n};\n\nclass TransactionThresholdModal extends Component<Props, State> {\n  state: State = {\n    threshold: this.props.transactionThreshold,\n    metric: this.props.transactionThresholdMetric,\n    error: null,\n  };\n\n  getProject() {\n    const {projects, eventView, project} = this.props;\n\n    if (defined(project)) {\n      return projects.find(proj => proj.id === project);\n    }\n    const projectId = String(eventView.project[0]);\n    return projects.find(proj => proj.id === projectId);\n  }\n\n  handleApply = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'POST',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n          threshold: this.state.threshold,\n          metric: this.state.metric,\n        },\n      })\n      .then(() => {\n        closeModal();\n        if (onApply) {\n          onApply(this.state.threshold, this.state.metric);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n        const errorMessage =\n          err.responseJSON?.threshold ?? err.responseJSON?.non_field_errors ?? null;\n        addErrorMessage(errorMessage);\n      });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleReset = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'DELETE',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n        },\n      })\n      .then(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              threshold: data.threshold,\n              metric: data.metric,\n            });\n            closeModal();\n            if (onApply) {\n              onApply(this.state.threshold, this.state.metric);\n            }\n          })\n          .catch(err => {\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n      });\n  };\n\n  renderModalFields() {\n    return (\n      <Fragment>\n        <FieldGroup\n          data-test-id=\"response-metric\"\n          label={t('Calculation Method')}\n          inline={false}\n          help={t(\n            'This determines which duration metric is used for the Response Time Threshold.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <SelectControl\n            required\n            options={METRIC_CHOICES.slice()}\n            name=\"responseMetric\"\n            label={t('Calculation Method')}\n            value={this.state.metric}\n            onChange={(option: {label: string; value: string}) => {\n              this.handleFieldChange('metric')(option.value);\n            }}\n          />\n        </FieldGroup>\n        <FieldGroup\n          data-test-id=\"response-time-threshold\"\n          label={t('Response Time Threshold (ms)')}\n          inline={false}\n          help={t(\n            'The satisfactory response time for the calculation method defined above. This is used to calculate Apdex and User Misery scores.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <Input\n            type=\"number\"\n            name=\"threshold\"\n            required\n            pattern=\"[0-9]*(\\.[0-9]*)?\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.handleFieldChange('threshold')(event.target.value);\n            }}\n            value={this.state.threshold}\n            step={100}\n            min={100}\n          />\n        </FieldGroup>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body, Footer, organization, transactionName, eventView} = this.props;\n\n    const project = this.getProject();\n\n    const summaryView = eventView.clone();\n    summaryView.query = summaryView.getQueryWithAdditionalConditions();\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      query: summaryView.generateQueryStringObject(),\n      projectID: project?.id,\n    });\n\n    return (\n      <Fragment>\n        <Header closeButton>\n          <h4>{t('Transaction Settings')}</h4>\n        </Header>\n        <Body>\n          <Instruction>\n            {tct(\n              'The changes below will only be applied to [transaction]. To set it at a more global level, go to [projectSettings: Project Settings].',\n              {\n                transaction: <Link to={target}>{transactionName}</Link>,\n                projectSettings: (\n                  <Link\n                    to={`/settings/${organization.slug}/projects/${project?.slug}/performance/`}\n                  />\n                ),\n              }\n            )}\n          </Instruction>\n          {this.renderModalFields()}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              priority=\"default\"\n              onClick={this.handleReset}\n              data-test-id=\"reset-all\"\n            >\n              {t('Reset All')}\n            </Button>\n            <Button\n              aria-label={t('Apply')}\n              priority=\"primary\"\n              onClick={this.handleApply}\n              data-test-id=\"apply-threshold\"\n            >\n              {t('Apply')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n`;\n\nexport default withApi(withProjects(TransactionThresholdModal));\n","import {PlainRoute} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor, Query} from 'history';\n\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nimport {DisplayModes} from './transactionOverview/charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({\n  orgSlug,\n  subPath,\n}: {\n  orgSlug: string;\n  subPath?: string;\n}): string {\n  return `/organizations/${orgSlug}/performance/summary/${subPath ? `${subPath}/` : ''}`;\n}\n\n// normalizes search conditions by removing any redundant search conditions before presenting them in:\n// - query strings\n// - search UI\nexport function normalizeSearchConditions(query: string): MutableSearch {\n  const filterParams = normalizeSearchConditionsWithTransactionName(query);\n\n  // no need to include transaction as its already in the query params\n  filterParams.removeFilter('transaction');\n\n  return filterParams;\n}\n\n// normalizes search conditions by removing any redundant search conditions, but retains any transaction name\nexport function normalizeSearchConditionsWithTransactionName(\n  query: string\n): MutableSearch {\n  const filterParams = new MutableSearch(query);\n\n  // remove any event.type queries since it is implied to apply to only transactions\n  filterParams.removeFilter('event.type');\n\n  return filterParams;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n  additionalQuery,\n  subPath,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  additionalQuery?: Record<string, string>;\n  display?: DisplayModes;\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n  subPath?: string;\n  trendColumn?: string;\n  trendFunction?: string;\n  unselectedSeries?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n    subPath,\n  });\n\n  let searchFilter: typeof query.query;\n  if (typeof query.query === 'string') {\n    searchFilter = normalizeSearchConditions(query.query).formatString();\n  } else {\n    searchFilter = query.query;\n  }\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: searchFilter,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n      referrer: 'performance-transaction-summary',\n      ...additionalQuery,\n    },\n  };\n}\n\nexport function generateTraceLink(dateSelection) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const traceId = `${tableRow.trace}`;\n    if (!traceId) {\n      return {};\n    }\n\n    return getTraceDetailsUrl(organization, traceId, dateSelection, {});\n  };\n}\n\nexport function generateTransactionLink(transactionName: string) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    query: Query,\n    spanId?: string\n  ): LocationDescriptor => {\n    const eventSlug = generateEventSlug(tableRow);\n    return getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transactionName,\n      query,\n      spanId\n    );\n  };\n}\n\nexport function generateReplayLink(routes: PlainRoute<any>[]) {\n  const referrer = getRouteStringFromRoutes(routes);\n\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query | undefined\n  ): LocationDescriptor => {\n    const replayId = tableRow.replayId;\n    if (!replayId) {\n      return {};\n    }\n\n    const replaySlug = `${tableRow['project.name']}:${replayId}`;\n\n    if (!tableRow.timestamp) {\n      return {\n        pathname: `/organizations/${organization.slug}/replays/${replaySlug}/`,\n        query: {\n          referrer,\n        },\n      };\n    }\n\n    const transactionTimestamp = new Date(tableRow.timestamp).getTime();\n\n    const transactionStartTimestamp =\n      transactionTimestamp - (tableRow['transaction.duration'] as number);\n\n    return {\n      pathname: `/organizations/${organization.slug}/replays/${replaySlug}/`,\n      query: {\n        event_t: transactionStartTimestamp,\n        referrer,\n      },\n    };\n  };\n}\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n"],"names":["getRequestPayload","eventView","location","omit","getEventsAPIPayload","MetricsCompatibilityQuery","children","props","route","tableData","rest","MetricsCompatibilitySumsQuery","_Provider","_useContext","_Context","createDefinedContext","name","strict","MetricsCardinalityProvider","canUseMetricsData","organization","value","isLoading","outcome","forceTransactionsOnly","baseDiscoverProps","orgSlug","slug","cursor","EventView","fields","field","_eventView","clone","start","end","statsPeriod","parsePeriodToHours","undefined","adjustEventViewTime","Fragment","compatabilityResult","sumsResult","dataCounts","hasOtherFallbackCondition","fallbackOutcome","isOnFallbackThresolds","features","includes","compatibleProjects","compatible_projects","normalizeCounts","metricsCount","checkNoDataFallback","counts","nullCount","checkIncompatibleData","shouldWarnIncompatibleSDK","unparamCount","checkIfAllOtherData","shouldNotifyUnnamedTransactions","checkIfPartialOtherData","getMetricsOutcome","error","Provider","sendOutcomeAnalytics","fallbackFromNull","fallbackFromUnparam","isOnMetrics","useEffect","trackAdvancedAnalyticsEvent","is_on_metrics","fallback_from_null","fallback_from_unparam","Consumer","useMetricsCardinalityContext","sum","Number","metrics","metrics_unparam","metrics_null","_","getBucketWidth","data","length","bin","computeBuckets","width","map","item","bucket","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","getDuration","factor","Math","round","EPSILON","toLocaleString","Error","count","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","query","toFixed","sort","kind","filterToField","label","t","p100","eventsRouteWithQuery","transaction","projectID","pathname","project","environment","decodeEventsDisplayFilterFromLocation","option","decodeScalar","showTransactions","Object","values","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","mapPercentileValues","percentileData","getPercentilesEventView","withColumns","function","TransactionThresholdMetric","METRIC_CHOICES","TransactionThresholdModal","Component","threshold","this","transactionThreshold","metric","transactionThresholdMetric","event","preventDefault","api","closeModal","transactionName","onApply","getProject","defined","transactionThresholdUrl","requestPromise","method","includeAllArgs","id","state","then","catch","err","setState","errorMessage","responseJSON","non_field_errors","addErrorMessage","prevState","newState","cloneDeep","set","errors","projectThresholdUrl","projects","find","proj","projectId","String","renderModalFields","inline","help","showHelpInTooltip","flexibleControlStateSize","stacked","required","options","slice","onChange","handleFieldChange","pattern","target","step","min","render","Header","Body","Footer","summaryView","getQueryWithAdditionalConditions","transactionSummaryRouteWithQuery","generateQueryStringObject","closeButton","Instruction","tct","to","projectSettings","gap","priority","onClick","handleReset","handleApply","space","modalCss","withApi","withProjects","normalizeSearchConditions","filterParams","normalizeSearchConditionsWithTransactionName","removeFilter","MutableSearch","unselectedSeries","display","trendFunction","trendColumn","additionalQuery","subPath","generateTransactionSummaryRoute","searchFilter","formatString","referrer","generateTraceLink","dateSelection","tableRow","_query","traceId","trace","getTraceDetailsUrl","generateTransactionLink","spanId","eventSlug","generateEventSlug","getTransactionDetailsUrl","generateReplayLink","routes","getRouteStringFromRoutes","replayId","replaySlug","timestamp","transactionStartTimestamp","Date","getTime","event_t","SidebarSpacer"],"sourceRoot":""}