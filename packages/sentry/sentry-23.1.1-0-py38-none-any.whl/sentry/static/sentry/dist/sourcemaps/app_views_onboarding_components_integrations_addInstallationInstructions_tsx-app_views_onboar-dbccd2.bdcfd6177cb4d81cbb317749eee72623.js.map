{"version":3,"file":"chunks/app_views_onboarding_components_integrations_addInstallationInstructions_tsx-app_views_onboar-dbccd2.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/onboarding/components/integrations/addInstallationInstructions.tsx","webpack:///./app/views/onboarding/components/integrations/postInstallCodeSnippet.tsx","webpack:///./app/views/onboarding/createSampleEventButton.tsx","webpack:///./app/views/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/organizationIntegrations/addIntegrationButton.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\n\n// TODO: Make dyanmic for other platforms/integrations\nexport default function AddInstallationInstructions() {\n  return (\n    <Fragment>\n      <p>\n        {tct(\n          'The automated AWS Lambda setup will instrument your Lambda functions with Sentry error and performance monitoring without any code changes. We use CloudFormation Stack ([learnMore]) to create the Sentry role which gives us access to your AWS account.',\n          {\n            learnMore: (\n              <ExternalLink href=\"https://aws.amazon.com/cloudformation/\">\n                {t('Learn more about CloudFormation')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </p>\n      <p>\n        {tct(\n          'Just press the [addInstallation] button below and complete the steps in the popup that opens.',\n          {addInstallation: <strong>{t('Add Installation')}</strong>}\n        )}\n      </p>\n      <p>\n        {tct(\n          'If you donâ€™t want to add CloudFormation stack to your AWS environment, press the [manualSetup] button instead.',\n          {manualSetup: <strong>{t('Manual Setup')}</strong>}\n        )}\n      </p>\n    </Fragment>\n  );\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider} from 'sentry/types';\n\ntype Props = {\n  provider: IntegrationProvider;\n  isOnboarding?: boolean;\n  platform?: PlatformKey;\n};\n\nexport default function PostInstallCodeSnippet({\n  provider,\n  platform,\n  isOnboarding,\n}: Props) {\n  // currently supporting both Python and Node\n  const token_punctuation: string = platform === 'python-awslambda' ? '()' : '();';\n  return (\n    <div>\n      <p>\n        {t(\n          \"Congrats, you just installed the %s integration! Now that it's is installed, the next time you trigger an error it will go to your Sentry.\",\n          provider.name\n        )}\n      </p>\n      <p>\n        {t(\n          'This snippet includes an intentional error, so you can test that everything is working as soon as you set it up:'\n        )}\n      </p>\n      <div>\n        <CodeWrapper>\n          <code>\n            <TokenFunction>myUndefinedFunction</TokenFunction>\n            <TokenPunctuation>{token_punctuation}</TokenPunctuation>)\n          </code>\n        </CodeWrapper>\n      </div>\n      {isOnboarding && (\n        <Fragment>\n          <p>\n            {t(\n              \"If you're new to Sentry, use the email alert to access your account and complete a product tour.\"\n            )}\n          </p>\n          <p>\n            {t(\n              \"If you're an existing user and have disabled alerts, you won't receive this email.\"\n            )}\n          </p>\n        </Fragment>\n      )}\n    </div>\n  );\n}\n\nconst CodeWrapper = styled('pre')`\n  padding: 1em;\n  overflow: auto;\n  background: #251f3d;\n  font-size: 15px;\n`;\n\nconst TokenFunction = styled('span')`\n  color: #7cc5c4;\n`;\n\nconst TokenPunctuation = styled('span')`\n  color: #b3acc1;\n`;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Button, ButtonProps} from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withApi from 'sentry/utils/withApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype CreateSampleEventButtonProps = {\n  api: Client;\n  organization: Organization;\n  source: string;\n  project?: Project;\n} & ButtonProps;\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 30;\nconst EVENT_POLL_INTERVAL = 1000;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n\n    await new Promise(resolve => window.setTimeout(resolve, EVENT_POLL_INTERVAL));\n\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends Component<CreateSampleEventButtonProps, State> {\n  state: State = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('sample_event.button_viewed', {\n      organization,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}` as const;\n\n    trackAdvancedAnalyticsEvent(eventKey, {\n      organization,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('growth.onboarding_view_sample_event', {\n      platform: project.platform,\n      organization,\n    });\n\n    addLoadingMessage(t('Processing sample event...'), {\n      duration: EVENT_POLL_RETRIES * EVENT_POLL_INTERVAL,\n    });\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      clearIndicators();\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel('warning');\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    browserHistory.push(\n      normalizeUrl(\n        `/organizations/${organization.slug}/issues/${eventData.groupID}/?project=${project.id}&referrer=sample-error`\n      )\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n","import {Component} from 'react';\nimport * as qs from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {NODE_ENV} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  onInstall: (data: IntegrationWithConfig) => void;\n  organization: Organization;\n  provider: IntegrationProvider;\n  account?: string; // for analytics\n  analyticsParams?: {\n    already_installed: boolean;\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog?.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {account, analyticsParams, modalParams, organization, provider} = this.props;\n\n    trackIntegrationAnalytics('integrations.installation_start', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (account) {\n      query.account = account;\n    }\n\n    if (modalParams) {\n      query = {...query, ...modalParams};\n    }\n\n    const installUrl = `${url}?${qs.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {analyticsParams, onInstall, organization, provider} = this.props;\n\n    // TODO: Would be better if we could mock document.location.origin to '' in\n    // the tests. jsdom's window.postMessage doesn't set an origin\n    if (message.origin !== document.location.origin && NODE_ENV === 'production') {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.installation_complete', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    addSuccessMessage(t('%s added', provider.name));\n    onInstall(data);\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children(this.openDialog);\n  }\n}\n","import {Button, ButtonProps} from 'sentry/components/button';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {IntegrationWithConfig} from 'sentry/types';\n\nimport AddIntegration from './addIntegration';\n\ninterface AddIntegrationButtonProps\n  extends Omit<ButtonProps, 'children' | 'analyticsParams'>,\n    Pick<\n      React.ComponentProps<typeof AddIntegration>,\n      'provider' | 'organization' | 'analyticsParams' | 'modalParams'\n    > {\n  onAddIntegration: (data: IntegrationWithConfig) => void;\n  buttonText?: string;\n  reinstall?: boolean;\n}\n\nexport function AddIntegrationButton({\n  provider,\n  buttonText,\n  onAddIntegration,\n  organization,\n  reinstall,\n  analyticsParams,\n  modalParams,\n  ...buttonProps\n}: AddIntegrationButtonProps) {\n  const label =\n    buttonText ?? (reinstall ? t('Enable') : t('Add %s', provider.metadata.noun));\n\n  return (\n    <Tooltip\n      disabled={provider.canAdd}\n      title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}\n    >\n      <AddIntegration\n        provider={provider}\n        onInstall={onAddIntegration}\n        organization={organization}\n        analyticsParams={analyticsParams}\n        modalParams={modalParams}\n      >\n        {onClick => (\n          <Button\n            disabled={!provider.canAdd}\n            {...buttonProps}\n            onClick={() => onClick()}\n            aria-label={t('Add integration')}\n          >\n            {label}\n          </Button>\n        )}\n      </AddIntegration>\n    </Tooltip>\n  );\n}\n"],"names":["AddInstallationInstructions","Fragment","tct","learnMore","href","t","addInstallation","manualSetup","PostInstallCodeSnippet","provider","platform","isOnboarding","token_punctuation","name","CodeWrapper","TokenFunction","TokenPunctuation","EVENT_POLL_INTERVAL","CreateSampleEventButton","Component","creating","async","api","organization","project","this","props","eventData","trackAdvancedAnalyticsEvent","addLoadingMessage","duration","EVENT_POLL_RETRIES","setState","url","slug","requestPromise","method","error","Sentry","scope","setExtra","Error","clearIndicators","addErrorMessage","t0","performance","now","eventCreated","retries","groupID","Promise","resolve","window","setTimeout","latestEventAvailable","t1","Math","ceil","recordAnalytics","setTag","toString","setLevel","browserHistory","normalizeUrl","id","componentDidMount","source","project_id","eventKey","interval","render","_api","_organization","_project","_source","state","disabled","onClick","createSampleGroup","withApi","withOrganization","AddIntegration","urlParams","account","analyticsParams","modalParams","trackIntegrationAnalytics","integration","key","integration_type","width","height","setupDialog","left","top","computeCenteredWindow","query","installUrl","qs","opts","dialog","open","focus","message","onInstall","origin","document","location","NODE_ENV","success","data","addSuccessMessage","addEventListener","didReceiveMessage","componentWillUnmount","removeEventListener","close","screenLeft","undefined","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","children","openDialog","AddIntegrationButton","buttonText","onAddIntegration","reinstall","buttonProps","label","metadata","noun","canAdd","title"],"sourceRoot":""}