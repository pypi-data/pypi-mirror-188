{"version":3,"file":"chunks/app_utils_discover_charts_tsx-app_views_profiling_content_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/views/profiling/profilingOnboardingPanel.tsx","webpack:///./app/views/profiling/content.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n}\n\nfunction OnboardingPanel({image, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n","import styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/performance-empty-state.svg';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\n\ninterface ProfilingOnboardingPanelProps {\n  children: React.ReactNode;\n}\n\nexport function ProfilingOnboardingPanel(props: ProfilingOnboardingPanelProps) {\n  return (\n    <OnboardingPanel image={<HeroImage src={emptyStateImg} />}>\n      <h3>{t('Function level insights')}</h3>\n      <p>\n        {t(\n          'Discover slow-to-execute or resource intensive functions within your application'\n        )}\n      </p>\n      <ButtonList gap={1}>{props.children}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst HeroImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    transform: translateX(-30%);\n    width: 380px;\n    min-width: 380px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    transform: translateX(-30%);\n    width: 420px;\n    min-width: 420px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n","import {Fragment, useCallback, useEffect, useMemo} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {PageHeadingQuestionTooltip} from 'sentry/components/pageHeadingQuestionTooltip';\nimport Pagination from 'sentry/components/pagination';\nimport {ProfileEventsTable} from 'sentry/components/profiling/profileEventsTable';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport SmartSearchBar, {SmartSearchBarProps} from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport space from 'sentry/styles/space';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {\n  formatError,\n  formatSort,\n  useProfileEvents,\n} from 'sentry/utils/profiling/hooks/useProfileEvents';\nimport {useProfileFilters} from 'sentry/utils/profiling/hooks/useProfileFilters';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\n\nimport {ProfileCharts} from './landing/profileCharts';\nimport {ProfilingOnboardingPanel} from './profilingOnboardingPanel';\n\ninterface ProfilingContentProps {\n  location: Location;\n}\n\nfunction ProfilingContent({location}: ProfilingContentProps) {\n  const organization = useOrganization();\n  const {selection} = usePageFilters();\n  const cursor = decodeScalar(location.query.cursor);\n  const query = decodeScalar(location.query.query, '');\n\n  const sort = formatSort<FieldType>(decodeScalar(location.query.sort), FIELDS, {\n    key: 'p99()',\n    order: 'desc',\n  });\n\n  const profileFilters = useProfileFilters({query: '', selection});\n  const {projects} = useProjects();\n\n  const transactions = useProfileEvents<FieldType>({\n    cursor,\n    fields: FIELDS,\n    query,\n    sort,\n    referrer: 'api.profiling.landing-table',\n  });\n\n  const transactionsError =\n    transactions.status === 'error' ? formatError(transactions.error) : null;\n\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('profiling_views.landing', {\n      organization,\n    });\n  }, [organization]);\n\n  const handleSearch: SmartSearchBarProps['onSearch'] = useCallback(\n    (searchQuery: string) => {\n      browserHistory.push({\n        ...location,\n        query: {\n          ...location.query,\n          cursor: undefined,\n          query: searchQuery || undefined,\n        },\n      });\n    },\n    [location]\n  );\n\n  // Open the modal on demand\n  const onSetupProfilingClick = useCallback(() => {\n    trackAdvancedAnalyticsEvent('profiling_views.onboarding', {\n      organization,\n    });\n    SidebarPanelStore.activatePanel(SidebarPanelKey.ProfilingOnboarding);\n  }, [organization]);\n\n  const shouldShowProfilingOnboardingPanel = useMemo((): boolean => {\n    // if it's My Projects or All projects, only show onboarding if we can't\n    // find any projects with profiles\n    if (\n      selection.projects.length === 0 ||\n      selection.projects[0] === ALL_ACCESS_PROJECTS\n    ) {\n      return projects.every(project => !project.hasProfiles);\n    }\n\n    // otherwise, only show onboarding if we can't find any projects with profiles\n    // from those that were selected\n    const projectsWithProfiles = new Set(\n      projects.filter(project => project.hasProfiles).map(project => project.id)\n    );\n    return selection.projects.every(\n      project => !projectsWithProfiles.has(String(project))\n    );\n  }, [selection.projects, projects]);\n\n  return (\n    <SentryDocumentTitle title={t('Profiling')} orgSlug={organization.slug}>\n      <PageFiltersContainer>\n        <Layout.Page>\n          <NoProjectMessage organization={organization}>\n            <Layout.Header>\n              <Layout.HeaderContent>\n                <Layout.Title>\n                  {t('Profiling')}\n                  <PageHeadingQuestionTooltip\n                    docsUrl=\"https://docs.sentry.io/product/profiling/\"\n                    title={t(\n                      'A view of how your application performs in a variety of environments, based off of the performance profiles collected from real user devices in production.'\n                    )}\n                  />\n                </Layout.Title>\n              </Layout.HeaderContent>\n              <Layout.HeaderActions>\n                <ButtonBar gap={1}>\n                  <Button size=\"sm\" onClick={onSetupProfilingClick}>\n                    {t('Set Up Profiling')}\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    priority=\"primary\"\n                    href=\"https://discord.gg/zrMjKA4Vnz\"\n                    external\n                    onClick={() => {\n                      trackAdvancedAnalyticsEvent(\n                        'profiling_views.visit_discord_channel',\n                        {\n                          organization,\n                        }\n                      );\n                    }}\n                  >\n                    {t('Join Discord')}\n                  </Button>\n                </ButtonBar>\n              </Layout.HeaderActions>\n            </Layout.Header>\n            <Layout.Body>\n              <Layout.Main fullWidth>\n                {transactionsError && (\n                  <Alert type=\"error\" showIcon>\n                    {transactionsError}\n                  </Alert>\n                )}\n                <ActionBar>\n                  <PageFilterBar condensed>\n                    <ProjectPageFilter />\n                    <EnvironmentPageFilter />\n                    <DatePageFilter alignDropdown=\"left\" />\n                  </PageFilterBar>\n                  <SmartSearchBar\n                    organization={organization}\n                    hasRecentSearches\n                    searchSource=\"profile_landing\"\n                    supportedTags={profileFilters}\n                    query={query}\n                    onSearch={handleSearch}\n                    maxQueryLength={MAX_QUERY_LENGTH}\n                  />\n                </ActionBar>\n                {shouldShowProfilingOnboardingPanel ? (\n                  <ProfilingOnboardingPanel>\n                    <Button onClick={onSetupProfilingClick} priority=\"primary\">\n                      {t('Set Up Profiling')}\n                    </Button>\n                    <Button href=\"https://docs.sentry.io/product/profiling/\" external>\n                      {t('Read Docs')}\n                    </Button>\n                  </ProfilingOnboardingPanel>\n                ) : (\n                  <Fragment>\n                    <ProfileCharts query={query} selection={selection} />\n                    <ProfileEventsTable\n                      columns={FIELDS.slice()}\n                      data={\n                        transactions.status === 'success' ? transactions.data[0] : null\n                      }\n                      error={\n                        transactions.status === 'error'\n                          ? t('Unable to load profiles')\n                          : null\n                      }\n                      isLoading={transactions.status === 'loading'}\n                      sort={sort}\n                      sortableColumns={new Set(FIELDS)}\n                    />\n                    <Pagination\n                      pageLinks={\n                        transactions.status === 'success'\n                          ? transactions.data?.[2]?.getResponseHeader('Link') ?? null\n                          : null\n                      }\n                    />\n                  </Fragment>\n                )}\n              </Layout.Main>\n            </Layout.Body>\n          </NoProjectMessage>\n        </Layout.Page>\n      </PageFiltersContainer>\n    </SentryDocumentTitle>\n  );\n}\n\nconst FIELDS = [\n  'transaction',\n  'project.id',\n  'last_seen()',\n  'p75()',\n  'p95()',\n  'p99()',\n  'count()',\n] as const;\n\ntype FieldType = typeof FIELDS[number];\n\nconst ActionBar = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  grid-template-columns: min-content auto;\n  margin-bottom: ${space(2)};\n`;\n\nexport default ProfilingContent;\n"],"names":["OnboardingPanel","image","children","props","Container","IlloBox","StyledBox","centered","space","p","theme","breakpoints","small","medium","tooltipFormatter","value","outputType","defined","tooltipFormatterUsingAggregateOutputType","type","toLocaleString","formatPercentage","getDuration","formatBytesBase2","toString","axisLabelFormatter","abbreviation","durationUnit","axisLabelFormatterUsingAggregateOutputType","formatAbbreviatedNumber","axisDuration","categorizeDuration","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","getDurationUnit","series","legend","range","data","maxSeries","minSeries","forEach","idx","seriesName","selected","length","max","Math","map","filter","min","findRangeOfMultiSeries","avg","ProfilingOnboardingPanel","HeroImage","src","emptyStateImg","ButtonList","gap","large","xlarge","ButtonBar","ProfilingContent","location","organization","useOrganization","selection","usePageFilters","cursor","decodeScalar","query","sort","formatSort","FIELDS","key","order","profileFilters","useProfileFilters","projects","useProjects","transactions","useProfileEvents","fields","referrer","transactionsError","status","formatError","error","useEffect","trackAdvancedAnalyticsEvent","handleSearch","useCallback","searchQuery","browserHistory","undefined","onSetupProfilingClick","SidebarPanelStore","SidebarPanelKey","shouldShowProfilingOnboardingPanel","useMemo","ALL_ACCESS_PROJECTS","every","project","hasProfiles","projectsWithProfiles","Set","id","has","String","title","orgSlug","slug","docsUrl","size","onClick","priority","href","external","fullWidth","showIcon","ActionBar","condensed","alignDropdown","hasRecentSearches","searchSource","supportedTags","onSearch","maxQueryLength","MAX_QUERY_LENGTH","Fragment","columns","slice","isLoading","sortableColumns","pageLinks","getResponseHeader"],"sourceRoot":""}