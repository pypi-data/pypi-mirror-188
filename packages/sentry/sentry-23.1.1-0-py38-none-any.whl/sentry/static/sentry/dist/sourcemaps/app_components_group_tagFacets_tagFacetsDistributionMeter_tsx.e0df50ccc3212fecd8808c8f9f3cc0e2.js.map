{"version":3,"file":"chunks/app_components_group_tagFacets_tagFacetsDistributionMeter_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/group/tagFacets/tagFacetsDistributionMeter.tsx"],"sourcesContent":["import {useState} from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {TagSegment} from 'sentry/actionCreators/events';\nimport Link from 'sentry/components/links/link';\nimport {IconChevron} from 'sentry/icons/iconChevron';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {percent} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {isMobilePlatform} from 'sentry/utils/platform';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nconst COLORS = ['#3A3387', '#5F40A3', '#8C4FBD', '#B961D3', '#FEEBF9'];\nconst MAX_SEGMENTS = 4;\n\ntype Props = {\n  segments: TagSegment[];\n  title: string;\n  totalValues: number;\n  colors?: string[];\n  expandByDefault?: boolean;\n  onTagClick?: (title: string, value: TagSegment) => void;\n  project?: Project;\n};\n\nconst _debounceTrackHover = debounce(\n  ({\n    tag,\n    value,\n    platform,\n    is_mobile,\n    organization,\n  }: {\n    is_mobile: boolean;\n    organization: Organization;\n    tag: string;\n    value: string;\n    platform?: string;\n  }) => {\n    trackAdvancedAnalyticsEvent('issue_group_details.tags.bar.hovered', {\n      tag,\n      value,\n      platform,\n      is_mobile,\n      organization,\n    });\n  },\n  300\n);\n\nfunction TagFacetsDistributionMeter({\n  colors = COLORS,\n  segments,\n  title,\n  totalValues,\n  onTagClick,\n  project,\n  expandByDefault,\n}: Props) {\n  const organization = useOrganization();\n  const multiValueTag = segments.length > 1;\n  const [expanded, setExpanded] = useState<boolean>(multiValueTag && !!expandByDefault);\n  const [hoveredValue, setHoveredValue] = useState<TagSegment | null>(null);\n  const debounceSetHovered = debounce(value => setHoveredValue(value), 70);\n  const topSegments = segments.slice(0, MAX_SEGMENTS);\n\n  function renderTitle() {\n    if (!Array.isArray(segments) || segments.length <= 0) {\n      return (\n        <Title>\n          <TitleType>{title}</TitleType>\n        </Title>\n      );\n    }\n\n    return (\n      <Title>\n        <TitleType>{title}</TitleType>\n        <TitleDescription>{topSegments[0].name || t('n/a')}</TitleDescription>\n        {multiValueTag && (\n          <StyledChevron\n            direction={expanded ? 'up' : 'down'}\n            size=\"xs\"\n            aria-label={`expand-${title}`}\n          />\n        )}\n      </Title>\n    );\n  }\n\n  function renderSegments() {\n    if (totalValues === 0) {\n      return (\n        <SegmentBar>\n          <p>{t('No recent data.')}</p>\n        </SegmentBar>\n      );\n    }\n\n    return (\n      <SegmentBar>\n        {topSegments.map((value, index) => {\n          const pct = percent(value.count, totalValues);\n          const pctLabel = Math.floor(pct);\n          const segmentProps = {\n            index,\n            onClick: () => {\n              trackAdvancedAnalyticsEvent('issue_group_details.tags.bar.clicked', {\n                tag: title,\n                value: value.value,\n                platform: project?.platform,\n                is_mobile: isMobilePlatform(project?.platform),\n                organization,\n              });\n              return onTagClick?.(title, value);\n            },\n          };\n          return (\n            <div\n              key={value.value}\n              style={{width: pct + '%'}}\n              onMouseOver={() => {\n                debounceSetHovered(value);\n                _debounceTrackHover({\n                  tag: title,\n                  value: value.value,\n                  platform: project?.platform,\n                  is_mobile: isMobilePlatform(project?.platform),\n                  organization,\n                });\n              }}\n              onMouseLeave={() => debounceSetHovered(null)}\n            >\n              {value.isOther ? (\n                <OtherSegment aria-label={t('Other')} color={colors[colors.length - 1]} />\n              ) : (\n                <Segment color={colors[index]} {...segmentProps}>\n                  {/* if the first segment is 6% or less, the label won't fit cleanly into the segment, so don't show the label */}\n                  {index === 0 && pctLabel > 6 ? `${pctLabel}%` : null}\n                </Segment>\n              )}\n            </div>\n          );\n        })}\n      </SegmentBar>\n    );\n  }\n\n  function renderLegend() {\n    return (\n      <LegendContainer>\n        {topSegments.map((segment, index) => {\n          const pctLabel = Math.floor(percent(segment.count, totalValues));\n          const unfocus = !!hoveredValue && hoveredValue.value !== segment.value;\n          const focus = hoveredValue?.value === segment.value;\n          return (\n            <Link\n              key={`segment-${segment.name}-${index}`}\n              to={segment.url}\n              aria-label={t(\n                'Add the %s %s segment tag to the search query',\n                title,\n                segment.value\n              )}\n            >\n              <LegendRow\n                onMouseOver={() => debounceSetHovered(segment)}\n                onMouseLeave={() => debounceSetHovered(null)}\n              >\n                <LegendDot color={colors[index]} focus={focus} />\n                <LegendText unfocus={unfocus}>\n                  {segment.name ?? <NotApplicableLabel>{t('n/a')}</NotApplicableLabel>}\n                </LegendText>\n                {<LegendPercent>{`${pctLabel}%`}</LegendPercent>}\n              </LegendRow>\n            </Link>\n          );\n        })}\n      </LegendContainer>\n    );\n  }\n\n  const totalVisible = topSegments.reduce((sum, value) => sum + value.count, 0);\n  const hasOther = totalVisible < totalValues;\n\n  if (hasOther) {\n    topSegments.push({\n      isOther: true,\n      name: t('Other'),\n      value: 'other',\n      count: totalValues - totalVisible,\n      url: '',\n    });\n  }\n\n  return (\n    <TagSummary>\n      <TagHeader\n        clickable={multiValueTag}\n        onClick={() => multiValueTag && setExpanded(!expanded)}\n      >\n        {renderTitle()}\n        {renderSegments()}\n      </TagHeader>\n      {expanded && renderLegend()}\n    </TagSummary>\n  );\n}\n\nexport default TagFacetsDistributionMeter;\n\nconst TagSummary = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst TagHeader = styled('span')<{clickable?: boolean}>`\n  ${p => (p.clickable ? 'cursor: pointer' : null)};\n`;\n\nconst SegmentBar = styled('div')`\n  display: flex;\n  overflow: hidden;\n  border-radius: ${space(0.75)};\n`;\n\nconst Title = styled('div')`\n  display: flex;\n  font-size: ${p => p.theme.fontSizeSmall};\n  justify-content: space-between;\n  margin-bottom: ${space(0.25)};\n  line-height: 1.1;\n`;\n\nconst TitleType = styled('div')`\n  flex: none;\n  color: ${p => p.theme.textColor};\n  font-weight: bold;\n  font-size: ${p => p.theme.fontSizeSmall};\n  margin-right: ${space(1)};\n`;\n\nconst TitleDescription = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  display: flex;\n  color: ${p => p.theme.gray300};\n  text-align: right;\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst OtherSegment = styled('span')<{color: string}>`\n  display: block;\n  width: 100%;\n  height: ${space(2)};\n  color: inherit;\n  outline: none;\n  background-color: ${p => p.color};\n`;\n\nconst Segment = styled('span', {shouldForwardProp: isPropValid})<{color: string}>`\n  &:hover {\n    color: ${p => p.theme.white};\n  }\n  display: block;\n  width: 100%;\n  height: ${space(2)};\n  color: ${p => p.theme.white};\n  outline: none;\n  background-color: ${p => p.color};\n  border-radius: 0;\n  text-align: right;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  padding: 1px ${space(0.5)} 0 0;\n`;\n\nconst LegendContainer = styled('div')`\n  margin: ${space(1)} 0;\n`;\n\nconst LegendRow = styled('div')`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  padding: ${space(0.5)} 0;\n`;\n\nconst LegendDot = styled('span')<{color: string; focus: boolean}>`\n  padding: 0;\n  position: relative;\n  width: 11px;\n  height: 11px;\n  text-indent: -9999em;\n  display: inline-block;\n  border-radius: 50%;\n  flex-shrink: 0;\n  background-color: ${p => p.color};\n  transition: outline 0.3s;\n  ${p => (p.focus ? `outline: ${p.theme.gray100} ${space(0.5)} solid` : null)}\n`;\n\nconst LegendText = styled('span')<{unfocus: boolean}>`\n  font-size: ${p => p.theme.fontSizeSmall};\n  margin-left: ${space(1)};\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  transition: color 0.3s;\n  color: ${p => (p.unfocus ? p.theme.gray300 : p.theme.gray400)};\n`;\n\nconst LegendPercent = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  margin-left: ${space(1)};\n  color: ${p => p.theme.gray300};\n  text-align: right;\n  flex-grow: 1;\n`;\n\nconst StyledChevron = styled(IconChevron)`\n  margin: -${space(0.5)} 0 0 ${space(0.5)};\n  color: ${p => p.theme.gray300};\n  min-width: ${space(1.5)};\n  margin-top: 0;\n`;\n\nconst NotApplicableLabel = styled('span')`\n  color: ${p => p.theme.gray300};\n`;\n"],"names":["COLORS","_debounceTrackHover","debounce","tag","value","platform","is_mobile","organization","trackAdvancedAnalyticsEvent","TagFacetsDistributionMeter","colors","segments","title","totalValues","onTagClick","project","expandByDefault","useOrganization","multiValueTag","length","expanded","setExpanded","useState","hoveredValue","setHoveredValue","debounceSetHovered","topSegments","slice","totalVisible","reduce","sum","count","push","isOther","name","t","url","TagSummary","TagHeader","clickable","onClick","Array","isArray","Title","TitleType","TitleDescription","StyledChevron","direction","size","SegmentBar","map","index","pct","percent","pctLabel","Math","floor","segmentProps","isMobilePlatform","style","width","onMouseOver","onMouseLeave","OtherSegment","color","Segment","LegendContainer","segment","unfocus","focus","to","LegendRow","LegendDot","LegendText","NotApplicableLabel","LegendPercent","space","p","theme","fontSizeSmall","textColor","overflowEllipsis","gray300","shouldForwardProp","isPropValid","white","fontSizeExtraSmall","gray100","gray400","IconChevron"],"sourceRoot":""}