{"version":3,"file":"chunks/app_views_performance_trends_changedTransactions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/performance/trends/changedTransactions.tsx","webpack:///./app/views/performance/trends/chart.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport Count from 'sentry/components/count';\nimport DropdownLink from 'sentry/components/dropdownLink';\nimport Duration from 'sentry/components/duration';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport {RadioLineItem} from 'sentry/components/forms/controls/radioGroup';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport MenuItem from 'sentry/components/menuItem';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport {Panel} from 'sentry/components/panels';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport Radio from 'sentry/components/radio';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconArrow, IconEllipsis} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {AvatarProject, Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {formatPercentage, getDuration} from 'sentry/utils/formatters';\nimport TrendsDiscoverQuery from 'sentry/utils/performance/trends/trendsDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {DisplayModes} from '../transactionSummary/transactionOverview/charts';\nimport {transactionSummaryRouteWithQuery} from '../transactionSummary/utils';\n\nimport Chart from './chart';\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendColumnField,\n  TrendFunctionField,\n  TrendsStats,\n  TrendView,\n} from './types';\nimport {\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getSelectedQueryKey,\n  getTrendProjectId,\n  modifyTrendView,\n  normalizeTrends,\n  transformDeltaSpread,\n  transformValueDelta,\n  trendCursorNames,\n  trendToColor,\n} from './utils';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  setError: (msg: string | undefined) => void;\n  trendChangeType: TrendChangeType;\n  trendView: TrendView;\n  previousTrendColumn?: TrendColumnField;\n  previousTrendFunction?: TrendFunctionField;\n};\n\ntype TrendsCursorQuery = {\n  improvedCursor?: string;\n  regressionCursor?: string;\n};\n\nconst makeTrendsCursorHandler =\n  (trendChangeType: TrendChangeType): CursorHandler =>\n  (cursor, path, query) => {\n    const cursorQuery = {} as TrendsCursorQuery;\n    if (trendChangeType === TrendChangeType.IMPROVED) {\n      cursorQuery.improvedCursor = cursor;\n    } else if (trendChangeType === TrendChangeType.REGRESSION) {\n      cursorQuery.regressionCursor = cursor;\n    }\n\n    const selectedQueryKey = getSelectedQueryKey(trendChangeType);\n    delete query[selectedQueryKey];\n\n    browserHistory.push({\n      pathname: path,\n      query: {...query, ...cursorQuery},\n    });\n  };\n\nfunction getChartTitle(trendChangeType: TrendChangeType): string {\n  switch (trendChangeType) {\n    case TrendChangeType.IMPROVED:\n      return t('Most Improved Transactions');\n    case TrendChangeType.REGRESSION:\n      return t('Most Regressed Transactions');\n    default:\n      throw new Error('No trend type passed');\n  }\n}\n\nfunction getSelectedTransaction(\n  location: Location,\n  trendChangeType: TrendChangeType,\n  transactions?: NormalizedTrendsTransaction[]\n): NormalizedTrendsTransaction | undefined {\n  const queryKey = getSelectedQueryKey(trendChangeType);\n  const selectedTransactionName = decodeScalar(location.query[queryKey]);\n\n  if (!transactions) {\n    return undefined;\n  }\n\n  const selectedTransaction = transactions.find(\n    transaction =>\n      `${transaction.transaction}-${transaction.project}` === selectedTransactionName\n  );\n\n  if (selectedTransaction) {\n    return selectedTransaction;\n  }\n\n  return transactions.length > 0 ? transactions[0] : undefined;\n}\n\nfunction handleChangeSelected(\n  location: Location,\n  organization: Organization,\n  trendChangeType: TrendChangeType\n) {\n  return function updateSelected(transaction?: NormalizedTrendsTransaction) {\n    const selectedQueryKey = getSelectedQueryKey(trendChangeType);\n    const query = {\n      ...location.query,\n    };\n    if (!transaction) {\n      delete query[selectedQueryKey];\n    } else {\n      query[selectedQueryKey] = transaction\n        ? `${transaction.transaction}-${transaction.project}`\n        : undefined;\n    }\n    browserHistory.push({\n      pathname: location.pathname,\n      query,\n    });\n\n    trackAdvancedAnalyticsEvent('performance_views.trends.widget_interaction', {\n      organization,\n      widget_type: trendChangeType,\n    });\n  };\n}\n\nenum FilterSymbols {\n  GREATER_THAN_EQUALS = '>=',\n  LESS_THAN_EQUALS = '<=',\n}\n\nfunction handleFilterTransaction(location: Location, transaction: string) {\n  const queryString = decodeScalar(location.query.query);\n  const conditions = new MutableSearch(queryString ?? '');\n\n  conditions.addFilterValues('!transaction', [transaction]);\n\n  const query = conditions.formatString();\n\n  browserHistory.push({\n    pathname: location.pathname,\n    query: {\n      ...location.query,\n      query: String(query).trim(),\n    },\n  });\n}\n\nfunction handleFilterDuration(\n  location: Location,\n  organization: Organization,\n  value: number,\n  symbol: FilterSymbols,\n  trendChangeType: TrendChangeType,\n  projects: Project[],\n  projectIds: Readonly<number[]>\n) {\n  const durationTag = getCurrentTrendParameter(location, projects, projectIds).column;\n  const queryString = decodeScalar(location.query.query);\n  const conditions = new MutableSearch(queryString ?? '');\n\n  const existingValues = conditions.getFilterValues(durationTag);\n  const alternateSymbol = symbol === FilterSymbols.GREATER_THAN_EQUALS ? '>' : '<';\n\n  if (existingValues) {\n    existingValues.forEach(existingValue => {\n      if (existingValue.startsWith(symbol) || existingValue.startsWith(alternateSymbol)) {\n        conditions.removeFilterValue(durationTag, existingValue);\n      }\n    });\n  }\n\n  conditions.addFilterValues(durationTag, [`${symbol}${value}`]);\n\n  const query = conditions.formatString();\n\n  browserHistory.push({\n    pathname: location.pathname,\n    query: {\n      ...location.query,\n      query: String(query).trim(),\n    },\n  });\n\n  trackAdvancedAnalyticsEvent('performance_views.trends.change_duration', {\n    organization,\n    widget_type: getChartTitle(trendChangeType),\n    value: `${symbol}${value}`,\n  });\n}\n\nfunction ChangedTransactions(props: Props) {\n  const {\n    location,\n    trendChangeType,\n    previousTrendFunction,\n    previousTrendColumn,\n    organization,\n    projects,\n    setError,\n  } = props;\n  const api = useApi();\n\n  const trendView = props.trendView.clone();\n  const chartTitle = getChartTitle(trendChangeType);\n  modifyTrendView(trendView, location, trendChangeType, projects);\n\n  const onCursor = makeTrendsCursorHandler(trendChangeType);\n  const cursor = decodeScalar(location.query[trendCursorNames[trendChangeType]]);\n  const paginationAnalyticsEvent = (direction: string) => {\n    trackAdvancedAnalyticsEvent('performance_views.trends.widget_pagination', {\n      organization,\n      direction,\n      widget_type: getChartTitle(trendChangeType),\n    });\n  };\n\n  return (\n    <TrendsDiscoverQuery\n      eventView={trendView}\n      orgSlug={organization.slug}\n      location={location}\n      trendChangeType={trendChangeType}\n      cursor={cursor}\n      limit={5}\n      setError={error => setError(error?.message)}\n    >\n      {({isLoading, trendsData, pageLinks}) => {\n        const trendFunction = getCurrentTrendFunction(location);\n        const trendParameter = getCurrentTrendParameter(\n          location,\n          projects,\n          trendView.project\n        );\n        const events = normalizeTrends(\n          (trendsData && trendsData.events && trendsData.events.data) || []\n        );\n        const selectedTransaction = getSelectedTransaction(\n          location,\n          trendChangeType,\n          events\n        );\n\n        const statsData = trendsData?.stats || {};\n        const transactionsList = events && events.slice ? events.slice(0, 5) : [];\n\n        const currentTrendFunction =\n          isLoading && previousTrendFunction\n            ? previousTrendFunction\n            : trendFunction.field;\n\n        const currentTrendColumn =\n          isLoading && previousTrendColumn ? previousTrendColumn : trendParameter.column;\n\n        const titleTooltipContent = t(\n          'This compares the baseline (%s) of the past with the present.',\n          trendFunction.legendLabel\n        );\n\n        return (\n          <TransactionsListContainer data-test-id=\"changed-transactions\">\n            <TrendsTransactionPanel>\n              <StyledHeaderTitleLegend>\n                {chartTitle}\n                <QuestionTooltip size=\"sm\" position=\"top\" title={titleTooltipContent} />\n              </StyledHeaderTitleLegend>\n              {isLoading ? (\n                <LoadingIndicator\n                  style={{\n                    margin: '237px auto',\n                  }}\n                />\n              ) : (\n                <Fragment>\n                  {transactionsList.length ? (\n                    <Fragment>\n                      <ChartContainer>\n                        <Chart\n                          statsData={statsData}\n                          query={trendView.query}\n                          project={trendView.project}\n                          environment={trendView.environment}\n                          start={trendView.start}\n                          end={trendView.end}\n                          statsPeriod={trendView.statsPeriod}\n                          transaction={selectedTransaction}\n                          isLoading={isLoading}\n                          {...props}\n                        />\n                      </ChartContainer>\n                      {transactionsList.map((transaction, index) => (\n                        <TrendsListItem\n                          api={api}\n                          currentTrendFunction={currentTrendFunction}\n                          currentTrendColumn={currentTrendColumn}\n                          trendView={props.trendView}\n                          organization={organization}\n                          transaction={transaction}\n                          key={transaction.transaction}\n                          index={index}\n                          trendChangeType={trendChangeType}\n                          transactions={transactionsList}\n                          location={location}\n                          projects={projects}\n                          statsData={statsData}\n                          handleSelectTransaction={handleChangeSelected(\n                            location,\n                            organization,\n                            trendChangeType\n                          )}\n                        />\n                      ))}\n                    </Fragment>\n                  ) : (\n                    <StyledEmptyStateWarning small>\n                      {t('No results')}\n                    </StyledEmptyStateWarning>\n                  )}\n                </Fragment>\n              )}\n            </TrendsTransactionPanel>\n            <Pagination\n              pageLinks={pageLinks}\n              onCursor={onCursor}\n              paginationAnalyticsEvent={paginationAnalyticsEvent}\n            />\n          </TransactionsListContainer>\n        );\n      }}\n    </TrendsDiscoverQuery>\n  );\n}\n\ntype TrendsListItemProps = {\n  api: Client;\n  currentTrendColumn: string;\n  currentTrendFunction: string;\n  handleSelectTransaction: (transaction: NormalizedTrendsTransaction) => void;\n  index: number;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  statsData: TrendsStats;\n  transaction: NormalizedTrendsTransaction;\n  transactions: NormalizedTrendsTransaction[];\n  trendChangeType: TrendChangeType;\n  trendView: TrendView;\n};\n\nfunction TrendsListItem(props: TrendsListItemProps) {\n  const {\n    transaction,\n    transactions,\n    trendChangeType,\n    currentTrendFunction,\n    currentTrendColumn,\n    index,\n    location,\n    organization,\n    projects,\n    handleSelectTransaction,\n    trendView,\n  } = props;\n  const color = trendToColor[trendChangeType].default;\n\n  const selectedTransaction = getSelectedTransaction(\n    location,\n    trendChangeType,\n    transactions\n  );\n  const isSelected = selectedTransaction === transaction;\n\n  const project = projects.find(\n    ({slug}) => slug === transaction.project\n  ) as AvatarProject;\n\n  const currentPeriodValue = transaction.aggregate_range_2;\n  const previousPeriodValue = transaction.aggregate_range_1;\n\n  const absolutePercentChange = formatPercentage(\n    Math.abs(transaction.trend_percentage - 1),\n    0\n  );\n\n  const previousDuration = getDuration(\n    previousPeriodValue / 1000,\n    previousPeriodValue < 1000 && previousPeriodValue > 10 ? 0 : 2\n  );\n  const currentDuration = getDuration(\n    currentPeriodValue / 1000,\n    currentPeriodValue < 1000 && currentPeriodValue > 10 ? 0 : 2\n  );\n\n  const percentChangeExplanation = t(\n    'Over this period, the %s for %s has %s %s from %s to %s',\n    currentTrendFunction,\n    currentTrendColumn,\n    trendChangeType === TrendChangeType.IMPROVED ? t('decreased') : t('increased'),\n    absolutePercentChange,\n    previousDuration,\n    currentDuration\n  );\n\n  const longestPeriodValue =\n    trendChangeType === TrendChangeType.IMPROVED\n      ? previousPeriodValue\n      : currentPeriodValue;\n  const longestDuration =\n    trendChangeType === TrendChangeType.IMPROVED ? previousDuration : currentDuration;\n\n  return (\n    <ListItemContainer data-test-id={'trends-list-item-' + trendChangeType}>\n      <ItemRadioContainer color={color}>\n        <Tooltip\n          title={\n            <TooltipContent>\n              <span>{t('Total Events')}</span>\n              <span>\n                <Count value={transaction.count_range_1} />\n                <StyledIconArrow direction=\"right\" size=\"xs\" />\n                <Count value={transaction.count_range_2} />\n              </span>\n            </TooltipContent>\n          }\n          disableForVisualTest // Disabled tooltip in snapshots because of overlap order issues.\n        >\n          <RadioLineItem index={index} role=\"radio\">\n            <Radio\n              checked={isSelected}\n              onChange={() => handleSelectTransaction(transaction)}\n            />\n          </RadioLineItem>\n        </Tooltip>\n      </ItemRadioContainer>\n      <TransactionSummaryLink {...props} />\n      <ItemTransactionPercentage>\n        <Tooltip title={percentChangeExplanation}>\n          <Fragment>\n            {trendChangeType === TrendChangeType.REGRESSION ? '+' : ''}\n            {formatPercentage(transaction.trend_percentage - 1, 0)}\n          </Fragment>\n        </Tooltip>\n      </ItemTransactionPercentage>\n      <DropdownLink\n        caret={false}\n        anchorRight\n        title={\n          <StyledButton\n            size=\"xs\"\n            icon={<IconEllipsis data-test-id=\"trends-item-action\" size=\"xs\" />}\n            aria-label={t('Actions')}\n          />\n        }\n      >\n        <MenuItem\n          onClick={() =>\n            handleFilterDuration(\n              location,\n              organization,\n              longestPeriodValue,\n              FilterSymbols.LESS_THAN_EQUALS,\n              trendChangeType,\n              projects,\n              trendView.project\n            )\n          }\n        >\n          <MenuAction>{t('Show \\u2264 %s', longestDuration)}</MenuAction>\n        </MenuItem>\n        <MenuItem\n          onClick={() =>\n            handleFilterDuration(\n              location,\n              organization,\n              longestPeriodValue,\n              FilterSymbols.GREATER_THAN_EQUALS,\n              trendChangeType,\n              projects,\n              trendView.project\n            )\n          }\n        >\n          <MenuAction>{t('Show \\u2265 %s', longestDuration)}</MenuAction>\n        </MenuItem>\n        <MenuItem\n          onClick={() => handleFilterTransaction(location, transaction.transaction)}\n        >\n          <MenuAction>{t('Hide from list')}</MenuAction>\n        </MenuItem>\n      </DropdownLink>\n      <ItemTransactionDurationChange>\n        {project && (\n          <Tooltip title={transaction.project}>\n            <IdBadge avatarSize={16} project={project} hideName />\n          </Tooltip>\n        )}\n        <CompareDurations {...props} />\n      </ItemTransactionDurationChange>\n      <ItemTransactionStatus color={color}>\n        <ValueDelta {...props} />\n      </ItemTransactionStatus>\n    </ListItemContainer>\n  );\n}\n\nexport const CompareDurations = ({\n  transaction,\n}: {\n  transaction: TrendsListItemProps['transaction'];\n}) => {\n  const {fromSeconds, toSeconds, showDigits} = transformDeltaSpread(\n    transaction.aggregate_range_1,\n    transaction.aggregate_range_2\n  );\n\n  return (\n    <DurationChange>\n      <Duration seconds={fromSeconds} fixedDigits={showDigits ? 1 : 0} abbreviation />\n      <StyledIconArrow direction=\"right\" size=\"xs\" />\n      <Duration seconds={toSeconds} fixedDigits={showDigits ? 1 : 0} abbreviation />\n    </DurationChange>\n  );\n};\n\nconst ValueDelta = ({transaction, trendChangeType}: TrendsListItemProps) => {\n  const {seconds, fixedDigits, changeLabel} = transformValueDelta(\n    transaction.trend_difference,\n    trendChangeType\n  );\n\n  return (\n    <span>\n      <Duration seconds={seconds} fixedDigits={fixedDigits} abbreviation /> {changeLabel}\n    </span>\n  );\n};\n\ntype TransactionSummaryLinkProps = TrendsListItemProps & {};\n\nconst TransactionSummaryLink = (props: TransactionSummaryLinkProps) => {\n  const {\n    organization,\n    trendView: eventView,\n    transaction,\n    projects,\n    currentTrendFunction,\n    currentTrendColumn,\n  } = props;\n  const summaryView = eventView.clone();\n  const projectID = getTrendProjectId(transaction, projects);\n  const target = transactionSummaryRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: String(transaction.transaction),\n    query: summaryView.generateQueryStringObject(),\n    projectID,\n    display: DisplayModes.TREND,\n    trendFunction: currentTrendFunction,\n    trendColumn: currentTrendColumn,\n  });\n\n  return (\n    <ItemTransactionName to={target} data-test-id=\"item-transaction-name\">\n      {transaction.transaction}\n    </ItemTransactionName>\n  );\n};\n\nconst TransactionsListContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TrendsTransactionPanel = styled(Panel)`\n  margin: 0;\n  flex-grow: 1;\n`;\n\nconst ChartContainer = styled('div')`\n  padding: ${space(3)};\n`;\n\nconst StyledHeaderTitleLegend = styled(HeaderTitleLegend)`\n  border-radius: ${p => p.theme.borderRadius};\n  margin: ${space(2)} ${space(3)};\n`;\n\nconst StyledButton = styled(Button)`\n  vertical-align: middle;\n`;\n\nconst MenuAction = styled('div')<{['data-test-id']?: string}>`\n  white-space: nowrap;\n  color: ${p => p.theme.textColor};\n`;\n\nMenuAction.defaultProps = {\n  'data-test-id': 'menu-action',\n};\n\nconst StyledEmptyStateWarning = styled(EmptyStateWarning)`\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst ListItemContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 24px auto 100px 30px;\n  grid-template-rows: repeat(2, auto);\n  grid-column-gap: ${space(1)};\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1)} ${space(2)};\n`;\n\nconst ItemRadioContainer = styled('div')`\n  grid-row: 1/3;\n  input {\n    cursor: pointer;\n  }\n  input:checked::after {\n    background-color: ${p => p.color};\n  }\n`;\n\nconst ItemTransactionName = styled(Link)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-right: ${space(1)};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst ItemTransactionDurationChange = styled('div')`\n  display: flex;\n  align-items: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst DurationChange = styled('span')`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n`;\n\nconst ItemTransactionPercentage = styled('div')`\n  text-align: right;\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst ItemTransactionStatus = styled('div')`\n  color: ${p => p.color};\n  text-align: right;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst TooltipContent = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  margin: 0 ${space(1)};\n`;\n\nexport default withProjects(withOrganization(ChangedTransactions));\n","import {browserHistory} from 'react-router';\nimport {Theme, useTheme} from '@emotion/react';\nimport type {LegendComponentOption} from 'echarts';\n\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport {\n  LineChart,\n  LineChartProps,\n  LineChartSeries,\n} from 'sentry/components/charts/lineChart';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport {EventsStatsData, OrganizationSummary, Project} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport {\n  axisLabelFormatter,\n  getDurationUnit,\n  tooltipFormatter,\n} from 'sentry/utils/discover/charts';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {decodeList} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useRouter from 'sentry/utils/useRouter';\n\nimport {ViewProps} from '../types';\n\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendFunctionField,\n  TrendsStats,\n} from './types';\nimport {\n  generateTrendFunctionAsString,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getUnselectedSeries,\n  transformEventStatsSmoothed,\n  trendToColor,\n} from './utils';\n\ntype Props = ViewProps & {\n  isLoading: boolean;\n  organization: OrganizationSummary;\n  projects: Project[];\n  statsData: TrendsStats;\n  trendChangeType: TrendChangeType;\n  disableLegend?: boolean;\n  disableXAxis?: boolean;\n  grid?: LineChartProps['grid'];\n  height?: number;\n  transaction?: NormalizedTrendsTransaction;\n  trendFunctionField?: TrendFunctionField;\n};\n\nfunction transformEventStats(data: EventsStatsData, seriesName?: string): Series[] {\n  return [\n    {\n      seriesName: seriesName || 'Current',\n      data: data.map(([timestamp, countsForTimestamp]) => ({\n        name: timestamp * 1000,\n        value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),\n      })),\n    },\n  ];\n}\n\nfunction getLegend(trendFunction: string): LegendComponentOption {\n  return {\n    right: 10,\n    top: 0,\n    itemGap: 12,\n    align: 'left',\n    data: [\n      {\n        name: 'Baseline',\n        icon: 'path://M180 1000 l0 -40 200 0 200 0 0 40 0 40 -200 0 -200 0 0 -40z, M810 1000 l0 -40 200 0 200 0 0 40 0 40 -200 0 -200 0 0 -40zm, M1440 1000 l0 -40 200 0 200 0 0 40 0 40 -200 0 -200 0 0 -40z',\n      },\n      {\n        name: 'Releases',\n      },\n      {\n        name: trendFunction,\n      },\n    ],\n  };\n}\n\nfunction getIntervalLine(\n  theme: Theme,\n  series: Series[],\n  intervalRatio: number,\n  transaction?: NormalizedTrendsTransaction\n): LineChartSeries[] {\n  if (!transaction || !series.length || !series[0].data || !series[0].data.length) {\n    return [];\n  }\n\n  const seriesStart = parseInt(series[0].data[0].name as string, 10);\n  const seriesEnd = parseInt(series[0].data.slice(-1)[0].name as string, 10);\n\n  if (seriesEnd < seriesStart) {\n    return [];\n  }\n\n  const periodLine: LineChartSeries = {\n    data: [],\n    color: theme.textColor,\n    markLine: {\n      data: [],\n      label: {},\n      lineStyle: {\n        color: theme.textColor,\n        type: 'dashed',\n        width: 1,\n      },\n      symbol: ['none', 'none'],\n      tooltip: {\n        show: false,\n      },\n    },\n    seriesName: 'Baseline',\n  };\n\n  const periodLineLabel = {\n    fontSize: 11,\n    show: true,\n    color: theme.textColor,\n    silent: true,\n  };\n\n  const previousPeriod = {\n    ...periodLine,\n    markLine: {...periodLine.markLine},\n    seriesName: 'Baseline',\n  };\n  const currentPeriod = {\n    ...periodLine,\n    markLine: {...periodLine.markLine},\n    seriesName: 'Baseline',\n  };\n  const periodDividingLine = {\n    ...periodLine,\n    markLine: {...periodLine.markLine},\n    seriesName: 'Period split',\n  };\n\n  const seriesDiff = seriesEnd - seriesStart;\n  const seriesLine = seriesDiff * intervalRatio + seriesStart;\n\n  previousPeriod.markLine.data = [\n    [\n      {value: 'Past', coord: [seriesStart, transaction.aggregate_range_1]},\n      {coord: [seriesLine, transaction.aggregate_range_1]},\n    ],\n  ];\n  previousPeriod.markLine.tooltip = {\n    formatter: () => {\n      return [\n        '<div class=\"tooltip-series tooltip-series-solo\">',\n        '<div>',\n        `<span class=\"tooltip-label\"><strong>${t('Past Baseline')}</strong></span>`,\n        // p50() coerces the axis to be time based\n        tooltipFormatter(transaction.aggregate_range_1, 'duration'),\n        '</div>',\n        '</div>',\n        '<div class=\"tooltip-arrow\"></div>',\n      ].join('');\n    },\n  };\n  currentPeriod.markLine.data = [\n    [\n      {value: 'Present', coord: [seriesLine, transaction.aggregate_range_2]},\n      {coord: [seriesEnd, transaction.aggregate_range_2]},\n    ],\n  ];\n  currentPeriod.markLine.tooltip = {\n    formatter: () => {\n      return [\n        '<div class=\"tooltip-series tooltip-series-solo\">',\n        '<div>',\n        `<span class=\"tooltip-label\"><strong>${t('Present Baseline')}</strong></span>`,\n        // p50() coerces the axis to be time based\n        tooltipFormatter(transaction.aggregate_range_2, 'duration'),\n        '</div>',\n        '</div>',\n        '<div class=\"tooltip-arrow\"></div>',\n      ].join('');\n    },\n  };\n  periodDividingLine.markLine = {\n    data: [\n      {\n        xAxis: seriesLine,\n      },\n    ],\n    label: {show: false},\n    lineStyle: {\n      color: theme.textColor,\n      type: 'solid',\n      width: 2,\n    },\n    symbol: ['none', 'none'],\n    tooltip: {\n      show: false,\n    },\n    silent: true,\n  };\n\n  previousPeriod.markLine.label = {\n    ...periodLineLabel,\n    formatter: 'Past',\n    position: 'insideStartBottom',\n  };\n  currentPeriod.markLine.label = {\n    ...periodLineLabel,\n    formatter: 'Present',\n    position: 'insideEndBottom',\n  };\n\n  const additionalLineSeries = [previousPeriod, currentPeriod, periodDividingLine];\n  return additionalLineSeries;\n}\n\nexport function Chart({\n  trendChangeType,\n  statsPeriod,\n  transaction,\n  statsData,\n  isLoading,\n  start: propsStart,\n  end: propsEnd,\n  trendFunctionField,\n  disableXAxis,\n  disableLegend,\n  grid,\n  height,\n  projects,\n  project,\n}: Props) {\n  const location = useLocation();\n  const router = useRouter();\n  const theme = useTheme();\n\n  const handleLegendSelectChanged = legendChange => {\n    const {selected} = legendChange;\n    const unselected = Object.keys(selected).filter(key => !selected[key]);\n\n    const query = {\n      ...location.query,\n    };\n\n    const queryKey = getUnselectedSeries(trendChangeType);\n    query[queryKey] = unselected;\n\n    const to = {\n      ...location,\n      query,\n    };\n    browserHistory.push(to);\n  };\n\n  const lineColor = trendToColor[trendChangeType || ''];\n\n  const events =\n    statsData && transaction?.project && transaction?.transaction\n      ? statsData[[transaction.project, transaction.transaction].join(',')]\n      : undefined;\n  const data = events?.data ?? [];\n\n  const trendFunction = getCurrentTrendFunction(location, trendFunctionField);\n  const trendParameter = getCurrentTrendParameter(location, projects, project);\n  const chartLabel = generateTrendFunctionAsString(\n    trendFunction.field,\n    trendParameter.column\n  );\n  const results = transformEventStats(data, chartLabel);\n  const {smoothedResults, minValue, maxValue} = transformEventStatsSmoothed(\n    results,\n    chartLabel\n  );\n\n  const start = propsStart ? getUtcToLocalDateObject(propsStart) : null;\n  const end = propsEnd ? getUtcToLocalDateObject(propsEnd) : null;\n  const {utc} = normalizeDateTimeParams(location.query);\n\n  const seriesSelection = decodeList(\n    location.query[getUnselectedSeries(trendChangeType)]\n  ).reduce((selection, metric) => {\n    selection[metric] = false;\n    return selection;\n  }, {});\n  const legend: LegendComponentOption = disableLegend\n    ? {show: false}\n    : {\n        ...getLegend(chartLabel),\n        selected: seriesSelection,\n      };\n\n  const loading = isLoading;\n  const reloading = isLoading;\n\n  const yMax = Math.max(\n    maxValue,\n    transaction?.aggregate_range_2 || 0,\n    transaction?.aggregate_range_1 || 0\n  );\n  const yMin = Math.min(\n    minValue,\n    transaction?.aggregate_range_1 || Number.MAX_SAFE_INTEGER,\n    transaction?.aggregate_range_2 || Number.MAX_SAFE_INTEGER\n  );\n\n  const smoothedSeries = smoothedResults\n    ? smoothedResults.map(values => {\n        return {\n          ...values,\n          color: lineColor.default,\n          lineStyle: {\n            opacity: 1,\n          },\n        };\n      })\n    : [];\n\n  const intervalSeries = getIntervalLine(theme, smoothedResults || [], 0.5, transaction);\n\n  const yDiff = yMax - yMin;\n  const yMargin = yDiff * 0.1;\n  const series = [...smoothedSeries, ...intervalSeries];\n\n  const durationUnit = getDurationUnit(series);\n\n  const chartOptions: Omit<LineChartProps, 'series'> = {\n    tooltip: {\n      valueFormatter: (value, seriesName) => {\n        return tooltipFormatter(value, aggregateOutputType(seriesName));\n      },\n    },\n    yAxis: {\n      min: Math.max(0, yMin - yMargin),\n      max: yMax + yMargin,\n      minInterval: durationUnit,\n      axisLabel: {\n        color: theme.chartLabel,\n        formatter: (value: number) =>\n          axisLabelFormatter(value, 'duration', undefined, durationUnit),\n      },\n    },\n  };\n\n  return (\n    <ChartZoom\n      router={router}\n      period={statsPeriod}\n      start={start}\n      end={end}\n      utc={utc === 'true'}\n    >\n      {zoomRenderProps => {\n        return (\n          <TransitionChart loading={loading} reloading={reloading}>\n            <TransparentLoadingMask visible={reloading} />\n            {getDynamicText({\n              value: (\n                <LineChart\n                  height={height}\n                  {...zoomRenderProps}\n                  {...chartOptions}\n                  onLegendSelectChanged={handleLegendSelectChanged}\n                  series={series}\n                  seriesOptions={{\n                    showSymbol: false,\n                  }}\n                  legend={legend}\n                  toolBox={{\n                    show: false,\n                  }}\n                  grid={\n                    grid ?? {\n                      left: '10px',\n                      right: '10px',\n                      top: '40px',\n                      bottom: '0px',\n                    }\n                  }\n                  xAxis={disableXAxis ? {show: false} : undefined}\n                />\n              ),\n              fixed: 'Duration Chart',\n            })}\n          </TransitionChart>\n        );\n      }}\n    </ChartZoom>\n  );\n}\n\nexport default Chart;\n"],"names":["FilterSymbols","getChartTitle","trendChangeType","TrendChangeType","t","Error","getSelectedTransaction","location","transactions","queryKey","getSelectedQueryKey","selectedTransactionName","decodeScalar","query","find","transaction","project","length","undefined","handleChangeSelected","organization","selectedQueryKey","browserHistory","pathname","trackAdvancedAnalyticsEvent","widget_type","handleFilterDuration","value","symbol","projects","projectIds","durationTag","getCurrentTrendParameter","column","queryString","conditions","MutableSearch","existingValues","getFilterValues","alternateSymbol","GREATER_THAN_EQUALS","forEach","existingValue","startsWith","removeFilterValue","addFilterValues","formatString","String","trim","ChangedTransactions","props","previousTrendFunction","previousTrendColumn","setError","api","useApi","trendView","clone","chartTitle","modifyTrendView","onCursor","cursor","path","cursorQuery","improvedCursor","regressionCursor","makeTrendsCursorHandler","trendCursorNames","paginationAnalyticsEvent","direction","eventView","orgSlug","slug","limit","error","message","isLoading","trendsData","pageLinks","trendFunction","getCurrentTrendFunction","trendParameter","events","normalizeTrends","data","selectedTransaction","statsData","stats","transactionsList","slice","currentTrendFunction","field","currentTrendColumn","titleTooltipContent","legendLabel","TransactionsListContainer","TrendsTransactionPanel","StyledHeaderTitleLegend","size","position","title","style","margin","Fragment","ChartContainer","environment","start","end","statsPeriod","map","index","TrendsListItem","handleSelectTransaction","StyledEmptyStateWarning","small","color","trendToColor","default","isSelected","currentPeriodValue","aggregate_range_2","previousPeriodValue","aggregate_range_1","absolutePercentChange","formatPercentage","Math","abs","trend_percentage","previousDuration","getDuration","currentDuration","percentChangeExplanation","longestPeriodValue","longestDuration","ListItemContainer","ItemRadioContainer","TooltipContent","count_range_1","StyledIconArrow","count_range_2","disableForVisualTest","role","checked","onChange","TransactionSummaryLink","ItemTransactionPercentage","caret","anchorRight","StyledButton","icon","onClick","LESS_THAN_EQUALS","MenuAction","handleFilterTransaction","ItemTransactionDurationChange","avatarSize","hideName","CompareDurations","ItemTransactionStatus","ValueDelta","fromSeconds","toSeconds","showDigits","transformDeltaSpread","DurationChange","seconds","fixedDigits","abbreviation","changeLabel","transformValueDelta","trend_difference","summaryView","projectID","getTrendProjectId","target","transactionSummaryRouteWithQuery","generateQueryStringObject","display","DisplayModes","trendColumn","ItemTransactionName","to","Panel","space","HeaderTitleLegend","p","theme","borderRadius","Button","textColor","defaultProps","EmptyStateWarning","border","Link","fontSizeMedium","overflowEllipsis","fontSizeSmall","gray300","IconArrow","withProjects","withOrganization","getLegend","right","top","itemGap","align","name","Chart","propsStart","propsEnd","trendFunctionField","disableXAxis","disableLegend","grid","height","useLocation","router","useRouter","useTheme","handleLegendSelectChanged","legendChange","selected","unselected","Object","keys","filter","key","getUnselectedSeries","lineColor","join","chartLabel","generateTrendFunctionAsString","results","seriesName","timestamp","countsForTimestamp","reduce","acc","count","transformEventStats","smoothedResults","minValue","maxValue","transformEventStatsSmoothed","getUtcToLocalDateObject","utc","normalizeDateTimeParams","seriesSelection","decodeList","selection","metric","legend","show","loading","reloading","yMax","max","yMin","min","Number","MAX_SAFE_INTEGER","smoothedSeries","values","lineStyle","opacity","intervalSeries","series","intervalRatio","seriesStart","parseInt","seriesEnd","periodLine","markLine","label","type","width","tooltip","periodLineLabel","fontSize","silent","previousPeriod","currentPeriod","periodDividingLine","seriesLine","coord","formatter","tooltipFormatter","xAxis","getIntervalLine","yMargin","durationUnit","getDurationUnit","chartOptions","valueFormatter","aggregateOutputType","yAxis","minInterval","axisLabel","axisLabelFormatter","period","zoomRenderProps","visible","getDynamicText","onLegendSelectChanged","seriesOptions","showSymbol","toolBox","left","bottom","fixed"],"sourceRoot":""}