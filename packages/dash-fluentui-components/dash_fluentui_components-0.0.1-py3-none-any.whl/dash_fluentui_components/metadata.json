{
  "src/components/button/Button.tsx": {
    "displayName": "Button",
    "description": "A button triggers an action or event when activated.\n### Layout\n - For dialog boxes and panels, where people are moving through a sequence of screens,\n   right-align buttons with the container.\n - For single-page forms and focused tasks, left-align buttons with the container.\n - Always place the primary button on the left, the secondary button just to the right of it.\n - Show only one primary button that inherits theme color at rest state. If there are more\n   than two buttons with equal priority, all buttons should have neutral backgrounds.\n - Don't use a button to navigate to another place; use a link instead. The exception\n   is in a wizard where \"Back\" and \"Next\" buttons may be used.\n - Don't place the default focus on a button that destroys data. Instead, place the\n   default focus on the button that performs the \"safe act\" and retains the content\n   (such as \"Save\") or cancels the action (such as \"Cancel\").\n### Content\n- Use sentence-style capitalization\u2014only capitalize the first word.\n- Make sure it's clear what will happen when people interact with the button.\n  Be concise; usually a single verb is best. Include a noun if there is any room\n  for interpretation about what the verb means. For example, \"Delete folder\" or \"Create account\".",
    "props": {
      "children": {
        "description": "The children of this component.",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "appearance": {
        "description": "A button can have its content and borders styled for greater emphasis or to be subtle.\n\n - 'secondary' (default): Gives emphasis to the button in such a way that it indicates a secondary action.\n - 'primary': Emphasizes the button as a primary action.\n - 'outline': Removes background styling.\n - 'subtle': Minimizes emphasis to blend into the background until hovered or focused.\n - 'transparent': Removes background and border styling.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'subtle'",
              "computed": false
            },
            {
              "value": "'outline'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'transparent'",
              "computed": false
            }
          ],
          "raw": "\"subtle\" | \"outline\" | \"secondary\" | \"primary\" | \"transparent\""
        }
      },
      "disabled": {
        "description": "Disabled state of button",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "shape": {
        "description": "A button can be rounded, circular, or square.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'circular'",
              "computed": false
            },
            {
              "value": "'square'",
              "computed": false
            },
            {
              "value": "'rounded'",
              "computed": false
            }
          ],
          "raw": "\"circular\" | \"square\" | \"rounded\""
        }
      },
      "size": {
        "description": "A button supports different sizes.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ],
          "raw": "\"small\" | \"medium\" | \"large\""
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "required": false,
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/button/CompoundButton.tsx": {
    "displayName": "CompoundButton",
    "description": "A compound button is a button with an additional slot for secondary textual content.\nSince both primary and secondary textual contents are part of a compound button's name they should be kept concise.\n### Layout\n- For dialog boxes and panels, where people are moving through a sequence of screens,\n  right-align buttons with the container.\n- For single-page forms and focused tasks, left-align buttons with the container.\n- Always place the primary button on the left, the secondary button just to the right of it.\n- Show only one primary button that inherits theme color at rest state. If there are more\n  than two buttons with equal priority, all buttons should have neutral backgrounds.\n- Don't use a button to navigate to another place; use a link instead. The exception\n  is in a wizard where \"Back\" and \"Next\" buttons may be used.\n- Don't place the default focus on a button that destroys data. Instead, place the\n  default focus on the button that performs the \"safe act\" and retains the content\n  (such as \"Save\") or cancels the action (such as \"Cancel\").\n### Content\n- Use sentence-style capitalization\u2014only capitalize the first word.\n- Make sure it's clear what will happen when people interact with the button.\n  Be concise; usually a single verb is best. Include a noun if there is any room\n  for interpretation about what the verb means. For example, \"Delete folder\" or \"Create account\".",
    "props": {
      "children": {
        "description": "The children of this component.",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "secondary_content": {
        "description": "Second line of text that describes the action this button takes.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "appearance": {
        "description": "A button can have its content and borders styled for greater emphasis or to be subtle.\n\n - 'secondary' (default): Gives emphasis to the button in such a way that it indicates a secondary action.\n - 'primary': Emphasizes the button as a primary action.\n - 'outline': Removes background styling.\n - 'subtle': Minimizes emphasis to blend into the background until hovered or focused.\n - 'transparent': Removes background and border styling.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'subtle'",
              "computed": false
            },
            {
              "value": "'outline'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'transparent'",
              "computed": false
            }
          ],
          "raw": "\"subtle\" | \"outline\" | \"secondary\" | \"primary\" | \"transparent\""
        }
      },
      "disabled": {
        "description": "Disabled state of button",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "shape": {
        "description": "A button can be rounded, circular, or square.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'circular'",
              "computed": false
            },
            {
              "value": "'square'",
              "computed": false
            },
            {
              "value": "'rounded'",
              "computed": false
            }
          ],
          "raw": "\"circular\" | \"square\" | \"rounded\""
        }
      },
      "size": {
        "description": "A button supports different sizes.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ],
          "raw": "\"small\" | \"medium\" | \"large\""
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "required": false,
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/button/ToggleButton.tsx": {
    "displayName": "ToggleButton",
    "description": "A button triggers an action or event when activated.\n### Layout\n - For dialog boxes and panels, where people are moving through a sequence of screens,\n   right-align buttons with the container.\n - For single-page forms and focused tasks, left-align buttons with the container.\n - Always place the primary button on the left, the secondary button just to the right of it.\n - Show only one primary button that inherits theme color at rest state. If there are more\n   than two buttons with equal priority, all buttons should have neutral backgrounds.\n - Don't use a button to navigate to another place; use a link instead. The exception\n   is in a wizard where \"Back\" and \"Next\" buttons may be used.\n - Don't place the default focus on a button that destroys data. Instead, place the\n   default focus on the button that performs the \"safe act\" and retains the content\n   (such as \"Save\") or cancels the action (such as \"Cancel\").\n### Content\n- Use sentence-style capitalization\u2014only capitalize the first word.\n- Make sure it's clear what will happen when people interact with the button.\n  Be concise; usually a single verb is best. Include a noun if there is any room\n  for interpretation about what the verb means. For example, \"Delete folder\" or \"Create account\".",
    "props": {
      "children": {
        "description": "The children of this component.",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "appearance": {
        "description": "A button can have its content and borders styled for greater emphasis or to be subtle.\n\n - 'secondary' (default): Gives emphasis to the button in such a way that it indicates a secondary action.\n - 'primary': Emphasizes the button as a primary action.\n - 'outline': Removes background styling.\n - 'subtle': Minimizes emphasis to blend into the background until hovered or focused.\n - 'transparent': Removes background and border styling.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'subtle'",
              "computed": false
            },
            {
              "value": "'outline'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'transparent'",
              "computed": false
            }
          ],
          "raw": "\"subtle\" | \"outline\" | \"secondary\" | \"primary\" | \"transparent\""
        }
      },
      "disabled": {
        "description": "Disabled state of button",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "shape": {
        "description": "A button can be rounded, circular, or square.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'circular'",
              "computed": false
            },
            {
              "value": "'square'",
              "computed": false
            },
            {
              "value": "'rounded'",
              "computed": false
            }
          ],
          "raw": "\"circular\" | \"square\" | \"rounded\""
        }
      },
      "size": {
        "description": "A button supports different sizes.",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ],
          "raw": "\"small\" | \"medium\" | \"large\""
        }
      },
      "checked": {
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "n_clicks": {
        "description": "",
        "required": false,
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/card/Card.tsx": {
    "displayName": "Card",
    "description": "",
    "props": {
      "appearance": {
        "description": "Sets the appearance of the card.\n- \"filled\": The card will have a shadow, border and background color.\n- \"filled-alternative\": This appearance is similar to filled, but the background color will be a little darker.\n- \"outline\": This appearance is similar to filled, but the background color will be transparent and no shadow applied.\n- \"subtle\": This appearance is similar to filled-alternative, but no border is applied.",
        "required": false,
        "defaultValue": {
          "value": "'filled'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'filled'",
              "computed": false
            },
            {
              "value": "'subtle'",
              "computed": false
            },
            {
              "value": "'outline'",
              "computed": false
            },
            {
              "value": "'filled-alternative'",
              "computed": false
            }
          ],
          "raw": "\"filled\" | \"subtle\" | \"outline\" | \"filled-alternative\""
        }
      },
      "orientation": {
        "description": "Defines the orientation of the card.",
        "required": false,
        "defaultValue": {
          "value": "'vertical'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ],
          "raw": "\"horizontal\" | \"vertical\""
        }
      },
      "size": {
        "description": "Controls the card's border radius and padding between inner elements.",
        "required": false,
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ],
          "raw": "\"small\" | \"medium\" | \"large\""
        }
      },
      "selected": {
        "description": "Defines the controlled selected state of the card.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "show_loading": {
        "description": "Denotes wether a loading bar should be displayed when content is loading.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "loading_state": {
        "description": "Object that holds the loading state object coming from dash-renderer",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "description": "Determines if the component is loading or not",
              "required": true,
              "name": "bool",
              "raw": "boolean"
            },
            "prop_name": {
              "description": "Holds which property is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "component_name": {
              "description": "Holds the name of the component that is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "DashLoadingState"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "children": {
        "description": "",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      }
    },
    "isContext": false
  },
  "src/components/checkbox/Checkbox.tsx": {
    "displayName": "Checkbox",
    "description": "Checkboxes give people a way to select one or more items from a group,\nor switch between two mutually exclusive options (checked or unchecked).",
    "props": {
      "checked": {
        "description": "Checked state.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "any",
          "raw": "boolean | \"mixed\""
        }
      },
      "disabled": {
        "description": "Disabled state of button",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "label": {
        "description": "Label to display next to the checkbox.",
        "required": false,
        "defaultValue": {
          "value": "'Checkbox'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "label_position": {
        "description": "The position of the label relative to the checkbox indicator.",
        "required": false,
        "defaultValue": {
          "value": "'after'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'before'",
              "computed": false
            },
            {
              "value": "'after'",
              "computed": false
            }
          ],
          "raw": "\"before\" | \"after\""
        }
      },
      "shape": {
        "description": "The shape of the checkbox indicator.\n\nThe circular variant is only recommended to be used in a tasks-style UI (checklist),\nsince it otherwise could be confused for a RadioItem.",
        "required": false,
        "defaultValue": {
          "value": "'square'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'circular'",
              "computed": false
            },
            {
              "value": "'square'",
              "computed": false
            }
          ],
          "raw": "\"circular\" | \"square\""
        }
      },
      "size": {
        "description": "The size of the checkbox indicator.",
        "required": false,
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ],
          "raw": "\"medium\" | \"large\""
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/date_picker/DatePicker.tsx": {
    "displayName": "DatePicker",
    "description": "## Overview\nThe DatePicker component enables a user to pick a date value.",
    "props": {
      "label": {
        "description": "Text displayed inside the button",
        "required": false,
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "date": {
        "description": "Specifies the starting date for the component,\nbest practice is to pass value via datetime object",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "placeholder": {
        "description": "A string value to be displayed if no date is selected.",
        "required": false,
        "defaultValue": {
          "value": "'Select date.'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "disabled": {
        "description": "If True, no dates can be selected.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "min_date_allowed": {
        "description": "Specifies the lowest selectable date for the component.\nAccepts datetime.datetime objects or strings in the format 'YYYY-MM-DD'",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "max_date_allowed": {
        "description": "Specifies the highest selectable date for the component.\nAccepts datetime.datetime objects or strings in the format 'YYYY-MM-DD'",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "show_week_numbers": {
        "description": "Whether the calendar should show the week number (weeks 1 to 53) before each week row",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "show_month_picker": {
        "description": "Whether the month picker is shown beside the day picker or hidden.",
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "allow_text_input": {
        "description": "Whether the DatePicker allows input a date string directly or not.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "borderless": {
        "description": "Determines if DatePicker has a border.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "loading_state": {
        "description": "Object that holds the loading state object coming from dash-renderer",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "description": "Determines if the component is loading or not",
              "required": true,
              "name": "bool",
              "raw": "boolean"
            },
            "prop_name": {
              "description": "Holds which property is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "component_name": {
              "description": "Holds the name of the component that is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "DashLoadingState"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/dialog/Dialog.tsx": {
    "displayName": "Dialog",
    "description": "`Dialog` is a window overlaid on either the primary window or another dialog window. Windows\nunder a modal dialog are inert. That is, users cannot interact with content outside an active\ndialog window. Inert content outside an active dialog is typically visually obscured or\ndimmed so it is difficult to discern, and in some implementations, attempts to interact\nwith the inert content cause the dialog to close.\n### Do\n- Dialog boxes consist of a header (`DialogTitle`), content (`DialogSurface`), and footer (`DialogActions`),\n  which should all be included inside a body (DialogBody).\n- Validate that people\u2019s entries are acceptable before closing the dialog. Show an inline validation error\n  near the field they must correct.\n- Modal dialogs should be used very sparingly\u2014only when it\u2019s critical that people make a choice or provide\n  information before they can proceed. Thee dialogs are generally used for irreversible or potentially\n  destructive tasks. They\u2019re typically paired with an backdrop without a light dismiss.\n- Add a aria-describedby attribute on DialogSurface pointing to the dialog content on short confirmation like dialogs.\n### Don't\n- Don't use more than three buttons between `DialogActions`.\n- Don't open a `Dialog` from a `Dialog`\n- Don't use a `Dialog` with no focusable elements",
    "props": {
      "children": {
        "description": "Can contain two children including \n{@link \nDialogTrigger \n}\n and \n{@link \nDialogSurface \n}\n.\nAlternatively can only contain \n{@link \nDialogSurface \n}\n if using trigger outside dialog, or controlling state",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "title": {
        "description": "Title displayed in the Dialog header",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "trigger": {
        "description": "Usually a button component o.a. If the state is not controlled (externally managed), clicking\nthis component will open the dialog. This component will also be rendered when the dialog is not open.",
        "required": false,
        "type": {
          "name": "node",
          "raw": "Element"
        }
      },
      "actions": {
        "description": "",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "trigger_action": {
        "description": "",
        "required": false,
        "type": {
          "name": "node",
          "raw": "Element"
        }
      },
      "modal_type": {
        "description": "Dialog variations.\n\n- `modal`: When this type of dialog is open, the rest of the page is dimmed out and cannot be interacted with.\n  The tab sequence is kept within the dialog and moving the focus outside the dialog will imply closing it.\n  This is the default type of the component.\n- `non-modal`: When a non-modal dialog is open, the rest of the page is not dimmed out and users can interact\n  with the rest of the page. This also implies that the tab focus can move outside the dialog when it reaches\n  the last focusable element.\n- `alert`: is a special type of modal dialogs that interrupts the user's workflow to communicate an important\n  message or ask for a decision. Unlike a typical modal dialog, the user must take an action through the\n  options given to dismiss the dialog, and it cannot be dismissed through the dimmed background or escape key.",
        "required": false,
        "defaultValue": {
          "value": "'modal'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'alert'",
              "computed": false
            },
            {
              "value": "'modal'",
              "computed": false
            },
            {
              "value": "'non-modal'",
              "computed": false
            }
          ],
          "raw": "\"alert\" | \"modal\" | \"non-modal\""
        }
      },
      "open": {
        "description": "Controls the open state of the dialog",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/components/dropdown/ComboBox.tsx": {
    "displayName": "ComboBox",
    "description": "## Overview\nA ComboBox is a list in which the selected item is always visible, and the others\nare visible on demand by clicking a drop-down button or by typing in the input\n(unless allowFreeform and autoComplete are both false). They are used to simplify\nthe design and make a choice within the UI. When closed, only the selected item is\nvisible. When users click the drop-down button, all the options become visible.\nTo change the value, users open the list and click another value or use the arrow\nkeys (up and down) to select a new value. When collapsed if autoComplete and/or\nallowFreeform are true, the user can select a new value by typing.",
    "props": {
      "disabled": {
        "description": "If true, the dropdown is disabled and can't be clicked on.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "label": {
        "description": "A label to be displayed above the dropdown component.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "placeholder": {
        "description": "A string value to be displayed if no item is selected.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "value": {
        "description": "The value of the input. If `multi` is false (the default)\nthen value is just a string that corresponds to the values\nprovided in the `options` property. If `multi` is true, then\nmultiple values can be selected at once, and `value` is an\narray of items with values corresponding to those in the\n`options` prop.",
        "required": false,
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "number",
              "raw": "number"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string",
                "raw": "string"
              },
              "raw": "string[]"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "number",
                "raw": "number"
              },
              "raw": "number[]"
            }
          ],
          "raw": "string | number | string[] | number[]"
        }
      },
      "options": {
        "description": "Configuration for individual choices within the choice group",
        "required": false,
        "defaultValue": {
          "value": "[]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "description": "",
                "required": true,
                "name": "string",
                "raw": "string"
              },
              "value": {
                "description": "",
                "required": true,
                "name": "union",
                "value": [
                  {
                    "name": "string",
                    "raw": "string"
                  },
                  {
                    "name": "number",
                    "raw": "number"
                  }
                ],
                "raw": "string | number"
              },
              "disabled": {
                "description": "",
                "required": false,
                "name": "bool",
                "raw": "boolean"
              },
              "icon": {
                "description": "",
                "required": false,
                "name": "string",
                "raw": "string"
              }
            },
            "raw": "Option"
          },
          "raw": "Option[]"
        }
      },
      "multi": {
        "description": "If true, the user can select multiple values",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "virtualized": {
        "description": "If true, VirtualizedComboBox is used. Most useful when\nthere are al lot of options to display.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "allow_freeform": {
        "description": "Whether the ComboBox is free form, meaning that the user input\nis not bound to provided options. Defaults to false.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "auto_complete": {
        "description": "Whether the ComboBox auto completes. As the user is inputting text,\nit will be suggested potential matches from the list of options.\nIf the combo box is expanded, this will also scroll to the suggested option,\nand give it a selected style.",
        "required": false,
        "defaultValue": {
          "value": "'on'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'on'",
              "computed": false
            },
            {
              "value": "'off'",
              "computed": false
            }
          ],
          "raw": "\"on\" | \"off\""
        }
      },
      "use_combo_box_as_menu_width": {
        "description": "Whether to use the ComboBoxes width as the menu's width.",
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "persist_menu": {
        "description": "Menu will not be created or destroyed when opened or closed, instead it will be hidden.\nThis will improve perf of the menu opening but could potentially impact overall perf by\nhaving more elements in the dom. Should only be used when perf is important.\nNote: This may increase the amount of time it takes for the comboBox itself to mount.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "loading_state": {
        "description": "Object that holds the loading state object coming from dash-renderer",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "description": "Determines if the component is loading or not",
              "required": true,
              "name": "bool",
              "raw": "boolean"
            },
            "prop_name": {
              "description": "Holds which property is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "component_name": {
              "description": "Holds the name of the component that is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "DashLoadingState"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/dropdown/Dropdown.tsx": {
    "displayName": "Dropdown",
    "description": "## Overview\nA Dropdown is a list in which the selected item is always visible, and the others are visible\non demand by clicking a drop-down button. They are used to simplify the design and make a\nchoice within the UI. When closed, only the selected item is visible. When users click\nthe drop-down button, all the options become visible. To change the value, users open the\nlist and click another value or use the arrow keys (up and down) to select a new value.",
    "props": {
      "label": {
        "description": "A label to be displayed above the dropdown component.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "value": {
        "description": "The value of the input. If `multi` is false (the default)\nthen value is just a string that corresponds to the values\nprovided in the `options` property. If `multi` is true, then\nmultiple values can be selected at once, and `value` is an\narray of items with values corresponding to those in the\n`options` prop.",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string",
            "raw": "string"
          },
          "raw": "string[]"
        }
      },
      "multiselect": {
        "description": "If true, the user can select multiple values",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "options": {
        "description": "Choices to be displayed in the dropdown control. Each item mus have either\nset of keys [`label`, `value`] or [`key`, `text`]. The former is available to\naccept options consistent with Dash's build in Dropdown control, while the\nlatter keys are according to the underlying UI fabric component. Additionally,\na `disabled` and `icon` can be optionally passed. The `icon` property must correspond\nto the name of a Fabric icon: https://developer.microsoft.com/en-us/fabric#/styles/web/icons",
        "required": false,
        "defaultValue": {
          "value": "[]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "description": "The Radio's label.",
                "required": true,
                "name": "string",
                "raw": "string"
              },
              "value": {
                "description": "The Radio's value.",
                "required": true,
                "name": "string",
                "raw": "string"
              },
              "disabled": {
                "description": "denotes if radio is disabled",
                "required": false,
                "name": "bool",
                "raw": "boolean"
              }
            },
            "raw": "Option"
          },
          "raw": "Option[]"
        }
      },
      "placeholder": {
        "description": "A string value to be displayed if no item is selected.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "disabled": {
        "description": "If true, the dropdown is disabled and can't be clicked on.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "size": {
        "description": "Controls the size of the combobox faceplate",
        "required": false,
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ],
          "raw": "\"small\" | \"medium\" | \"large\""
        }
      },
      "appearance": {
        "description": "Controls the colors and borders of the combobox trigger.",
        "required": false,
        "defaultValue": {
          "value": "'outline'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'outline'",
              "computed": false
            },
            {
              "value": "'underline'",
              "computed": false
            },
            {
              "value": "'filled-darker'",
              "computed": false
            },
            {
              "value": "'filled-lighter'",
              "computed": false
            }
          ],
          "raw": "\"outline\" | \"underline\" | \"filled-darker\" | \"filled-lighter\""
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/components/message/MessageBar.tsx": {
    "displayName": "MessageBar",
    "description": "A MessageBar is an area at the top of a primary view that displays relevant status information.\nYou can use a MessageBar to tell the user about a situation that does not require their immediate\nattention and therefore does not need to block other activities.",
    "props": {
      "message": {
        "description": "The message to display in the message bar.",
        "required": false,
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "status": {
        "description": "The severity of the message bar. Available options are:\n'default', 'blocked', 'error', 'warning', 'success'",
        "required": false,
        "defaultValue": {
          "value": "'default'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'blocked'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'success'",
              "computed": false
            }
          ],
          "raw": "\"default\" | \"blocked\" | \"error\" | \"warning\" | \"success\""
        }
      },
      "show": {
        "description": "DEnotes wether the MessageBar should be visible or not.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "is_multiline": {
        "description": "Denotes if the MessageBar contains multi-line text.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/modal/Modal.tsx": {
    "displayName": "Modal",
    "description": "## Overview\nModals are temporary, modal UI overlay that generally provide contextual app information\nor require user confirmation/input, or can be used to advertise new app features.\nIn some cases, Modals block interactions with the web page or application until being\nexplicitly dismissed. They can be used for lightweight creation or edit tasks and simple\nmanagement tasks, or for hosting heavier temporary content.\nFor usage requiring a quick choice from the user, Dialog may be a more appropriate control.",
    "props": {
      "children": {
        "description": "The children of this component",
        "required": true,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "is_open": {
        "description": "Whether modal is currently open.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "is_draggable": {
        "description": "Whether modal can be dragged.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "is_blocking": {
        "description": "Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/panel/Panel.tsx": {
    "displayName": "Panel",
    "description": "## Overview\nPanels are modal UI overlays that provide contextual app information. They often\nrequest some kind of creation or management action from the user. Panels are paired\nwith the Overlay component, also known as a Light Dismiss. The Overlay blocks\ninteractions with the app view until dismissed either through clicking or tapping\non the Overlay or by selecting a close or completion action within the Panel.\n### Examples of experiences that use Panels\n- Member or group list creation or management\n- Document list creation or management\n- Permissions creation or management\n- Settings creation or management\n- Multi-field forms",
    "props": {
      "children": {
        "description": "The content of the panel",
        "required": true,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "type": {
        "description": "Type of the panel determines its size",
        "required": false,
        "defaultValue": {
          "value": "'small'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ],
          "raw": "\"small\" | \"medium\" | \"large\""
        }
      },
      "is_open": {
        "description": "Whether the panel is displayed. If true, will cause panel to stay open even if dismissed.\nIf false, will cause panel to stay hidden. If undefined, will allow the panel to control\nits own visibility through open/dismiss methods.",
        "required": true,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "label": {
        "description": "Text inside the button to trigger the panel",
        "required": false,
        "defaultValue": {
          "value": "'Open panel'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "header_text": {
        "description": "Header text for the Panel.",
        "required": false,
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "light_dismiss": {
        "description": "Whether the panel can be light dismissed by clicking outside the panel",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/pivot/Pivot.tsx": {
    "displayName": "Pivot",
    "description": "",
    "props": {
      "options": {
        "description": "Choices to be displayed in the pivot control.",
        "required": true,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "description": "",
                "required": true,
                "name": "string",
                "raw": "string"
              },
              "value": {
                "description": "",
                "required": true,
                "name": "union",
                "value": [
                  {
                    "name": "string",
                    "raw": "string"
                  },
                  {
                    "name": "number",
                    "raw": "number"
                  }
                ],
                "raw": "string | number"
              },
              "disabled": {
                "description": "",
                "required": false,
                "name": "bool",
                "raw": "boolean"
              },
              "icon": {
                "description": "",
                "required": false,
                "name": "string",
                "raw": "string"
              }
            },
            "raw": "Option"
          },
          "raw": "Option[]"
        }
      },
      "children": {
        "description": "Array that holds PivotItem components",
        "required": true,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "selected_key": {
        "description": "Currently selected key.",
        "required": false,
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "loading_state": {
        "description": "Object that holds the loading state object coming from dash-renderer",
        "required": true,
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "description": "Determines if the component is loading or not",
              "required": true,
              "name": "bool",
              "raw": "boolean"
            },
            "prop_name": {
              "description": "Holds which property is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "component_name": {
              "description": "Holds the name of the component that is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "DashLoadingState"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/pivot/PivotItem.tsx": {
    "displayName": "PivotItem",
    "description": "",
    "props": {
      "children": {
        "description": "Array that holds PivotItem components",
        "required": true,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "value": {
        "description": "Value corresponding to keys in parent pivot element.",
        "required": true,
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string",
              "raw": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string",
                "raw": "string"
              },
              "raw": "string[]"
            }
          ],
          "raw": "string | string[]"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/components/radio/RadioGroup.tsx": {
    "displayName": "RadioGroup",
    "description": "RadioGroup lets people select a single option from two or more Radio items.\nUse RadioGroup to present all available choices if there's enough space.\nFor more than 5 choices, consider using a different component such as Dropdown.",
    "props": {
      "label": {
        "description": "A label to be displayed above the RadioGroup component.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "value": {
        "description": "The value of the input corresponds to the values provided in the `options` property.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "options": {
        "description": "Configuration for individual choices within the radio group",
        "required": false,
        "defaultValue": {
          "value": "[]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "description": "The Radio's label.",
                "required": true,
                "name": "string",
                "raw": "string"
              },
              "value": {
                "description": "The Radio's value.",
                "required": true,
                "name": "string",
                "raw": "string"
              },
              "disabled": {
                "description": "denotes if radio is disabled",
                "required": false,
                "name": "bool",
                "raw": "boolean"
              }
            },
            "raw": "Option"
          },
          "raw": "Option[]"
        }
      },
      "layout": {
        "description": "How the radio items are laid out in the group.",
        "required": false,
        "defaultValue": {
          "value": "'vertical'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            },
            {
              "value": "'horizontal-stacked'",
              "computed": false
            }
          ],
          "raw": "\"horizontal\" | \"vertical\" | \"horizontal-stacked\""
        }
      },
      "disabled": {
        "description": "Disable all Radio items in this group.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "required": {
        "description": "Require a selection in this group.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/components/separator/Separator.tsx": {
    "displayName": "Separator",
    "description": "## Overview\nA separator visually separates content into groups.\nYou can render content in the separator by specifying the component's children.\nThe component's children can be plain text or a component like Icon. The content\nis center-aligned by default.",
    "props": {
      "children": {
        "description": "The children of this component",
        "required": true,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "align_content": {
        "description": "Where the content should be aligned in the separator.",
        "required": false,
        "defaultValue": {
          "value": "'center'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ],
          "raw": "\"start\" | \"center\" | \"end\""
        }
      },
      "vertical": {
        "description": "Whether the content should be aligned vertically.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/slider/Slider.tsx": {
    "displayName": "Slider",
    "description": "A Slider is an element used to set a value. It provides a visual indication of adjustable\ncontent, as well as the current setting in the total range of content. It is displayed as\na horizontal track with options on either side. A knob or lever is dragged to one end or\nthe other to make the choice, indicating the current value. Marks on the Slider bar can\nshow values and users can choose where they want to drag the knob or lever to set the value.\nA Slider is a good choice when you know that users think of the value as a relative quantity,\nnot a numeric value. For example, users think about setting their audio volume to low or\nmedium - not about setting the value to two or five.",
    "props": {
      "label": {
        "description": "Description label of the Slider",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "value": {
        "description": "The initial value of the Slider",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "min": {
        "description": "The min value of the Slider",
        "required": true,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "max": {
        "description": "The max value of the Slider",
        "required": true,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "step": {
        "description": "The difference between the two adjacent values of the Slider",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "vertical": {
        "description": "Optional flag to render the slider vertically. Defaults to rendering horizontal.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "show_value": {
        "description": "Whether to show the value on the right (bottom) of the Slider.",
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "origin_from_zero": {
        "description": "Optional flag to attach the origin of slider to zero. Helpful when the range include negatives.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "suffix": {
        "description": "Optional suffix to attach to displayed slider value. Useful for showing units of measurement.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "disabled": {
        "description": "Optional flag to render the Slider as disabled",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/slider/ToggleSlider.tsx": {
    "displayName": "ToggleSlider",
    "description": "",
    "props": {
      "tooltip": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "label": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "value": {
        "description": "",
        "required": true,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "checked": {
        "description": "",
        "required": true,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/templates/Page.tsx": {
    "displayName": "Page",
    "description": "A page within a multi page layout",
    "props": {
      "children": {
        "description": "child components",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "controls": {
        "description": "child components",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "label": {
        "description": "Show clear button",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "page_key": {
        "description": "Show clear button",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "icon": {
        "description": "Icon for display in page navigation",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "loading_state": {
        "description": "Object that holds the loading state object coming from dash-renderer",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "description": "Determines if the component is loading or not",
              "required": true,
              "name": "bool",
              "raw": "boolean"
            },
            "prop_name": {
              "description": "Holds which property is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "component_name": {
              "description": "Holds the name of the component that is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "DashLoadingState"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/templates/PagesWithSidebar.tsx": {
    "displayName": "PagesWithSidebar",
    "description": "",
    "props": {
      "children": {
        "description": "Array of @link(Page) components",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "selected_key": {
        "description": "Key of the currently selected page item in navigation controls.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "collapsible": {
        "description": "whether the Sidebar element should be collapsible.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "collapsed": {
        "description": "whether the Sidebar element is collapsed.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "sidebar_width": {
        "description": "width of the PagesWithSidebar element.",
        "required": false,
        "defaultValue": {
          "value": "250",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "sidebar_collapsed_width": {
        "description": "width of the collapsed Sidebar element.",
        "required": false,
        "defaultValue": {
          "value": "80",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "loading_state": {
        "description": "Object that holds the loading state object coming from dash-render+er",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "description": "Determines if the component is loading or not",
              "required": true,
              "name": "bool",
              "raw": "boolean"
            },
            "prop_name": {
              "description": "Holds which property is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            },
            "component_name": {
              "description": "Holds the name of the component that is loading",
              "required": true,
              "name": "string",
              "raw": "string"
            }
          },
          "raw": "DashLoadingState"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/components/text/Label.tsx": {
    "displayName": "Label",
    "description": "A label provides a name or title for an input.",
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "disabled": {
        "description": "Renders the label as disabled",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "required": {
        "description": "Displays an indicator that the label is for a required field.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "size": {
        "description": "A label supports different sizes.",
        "required": false,
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ],
          "raw": "\"small\" | \"medium\" | \"large\""
        }
      },
      "weight": {
        "description": "A label supports regular and semibold fontweight.",
        "required": false,
        "defaultValue": {
          "value": "'regular'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'regular'",
              "computed": false
            },
            {
              "value": "'semibold'",
              "computed": false
            }
          ],
          "raw": "\"regular\" | \"semibold\""
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/text/Text.tsx": {
    "displayName": "Text",
    "description": "Typography and styling abstraction component used to ensure\nconsistency and standardize text throughout your application.\n### Do\n- Use Text whenever you need to display stylized text\n- Use Text to display read-only text",
    "props": {
      "children": {
        "description": "The children of this component",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "align": {
        "description": "Aligns text based on the parent container.",
        "required": false,
        "defaultValue": {
          "value": "'start'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            },
            {
              "value": "'justify'",
              "computed": false
            }
          ],
          "raw": "\"center\" | \"start\" | \"end\" | \"justify\""
        }
      },
      "block": {
        "description": "Applies a block display for the content.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "italic": {
        "description": "Applies the italic font style to the content.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "size": {
        "description": "Applies font size and line height based on the theme tokens.",
        "required": false,
        "defaultValue": {
          "value": "300",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": 100,
              "computed": false
            },
            {
              "value": 200,
              "computed": false
            },
            {
              "value": 300,
              "computed": false
            },
            {
              "value": 400,
              "computed": false
            },
            {
              "value": 500,
              "computed": false
            },
            {
              "value": 600,
              "computed": false
            },
            {
              "value": 700,
              "computed": false
            },
            {
              "value": 800,
              "computed": false
            },
            {
              "value": 900,
              "computed": false
            },
            {
              "value": 1000,
              "computed": false
            }
          ],
          "raw": "100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000"
        }
      },
      "strikethrough": {
        "description": "Applies the strikethrough text decoration to the content.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "truncate": {
        "description": "Truncate overflowing text for block displays.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "underline": {
        "description": "Applies the underline text decoration to the content.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "weight": {
        "description": "Applies font weight to the content.",
        "required": false,
        "defaultValue": {
          "value": "'regular'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'regular'",
              "computed": false
            },
            {
              "value": "'semibold'",
              "computed": false
            },
            {
              "value": "'bold'",
              "computed": false
            }
          ],
          "raw": "\"medium\" | \"regular\" | \"semibold\" | \"bold\""
        }
      },
      "wrap": {
        "description": "Applies the underline text decoration to the content.",
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/text/Textarea.tsx": {
    "displayName": "Textarea",
    "description": "Textarea allows the user to enter and edit multiline text.\n### Do\n- Consider using Textarea with outline appearance. When the contrast ratio against\n  the immediate surrounding color is less than 3:1, consider using outline styles\n  which has a bottom border stroke. But please ensure the color of bottom border stroke\n  has a sufficient contrast which is greater than 3 to 1 against the immediate surrounding.\n### Don't\n- Don\u2019t place Textarea on a surface which doesn't have a sufficient contrast.\n  The colors adjacent to the input should have a sufficient contrast. Particularly,\n  the color of input with filled darker and lighter styles needs to provide greater\n  than 3 to 1 contrast ratio against the immediate surrounding color to pass accessibility\n  requirements.",
    "props": {
      "appearance": {
        "description": "Styling the Textarea should use",
        "required": false,
        "defaultValue": {
          "value": "'outline'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'outline'",
              "computed": false
            },
            {
              "value": "'filled-darker'",
              "computed": false
            },
            {
              "value": "'filled-lighter'",
              "computed": false
            }
          ],
          "raw": "\"outline\" | \"filled-darker\" | \"filled-lighter\""
        }
      },
      "resize": {
        "description": "Which direction the Textarea is allowed to be resized.",
        "required": false,
        "defaultValue": {
          "value": "'none'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'none'",
              "computed": false
            },
            {
              "value": "'both'",
              "computed": false
            },
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ],
          "raw": "\"none\" | \"both\" | \"horizontal\" | \"vertical\""
        }
      },
      "size": {
        "description": "Size of the Textarea.",
        "required": false,
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ],
          "raw": "\"small\" | \"medium\" | \"large\""
        }
      },
      "value": {
        "description": "The value of the Textarea.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/components/toggle/Toggle.tsx": {
    "displayName": "Toggle",
    "description": "## Overview\nToggles represent a physical switch that allows users to turn things on or off.\nUse Toggles to present users with two mutually exclusive options (like on/off),\nwhere choosing an option results in an immediate action. Use a Toggle for binary\noperations that take effect right after the user flips the Toggle. For example,\nuse a Toggle to turn services or hardware components on or off. In other words,\nif a physical switch would work for the action, a Toggle is probably the best control to use.\n### Choosing between Toggle and Checkbox\nFor some actions, either a Toggle or a Checkbox might work. To decide which control\nwould work better, follow these tips:\n- Use a Toggle for binary settings when changes become effective immediately after the user changes them.\n- In the above example, it's clear with the Toggle that the wireless is set to \"On.\" But with the Checkbox, the user needs to think about whether the wireless is on now or whether they need to check the box to turn wireless on.\n- Use a Checkbox when the user has to perform extra steps for changes to be effective. For example, if the user must click a \"Submit\", \"Next\", \"Ok\" button to apply changes, use a Checkbox.",
    "props": {
      "label": {
        "description": "A label to be displayed along with the toggle component.",
        "required": false,
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "toggled": {
        "description": "Checked state of the toggle",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "on_text": {
        "description": "Text to display when toggle is ON. Caution: when not providing\non/off text user may get confused in differentiating the on/off\nstates of the toggle. Defaults to `on`.",
        "required": false,
        "defaultValue": {
          "value": "'On'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "off_text": {
        "description": "Text to display when toggle is OOF. Caution: when not providing\non/off text user may get confused in differentiating the on/off\nstates of the toggle. Defaults to `off`.",
        "required": false,
        "defaultValue": {
          "value": "'Off'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "disabled": {
        "description": "If true, the toggle is disabled and can't be clicked on.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "inline_label": {
        "description": "Whether the label (not the onText/offText) should be positioned\ninline with the toggle control. Left (right in RTL) side when on/off\ntext provided VS right (left in RTL) side when no on/off text.",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "style": {
        "description": "Defines CSS styles which will override styles previously set.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "class_name": {
        "description": "Often used with CSS to style elements with common properties.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/components/FluentProvider.tsx": {
    "displayName": "FluentProvider",
    "description": "",
    "props": {
      "children": {
        "description": "Array that holds PivotItem components",
        "required": true,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "theme": {
        "description": "",
        "required": false,
        "defaultValue": {
          "value": "'light'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'light'",
              "computed": false
            },
            {
              "value": "'dark'",
              "computed": false
            },
            {
              "value": "'teamsLight'",
              "computed": false
            },
            {
              "value": "'teamsDark'",
              "computed": false
            }
          ],
          "raw": "\"light\" | \"dark\" | \"teamsLight\" | \"teamsDark\""
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "key": {
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": false,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  }
}