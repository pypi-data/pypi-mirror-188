# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _workload
else:
    import _workload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _workload.delete_SwigPyIterator

    def value(self):
        return _workload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _workload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _workload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _workload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _workload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _workload.SwigPyIterator_copy(self)

    def next(self):
        return _workload.SwigPyIterator_next(self)

    def __next__(self):
        return _workload.SwigPyIterator___next__(self)

    def previous(self):
        return _workload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _workload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _workload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _workload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _workload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _workload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _workload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _workload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _workload:
_workload.SwigPyIterator_swigregister(SwigPyIterator)

class Workload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MAX_SIZE_GROUP = property(_workload.Workload_MAX_SIZE_GROUP_get, _workload.Workload_MAX_SIZE_GROUP_set)
    pid = property(_workload.Workload_pid_get, _workload.Workload_pid_set)
    ppid = property(_workload.Workload_ppid_get, _workload.Workload_ppid_set)
    isAlive = property(_workload.Workload_isAlive_get, _workload.Workload_isAlive_set)

    def __init__(self, args):
        _workload.Workload_swiginit(self, _workload.new_Workload(args))

    def start(self):
        return _workload.Workload_start(self)

    def add_events(self, fds_):
        return _workload.Workload_add_events(self, fds_)

    def run(self, sample_perid, reset):
        return _workload.Workload_run(self, sample_perid, reset)

    @staticmethod
    def handler(sig, si, ucontext):
        return _workload.Workload_handler(sig, si, ucontext)
    __swig_destroy__ = _workload.delete_Workload

# Register Workload in _workload:
_workload.Workload_swigregister(Workload)

def Workload_handler(sig, si, ucontext):
    return _workload.Workload_handler(sig, si, ucontext)

class stringVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _workload.stringVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _workload.stringVec___nonzero__(self)

    def __bool__(self):
        return _workload.stringVec___bool__(self)

    def __len__(self):
        return _workload.stringVec___len__(self)

    def __getslice__(self, i, j):
        return _workload.stringVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _workload.stringVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _workload.stringVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _workload.stringVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _workload.stringVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _workload.stringVec___setitem__(self, *args)

    def pop(self):
        return _workload.stringVec_pop(self)

    def append(self, x):
        return _workload.stringVec_append(self, x)

    def empty(self):
        return _workload.stringVec_empty(self)

    def size(self):
        return _workload.stringVec_size(self)

    def swap(self, v):
        return _workload.stringVec_swap(self, v)

    def begin(self):
        return _workload.stringVec_begin(self)

    def end(self):
        return _workload.stringVec_end(self)

    def rbegin(self):
        return _workload.stringVec_rbegin(self)

    def rend(self):
        return _workload.stringVec_rend(self)

    def clear(self):
        return _workload.stringVec_clear(self)

    def get_allocator(self):
        return _workload.stringVec_get_allocator(self)

    def pop_back(self):
        return _workload.stringVec_pop_back(self)

    def erase(self, *args):
        return _workload.stringVec_erase(self, *args)

    def __init__(self, *args):
        _workload.stringVec_swiginit(self, _workload.new_stringVec(*args))

    def push_back(self, x):
        return _workload.stringVec_push_back(self, x)

    def front(self):
        return _workload.stringVec_front(self)

    def back(self):
        return _workload.stringVec_back(self)

    def assign(self, n, x):
        return _workload.stringVec_assign(self, n, x)

    def resize(self, *args):
        return _workload.stringVec_resize(self, *args)

    def insert(self, *args):
        return _workload.stringVec_insert(self, *args)

    def reserve(self, n):
        return _workload.stringVec_reserve(self, n)

    def capacity(self):
        return _workload.stringVec_capacity(self)
    __swig_destroy__ = _workload.delete_stringVec

# Register stringVec in _workload:
_workload.stringVec_swigregister(stringVec)

class intVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _workload.intVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _workload.intVec___nonzero__(self)

    def __bool__(self):
        return _workload.intVec___bool__(self)

    def __len__(self):
        return _workload.intVec___len__(self)

    def __getslice__(self, i, j):
        return _workload.intVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _workload.intVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _workload.intVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _workload.intVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _workload.intVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _workload.intVec___setitem__(self, *args)

    def pop(self):
        return _workload.intVec_pop(self)

    def append(self, x):
        return _workload.intVec_append(self, x)

    def empty(self):
        return _workload.intVec_empty(self)

    def size(self):
        return _workload.intVec_size(self)

    def swap(self, v):
        return _workload.intVec_swap(self, v)

    def begin(self):
        return _workload.intVec_begin(self)

    def end(self):
        return _workload.intVec_end(self)

    def rbegin(self):
        return _workload.intVec_rbegin(self)

    def rend(self):
        return _workload.intVec_rend(self)

    def clear(self):
        return _workload.intVec_clear(self)

    def get_allocator(self):
        return _workload.intVec_get_allocator(self)

    def pop_back(self):
        return _workload.intVec_pop_back(self)

    def erase(self, *args):
        return _workload.intVec_erase(self, *args)

    def __init__(self, *args):
        _workload.intVec_swiginit(self, _workload.new_intVec(*args))

    def push_back(self, x):
        return _workload.intVec_push_back(self, x)

    def front(self):
        return _workload.intVec_front(self)

    def back(self):
        return _workload.intVec_back(self)

    def assign(self, n, x):
        return _workload.intVec_assign(self, n, x)

    def resize(self, *args):
        return _workload.intVec_resize(self, *args)

    def insert(self, *args):
        return _workload.intVec_insert(self, *args)

    def reserve(self, n):
        return _workload.intVec_reserve(self, n)

    def capacity(self):
        return _workload.intVec_capacity(self)
    __swig_destroy__ = _workload.delete_intVec

# Register intVec in _workload:
_workload.intVec_swigregister(intVec)

class int64Vec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _workload.int64Vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _workload.int64Vec___nonzero__(self)

    def __bool__(self):
        return _workload.int64Vec___bool__(self)

    def __len__(self):
        return _workload.int64Vec___len__(self)

    def __getslice__(self, i, j):
        return _workload.int64Vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _workload.int64Vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _workload.int64Vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _workload.int64Vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _workload.int64Vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _workload.int64Vec___setitem__(self, *args)

    def pop(self):
        return _workload.int64Vec_pop(self)

    def append(self, x):
        return _workload.int64Vec_append(self, x)

    def empty(self):
        return _workload.int64Vec_empty(self)

    def size(self):
        return _workload.int64Vec_size(self)

    def swap(self, v):
        return _workload.int64Vec_swap(self, v)

    def begin(self):
        return _workload.int64Vec_begin(self)

    def end(self):
        return _workload.int64Vec_end(self)

    def rbegin(self):
        return _workload.int64Vec_rbegin(self)

    def rend(self):
        return _workload.int64Vec_rend(self)

    def clear(self):
        return _workload.int64Vec_clear(self)

    def get_allocator(self):
        return _workload.int64Vec_get_allocator(self)

    def pop_back(self):
        return _workload.int64Vec_pop_back(self)

    def erase(self, *args):
        return _workload.int64Vec_erase(self, *args)

    def __init__(self, *args):
        _workload.int64Vec_swiginit(self, _workload.new_int64Vec(*args))

    def push_back(self, x):
        return _workload.int64Vec_push_back(self, x)

    def front(self):
        return _workload.int64Vec_front(self)

    def back(self):
        return _workload.int64Vec_back(self)

    def assign(self, n, x):
        return _workload.int64Vec_assign(self, n, x)

    def resize(self, *args):
        return _workload.int64Vec_resize(self, *args)

    def insert(self, *args):
        return _workload.int64Vec_insert(self, *args)

    def reserve(self, n):
        return _workload.int64Vec_reserve(self, n)

    def capacity(self):
        return _workload.int64Vec_capacity(self)
    __swig_destroy__ = _workload.delete_int64Vec

# Register int64Vec in _workload:
_workload.int64Vec_swigregister(int64Vec)

class int64VecVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _workload.int64VecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _workload.int64VecVec___nonzero__(self)

    def __bool__(self):
        return _workload.int64VecVec___bool__(self)

    def __len__(self):
        return _workload.int64VecVec___len__(self)

    def __getslice__(self, i, j):
        return _workload.int64VecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _workload.int64VecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _workload.int64VecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _workload.int64VecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _workload.int64VecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _workload.int64VecVec___setitem__(self, *args)

    def pop(self):
        return _workload.int64VecVec_pop(self)

    def append(self, x):
        return _workload.int64VecVec_append(self, x)

    def empty(self):
        return _workload.int64VecVec_empty(self)

    def size(self):
        return _workload.int64VecVec_size(self)

    def swap(self, v):
        return _workload.int64VecVec_swap(self, v)

    def begin(self):
        return _workload.int64VecVec_begin(self)

    def end(self):
        return _workload.int64VecVec_end(self)

    def rbegin(self):
        return _workload.int64VecVec_rbegin(self)

    def rend(self):
        return _workload.int64VecVec_rend(self)

    def clear(self):
        return _workload.int64VecVec_clear(self)

    def get_allocator(self):
        return _workload.int64VecVec_get_allocator(self)

    def pop_back(self):
        return _workload.int64VecVec_pop_back(self)

    def erase(self, *args):
        return _workload.int64VecVec_erase(self, *args)

    def __init__(self, *args):
        _workload.int64VecVec_swiginit(self, _workload.new_int64VecVec(*args))

    def push_back(self, x):
        return _workload.int64VecVec_push_back(self, x)

    def front(self):
        return _workload.int64VecVec_front(self)

    def back(self):
        return _workload.int64VecVec_back(self)

    def assign(self, n, x):
        return _workload.int64VecVec_assign(self, n, x)

    def resize(self, *args):
        return _workload.int64VecVec_resize(self, *args)

    def insert(self, *args):
        return _workload.int64VecVec_insert(self, *args)

    def reserve(self, n):
        return _workload.int64VecVec_reserve(self, n)

    def capacity(self):
        return _workload.int64VecVec_capacity(self)
    __swig_destroy__ = _workload.delete_int64VecVec

# Register int64VecVec in _workload:
_workload.int64VecVec_swigregister(int64VecVec)



