name: Test Chalk

on:
  push:
    branches: [main, dev]
  pull_request:

jobs:
  test:
    name: "Test"
    strategy:
      matrix:
        python_version: ["3.10", "3.8"]
        extra_deps: ["dev", "dev,all"]
      fail-fast: false

    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1

      - name: Fetch doppler secrets
        uses: dopplerhq/secrets-fetch-action@v1.1.0
        id: doppler
        with:
          doppler-token: ${{ secrets.DOPPLER_TOKEN }}

      - name: Configure the SSH private key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ steps.doppler.outputs.CHALK_GITHUB_DEPLOY_PRIVATE_KEY }}
            ${{ steps.doppler.outputs.CHALK_PRIVATE_GITHUB_DEPLOY_PRIVATE_KEY }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          cache: "pip"

      - name: Install dependencies
        run: pip install --upgrade ".[${{ matrix.extra_deps }}]"

      - name: Run test suite
        run: pytest --log-cli-level 100 tests/** --junitxml=./test-result.xml
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGDATABASE: postgres
          PGUSER: postgres
          PGPASSWORD: postgres

          SNOWFLAKE_USER: ${{ steps.doppler.outputs.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ steps.doppler.outputs.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_WAREHOUSE: ${{ steps.doppler.outputs.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ steps.doppler.outputs.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ steps.doppler.outputs.SNOWFLAKE_SCHEMA }}
          SNOWFLAKE_ACCOUNT_ID: ${{ steps.doppler.outputs.SNOWFLAKE_ACCOUNT_ID }}

      - name: Test Report
        uses: mikepenz/action-junit-report@v3.5.2
        if: always()
        with:
          report_paths: "test-result.xml"
          check_name: "Test Report"
          require_tests: true
