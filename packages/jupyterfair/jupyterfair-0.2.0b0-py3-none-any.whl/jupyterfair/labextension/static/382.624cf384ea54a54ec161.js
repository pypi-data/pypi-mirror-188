"use strict";(self.webpackChunkjupyterfair=self.webpackChunkjupyterfair||[]).push([[382],{382:(e,t,o)=>{o.r(t),o.d(t,{default:()=>D});var a=o(411),n=o(169),i=o(978),r=o(576),l=o(19),s=o(579);async function c(e="",t={}){const o=s.ServerConnection.makeSettings(),a=l.URLExt.join(o.baseUrl,"jupyterfair",e);let n;try{n=await s.ServerConnection.makeRequest(a,t,o)}catch(e){throw new s.ServerConnection.NetworkError(e)}let i=await n.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",n)}if(!n.ok)throw new s.ServerConnection.ResponseError(n,i.message||i);return i}var d=o(992);class g extends d.Widget{constructor(){super({node:g.createFormNode()})}getValue(){return this.node.querySelector("input").value.trim()}static createFormNode(){const e=document.createElement("div"),t=document.createElement("label"),o=document.createElement("input"),a=document.createElement("span");return e.className="jp-RedirectForm",a.textContent="Enter the URL or DOI of the dataset",o.placeholder="https://doi.org/xx.x/xx.vx",t.appendChild(a),t.appendChild(o),e.appendChild(t),e}}var u=o(271),m=o(840);const p=new class{constructor(){this._signal=new m.Signal(this)}get signal(){return this._signal}log(e){this._signal.emit(e)}};var h,f,y,b;u.createContext(p),new(o(526).Token)("jupyter.extensions.git_plugin"),function(e){let t;!function(e){let t;!function(e){e[e.WORKING=0]="WORKING",e[e.INDEX=1]="INDEX",e[e.BASE=2]="BASE"}(t=e.SpecialRef||(e.SpecialRef={}))}(t=e.Diff||(e.Diff={}));class o extends s.ServerConnection.ResponseError{constructor(e,t=`Invalid response: ${e.status} ${e.statusText}`,o="",a={}){super(e,t),this.traceback=o,this._json=a}get json(){return this._json}}e.GitResponseError=o;class a extends Error{constructor(){super("Not in a Git Repository")}}e.NotInRepository=a}(h||(h={})),function(e){e[e.SUCCESS=10]="SUCCESS",e[e.INFO=20]="INFO",e[e.RUNNING=30]="RUNNING",e[e.WARNING=40]="WARNING",e[e.ERROR=50]="ERROR"}(f||(f={})),function(e){e.gitCommitAmendStaged="git:context-commitAmendStaged",e.gitFileAdd="git:context-add",e.gitFileDiff="git:context-diff",e.gitFileDiscard="git:context-discard",e.gitFileDelete="git:context-delete",e.gitFileOpen="git:context-open",e.gitFileUnstage="git:context-unstage",e.gitFileStage="git:context-stage",e.gitFileTrack="git:context-track",e.gitFileHistory="git:context-history",e.gitIgnore="git:context-ignore",e.gitIgnoreExtension="git:context-ignoreExtension",e.gitNoAction="git:no-action",e.openFileFromDiff="git:open-file-from-diff"}(y||(y={})),function(e){e.gitUI="git:ui",e.gitTerminalCommand="git:terminal-command",e.gitInit="git:init",e.gitOpenUrl="git:open-url",e.gitToggleSimpleStaging="git:toggle-simple-staging",e.gitToggleDoubleClickDiff="git:toggle-double-click-diff",e.gitManageRemote="git:manage-remote",e.gitClone="git:clone",e.gitMerge="git:merge",e.gitOpenGitignore="git:open-gitignore",e.gitPush="git:push",e.gitPull="git:pull",e.gitResetToRemote="git:reset-to-remote",e.gitSubmitCommand="git:submit-commit",e.gitShowDiff="git:show-diff"}(b||(b={}));const w={id:"jupyterfair:clone",requires:[r.IFileBrowserFactory],autoStart:!0,activate:(e,t)=>{console.log("cloneDatasetCommandPlugin activated!!");const o=t.defaultBrowser.model,a="cloneDatasetCommand";e.commands.addCommand(a,{label:"Clone Dataset",isEnabled:()=>!0,isVisible:()=>!0,icon:i.downloadIcon,execute:async()=>{const e=await(0,n.showDialog)({title:"Clone Dataset",body:new g,buttons:[n.Dialog.cancelButton({label:"Cancel"}),n.Dialog.okButton({label:"Clone"})]});if(e.button.accept&&e.value){p.log({level:f.RUNNING,message:"Cloning..."});try{!function(e,t,o){let a=JSON.stringify({source:e,destination:"./".concat(t),client:"4tu"});console.log("./".concat(t)),c("clone",{method:"POST",body:a}).then((e=>{console.log(e)})).catch((e=>{(0,n.showErrorMessage)("Error when cloning dataset",e)}))}(e.value,o.path),console.log("accepted"),await o.refresh()}catch(e){console.error("Encontered an error when cloning the dataset: ",e)}}else console.log("rejected")}}),e.contextMenu.addItem({command:a,selector:".jp-DirListing-content",rank:106})}},C={id:"jupyterfair:create-dataset",requires:[r.IFileBrowserFactory],autoStart:!0,activate:(e,t)=>{console.log("createDatasetCommandPlugin activated!!");const o=t.defaultBrowser.model,a="createDatasetCommand";e.commands.execute("apputils:notify",{message:"initilize dataset",type:"info",options:{autoClose:!1,actions:{label:"notification init",commandId:a}}}),e.commands.addCommand(a,{label:"Create Fairly Dataset",isEnabled:()=>!0,isVisible:()=>!0,icon:i.addIcon,execute:async()=>{console.log(`the path is: ${o.path}`);let e=await n.InputDialog.getItem({title:"Select template for dataset's metadata",items:["","Default","4TU.Research","Zenodo","Figshare"],okLabel:"Create"});e.button.accept&&e.value?(console.log(`the path is: ${o.path}`),function(e,t){let o="";"4TU.Research"===t||"Figshare"===t?o="figshare":"Zenodo"===t?o="zenodo":null!=t&&"Default"!==t||(o="default"),console.log("./".concat(e)),c("newdataset",{method:"POST",body:JSON.stringify({path:"./".concat(e),template:o})}).then((e=>{console.log(e)})).catch((e=>{console.error(`${e}`),(0,n.showErrorMessage)("Error: Has the dataset been initilized already?",e)}))}(o.path,e.value),await o.refresh()):console.log("rejected")}}),e.contextMenu.addItem({command:a,selector:".jp-DirListing-content",rank:100})}},S={id:"jupyterfair:edit-meta",requires:[r.IFileBrowserFactory],autoStart:!0,activate:(e,t)=>{console.log("editMetadataPlugin activated!!");const o=t.defaultBrowser.model,a="openManifestCommand";e.commands.addCommand(a,{label:"Edit Dataset Metadata",isEnabled:()=>!0,isVisible:()=>!0,icon:i.editIcon,execute:()=>{const e="./".concat(o.path).concat("/manifest.yaml");try{o.manager.open(e)}catch(e){(0,n.showErrorMessage)("Error Opening manifest.yalm",e)}}}),e.contextMenu.addItem({command:a,selector:".jp-DirListing-content",rank:105})}},x={id:"jupyterfair:upload",requires:[r.IFileBrowserFactory],autoStart:!0,activate:(e,t)=>{console.log("uploadDatasetPlugin activated!!");const o=t.defaultBrowser.model,a="uploadDataset";e.commands.addCommand(a,{label:"Upload Dataset",isEnabled:()=>!0,isVisible:()=>!0,icon:i.fileUploadIcon,execute:async()=>{console.log(`the path is: ${o.path}`);let e=await n.InputDialog.getItem({title:"Select Data Repository",items:["4TU.ResearchData","Zenodo","Figshare"],okLabel:"Continue"});if(e.button.accept&&e.value){if(!(await n.InputDialog.getBoolean({title:"Do you want to upload the dataset?",label:`Yes, upload metadata and files to ${e.value}`})).button.accept)return void console.log("do not archive");console.log("uploading dataset"),function(e,t){var o;"4TU.ResearchData"===t?o="4tu":"Zenodo"===t?o="zenodo":"Figshare"===t&&(o="figshare");let a=JSON.stringify({directory:"./".concat(e),client:o});console.log(a),c("upload",{method:"POST",body:a}).then((e=>{console.log(e)})).catch((e=>{(0,n.showErrorMessage)("Error when uploading dataset",e)}))}(o.path,e.value)}else console.log("rejected")}}),e.contextMenu.addItem({command:a,selector:".jp-DirListing-content",rank:102})}},D=[{id:"jupyterfair:plugin",autoStart:!0,requires:[n.ICommandPalette],optional:[a.ISettingRegistry],activate:(e,t,o)=>{console.log("jupytefair is activated!!");const a="widgets:open-tab";e.commands.addCommand(a,{label:"Open Fairly Tab",caption:"Open the Fairly Tab",execute:()=>{}}),t.addItem({command:a,category:"Fairly"})}},C,S,x,w]}}]);