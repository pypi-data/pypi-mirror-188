{"version":3,"file":"8030457c.js","mappings":";;;AAgDA;;;AAOA;AAIA;;;;;AAKA;AACA;AACA;AACA;;;;;;;;AASA;AACA;;AAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChGA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAIA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-entity-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-picture-glance-card-editor.ts"],"sourcesContent":["import { mdiDrag } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport type { SortableEvent } from \"sortablejs\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/entity/ha-entity-picker\";\nimport type { HaEntityPicker } from \"../../../components/entity/ha-entity-picker\";\nimport \"../../../components/ha-icon-button\";\nimport { sortableStyles } from \"../../../resources/ha-sortable-style\";\nimport {\n  loadSortable,\n  SortableInstance,\n} from \"../../../resources/sortable.ondemand\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EntityConfig } from \"../entity-rows/types\";\n\n@customElement(\"hui-entity-editor\")\nexport class HuiEntityEditor extends LitElement {\n  @property({ attribute: false }) protected hass?: HomeAssistant;\n\n  @property({ attribute: false }) protected entities?: EntityConfig[];\n\n  @property() protected label?: string;\n\n  private _entityKeys = new WeakMap<EntityConfig, string>();\n\n  private _sortable?: SortableInstance;\n\n  public disconnectedCallback() {\n    this._destroySortable();\n  }\n\n  private _getKey(action: EntityConfig) {\n    if (!this._entityKeys.has(action)) {\n      this._entityKeys.set(action, Math.random().toString());\n    }\n\n    return this._entityKeys.get(action)!;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entities) {\n      return html``;\n    }\n\n    return html`\n      <h3>\n        ${this.label ||\n        this.hass!.localize(\"ui.panel.lovelace.editor.card.generic.entities\") +\n          \" (\" +\n          this.hass!.localize(\"ui.panel.lovelace.editor.card.config.required\") +\n          \")\"}\n      </h3>\n      <div class=\"entities\">\n        ${repeat(\n          this.entities,\n          (entityConf) => this._getKey(entityConf),\n          (entityConf, index) => html`\n            <div class=\"entity\" data-entity-id=${entityConf.entity}>\n              <div class=\"handle\">\n                <ha-svg-icon .path=${mdiDrag}></ha-svg-icon>\n              </div>\n              <ha-entity-picker\n                .hass=${this.hass}\n                .value=${entityConf.entity}\n                .index=${index}\n                @value-changed=${this._valueChanged}\n                allow-custom-entity\n              ></ha-entity-picker>\n            </div>\n          `\n        )}\n      </div>\n      <ha-entity-picker\n        class=\"add-entity\"\n        .hass=${this.hass}\n        @value-changed=${this._addEntity}\n      ></ha-entity-picker>\n    `;\n  }\n\n  protected firstUpdated(): void {\n    this._createSortable();\n  }\n\n  private async _createSortable() {\n    const Sortable = await loadSortable();\n    this._sortable = new Sortable(\n      this.shadowRoot!.querySelector(\".entities\")!,\n      {\n        animation: 150,\n        fallbackClass: \"sortable-fallback\",\n        handle: \".handle\",\n        dataIdAttr: \"data-entity-id\",\n        onChoose: (evt: SortableEvent) => {\n          (evt.item as any).placeholder =\n            document.createComment(\"sort-placeholder\");\n          evt.item.after((evt.item as any).placeholder);\n        },\n        onEnd: (evt: SortableEvent) => {\n          // put back in original location\n          if ((evt.item as any).placeholder) {\n            (evt.item as any).placeholder.replaceWith(evt.item);\n            delete (evt.item as any).placeholder;\n          }\n          this._entityMoved(evt);\n        },\n      }\n    );\n  }\n\n  private _destroySortable() {\n    this._sortable?.destroy();\n    this._sortable = undefined;\n  }\n\n  private async _addEntity(ev: CustomEvent): Promise<void> {\n    const value = ev.detail.value;\n    if (value === \"\") {\n      return;\n    }\n    const newConfigEntities = this.entities!.concat({\n      entity: value as string,\n    });\n    (ev.target as HaEntityPicker).value = \"\";\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _entityMoved(ev: SortableEvent): void {\n    if (ev.oldIndex === ev.newIndex) {\n      return;\n    }\n\n    const newEntities = this.entities!.concat();\n\n    newEntities.splice(ev.newIndex!, 0, newEntities.splice(ev.oldIndex!, 1)[0]);\n\n    fireEvent(this, \"entities-changed\", { entities: newEntities });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const value = ev.detail.value;\n    const index = (ev.target as any).index;\n    const newConfigEntities = this.entities!.concat();\n\n    if (value === \"\" || value === undefined) {\n      newConfigEntities.splice(index, 1);\n    } else {\n      newConfigEntities[index] = {\n        ...newConfigEntities[index],\n        entity: value!,\n      };\n    }\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      sortableStyles,\n      css`\n        ha-entity-picker {\n          margin-top: 8px;\n        }\n        .add-entity {\n          display: block;\n          margin-left: 31px;\n          margin-inline-start: 31px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n        .entity {\n          display: flex;\n          align-items: center;\n        }\n        .entity .handle {\n          padding-right: 8px;\n          cursor: move;\n          padding-inline-end: 8px;\n          padding-inline-start: initial;\n          direction: var(--direction);\n        }\n        .entity .handle > * {\n          pointer-events: none;\n        }\n        .entity ha-entity-picker {\n          flex-grow: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-editor\": HuiEntityEditor;\n  }\n}\n","import { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { array, assert, assign, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { ActionConfig } from \"../../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { PictureGlanceCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-entity-editor\";\nimport type { EntityConfig } from \"../../entity-rows/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    title: optional(string()),\n    entity: optional(string()),\n    image: optional(string()),\n    camera_image: optional(string()),\n    camera_view: optional(string()),\n    aspect_ratio: optional(string()),\n    tap_action: optional(actionConfigStruct),\n    hold_action: optional(actionConfigStruct),\n    entities: array(entitiesConfigStruct),\n    theme: optional(string()),\n  })\n);\n\nconst SCHEMA = [\n  { name: \"title\", selector: { text: {} } },\n  { name: \"image\", selector: { text: {} } },\n  { name: \"camera_image\", selector: { entity: { domain: \"camera\" } } },\n  {\n    name: \"\",\n    type: \"grid\",\n    schema: [\n      {\n        name: \"camera_view\",\n        selector: { select: { options: [\"auto\", \"live\"] } },\n      },\n      { name: \"aspect_ratio\", selector: { text: {} } },\n    ],\n  },\n  { name: \"entity\", selector: { entity: {} } },\n  { name: \"theme\", selector: { theme: {} } },\n  {\n    name: \"tap_action\",\n    selector: { \"ui-action\": {} },\n  },\n  {\n    name: \"hold_action\",\n    selector: { \"ui-action\": {} },\n  },\n] as const;\n\n@customElement(\"hui-picture-glance-card-editor\")\nexport class HuiPictureGlanceCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: PictureGlanceCardConfig;\n\n  @state() private _configEntities?: EntityConfig[];\n\n  public setConfig(config: PictureGlanceCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _tap_action(): ActionConfig {\n    return this._config!.tap_action || { action: \"toggle\" };\n  }\n\n  get _hold_action(): ActionConfig {\n    return this._config!.hold_action || { action: \"more-info\" };\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const data = { camera_view: \"auto\", ...this._config };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${SCHEMA}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n      <div class=\"card-config\">\n        <hui-entity-editor\n          .hass=${this.hass}\n          .entities=${this._configEntities}\n          @entities-changed=${this._changed}\n        ></hui-entity-editor>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", { config: ev.detail.value });\n  }\n\n  private _changed(ev: CustomEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    if (ev.detail && ev.detail.entities) {\n      this._config = { ...this._config, entities: ev.detail.entities };\n\n      this._configEntities = processEditorEntities(this._config.entities);\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _computeLabelCallback = (schema: SchemaUnion<typeof SCHEMA>) => {\n    switch (schema.name) {\n      case \"theme\":\n      case \"tap_action\":\n      case \"hold_action\":\n        return `${this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      case \"entity\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.picture-glance.state_entity\"\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static styles: CSSResultGroup = configElementStyle;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-picture-glance-card-editor\": HuiPictureGlanceCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}