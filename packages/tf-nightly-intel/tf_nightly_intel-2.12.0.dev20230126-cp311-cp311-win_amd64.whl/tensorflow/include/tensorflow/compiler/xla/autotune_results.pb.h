// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/xla/autotune_results.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/tsl/protobuf/autotuning.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto;
namespace xla {
class AutotuneResults;
class AutotuneResultsDefaultTypeInternal;
extern AutotuneResultsDefaultTypeInternal _AutotuneResults_default_instance_;
class AutotuneResults_Entry;
class AutotuneResults_EntryDefaultTypeInternal;
extern AutotuneResults_EntryDefaultTypeInternal _AutotuneResults_Entry_default_instance_;
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> ::xla::AutotuneResults* Arena::CreateMaybeMessage<::xla::AutotuneResults>(Arena*);
template<> ::xla::AutotuneResults_Entry* Arena::CreateMaybeMessage<::xla::AutotuneResults_Entry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {

// ===================================================================

class AutotuneResults_Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.AutotuneResults.Entry) */ {
 public:
  AutotuneResults_Entry();
  virtual ~AutotuneResults_Entry();

  AutotuneResults_Entry(const AutotuneResults_Entry& from);
  AutotuneResults_Entry(AutotuneResults_Entry&& from) noexcept
    : AutotuneResults_Entry() {
    *this = ::std::move(from);
  }

  inline AutotuneResults_Entry& operator=(const AutotuneResults_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutotuneResults_Entry& operator=(AutotuneResults_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutotuneResults_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutotuneResults_Entry* internal_default_instance() {
    return reinterpret_cast<const AutotuneResults_Entry*>(
               &_AutotuneResults_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutotuneResults_Entry& a, AutotuneResults_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(AutotuneResults_Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutotuneResults_Entry* New() const final {
    return CreateMaybeMessage<AutotuneResults_Entry>(nullptr);
  }

  AutotuneResults_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutotuneResults_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutotuneResults_Entry& from);
  void MergeFrom(const AutotuneResults_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutotuneResults_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.AutotuneResults.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kHloFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string device = 1;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);

  // string hlo = 2;
  void clear_hlo();
  const std::string& hlo() const;
  void set_hlo(const std::string& value);
  void set_hlo(std::string&& value);
  void set_hlo(const char* value);
  void set_hlo(const char* value, size_t size);
  std::string* mutable_hlo();
  std::string* release_hlo();
  void set_allocated_hlo(std::string* hlo);

  // .tensorflow.AutotuneResult result = 3;
  bool has_result() const;
  void clear_result();
  const ::tensorflow::AutotuneResult& result() const;
  ::tensorflow::AutotuneResult* release_result();
  ::tensorflow::AutotuneResult* mutable_result();
  void set_allocated_result(::tensorflow::AutotuneResult* result);

  // @@protoc_insertion_point(class_scope:xla.AutotuneResults.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hlo_;
  ::tensorflow::AutotuneResult* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto;
};
// -------------------------------------------------------------------

class AutotuneResults :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.AutotuneResults) */ {
 public:
  AutotuneResults();
  virtual ~AutotuneResults();

  AutotuneResults(const AutotuneResults& from);
  AutotuneResults(AutotuneResults&& from) noexcept
    : AutotuneResults() {
    *this = ::std::move(from);
  }

  inline AutotuneResults& operator=(const AutotuneResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutotuneResults& operator=(AutotuneResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutotuneResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutotuneResults* internal_default_instance() {
    return reinterpret_cast<const AutotuneResults*>(
               &_AutotuneResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutotuneResults& a, AutotuneResults& b) {
    a.Swap(&b);
  }
  inline void Swap(AutotuneResults* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutotuneResults* New() const final {
    return CreateMaybeMessage<AutotuneResults>(nullptr);
  }

  AutotuneResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutotuneResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutotuneResults& from);
  void MergeFrom(const AutotuneResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutotuneResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.AutotuneResults";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AutotuneResults_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kDotsFieldNumber = 2,
    kConvsFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // repeated .xla.AutotuneResults.Entry dots = 2;
  int dots_size() const;
  void clear_dots();
  ::xla::AutotuneResults_Entry* mutable_dots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::AutotuneResults_Entry >*
      mutable_dots();
  const ::xla::AutotuneResults_Entry& dots(int index) const;
  ::xla::AutotuneResults_Entry* add_dots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::AutotuneResults_Entry >&
      dots() const;

  // repeated .xla.AutotuneResults.Entry convs = 3;
  int convs_size() const;
  void clear_convs();
  ::xla::AutotuneResults_Entry* mutable_convs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::AutotuneResults_Entry >*
      mutable_convs();
  const ::xla::AutotuneResults_Entry& convs(int index) const;
  ::xla::AutotuneResults_Entry* add_convs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::AutotuneResults_Entry >&
      convs() const;

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xla.AutotuneResults)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::AutotuneResults_Entry > dots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::AutotuneResults_Entry > convs_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutotuneResults_Entry

// string device = 1;
inline void AutotuneResults_Entry::clear_device() {
  device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AutotuneResults_Entry::device() const {
  // @@protoc_insertion_point(field_get:xla.AutotuneResults.Entry.device)
  return device_.GetNoArena();
}
inline void AutotuneResults_Entry::set_device(const std::string& value) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xla.AutotuneResults.Entry.device)
}
inline void AutotuneResults_Entry::set_device(std::string&& value) {
  
  device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xla.AutotuneResults.Entry.device)
}
inline void AutotuneResults_Entry::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xla.AutotuneResults.Entry.device)
}
inline void AutotuneResults_Entry::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xla.AutotuneResults.Entry.device)
}
inline std::string* AutotuneResults_Entry::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:xla.AutotuneResults.Entry.device)
  return device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutotuneResults_Entry::release_device() {
  // @@protoc_insertion_point(field_release:xla.AutotuneResults.Entry.device)
  
  return device_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutotuneResults_Entry::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResults.Entry.device)
}

// string hlo = 2;
inline void AutotuneResults_Entry::clear_hlo() {
  hlo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AutotuneResults_Entry::hlo() const {
  // @@protoc_insertion_point(field_get:xla.AutotuneResults.Entry.hlo)
  return hlo_.GetNoArena();
}
inline void AutotuneResults_Entry::set_hlo(const std::string& value) {
  
  hlo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xla.AutotuneResults.Entry.hlo)
}
inline void AutotuneResults_Entry::set_hlo(std::string&& value) {
  
  hlo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xla.AutotuneResults.Entry.hlo)
}
inline void AutotuneResults_Entry::set_hlo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hlo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xla.AutotuneResults.Entry.hlo)
}
inline void AutotuneResults_Entry::set_hlo(const char* value, size_t size) {
  
  hlo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xla.AutotuneResults.Entry.hlo)
}
inline std::string* AutotuneResults_Entry::mutable_hlo() {
  
  // @@protoc_insertion_point(field_mutable:xla.AutotuneResults.Entry.hlo)
  return hlo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutotuneResults_Entry::release_hlo() {
  // @@protoc_insertion_point(field_release:xla.AutotuneResults.Entry.hlo)
  
  return hlo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutotuneResults_Entry::set_allocated_hlo(std::string* hlo) {
  if (hlo != nullptr) {
    
  } else {
    
  }
  hlo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hlo);
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResults.Entry.hlo)
}

// .tensorflow.AutotuneResult result = 3;
inline bool AutotuneResults_Entry::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline const ::tensorflow::AutotuneResult& AutotuneResults_Entry::result() const {
  const ::tensorflow::AutotuneResult* p = result_;
  // @@protoc_insertion_point(field_get:xla.AutotuneResults.Entry.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::AutotuneResult*>(
      &::tensorflow::_AutotuneResult_default_instance_);
}
inline ::tensorflow::AutotuneResult* AutotuneResults_Entry::release_result() {
  // @@protoc_insertion_point(field_release:xla.AutotuneResults.Entry.result)
  
  ::tensorflow::AutotuneResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::tensorflow::AutotuneResult* AutotuneResults_Entry::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::AutotuneResult>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xla.AutotuneResults.Entry.result)
  return result_;
}
inline void AutotuneResults_Entry::set_allocated_result(::tensorflow::AutotuneResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:xla.AutotuneResults.Entry.result)
}

// -------------------------------------------------------------------

// AutotuneResults

// int32 version = 1;
inline void AutotuneResults::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutotuneResults::version() const {
  // @@protoc_insertion_point(field_get:xla.AutotuneResults.version)
  return version_;
}
inline void AutotuneResults::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:xla.AutotuneResults.version)
}

// repeated .xla.AutotuneResults.Entry dots = 2;
inline int AutotuneResults::dots_size() const {
  return dots_.size();
}
inline void AutotuneResults::clear_dots() {
  dots_.Clear();
}
inline ::xla::AutotuneResults_Entry* AutotuneResults::mutable_dots(int index) {
  // @@protoc_insertion_point(field_mutable:xla.AutotuneResults.dots)
  return dots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::AutotuneResults_Entry >*
AutotuneResults::mutable_dots() {
  // @@protoc_insertion_point(field_mutable_list:xla.AutotuneResults.dots)
  return &dots_;
}
inline const ::xla::AutotuneResults_Entry& AutotuneResults::dots(int index) const {
  // @@protoc_insertion_point(field_get:xla.AutotuneResults.dots)
  return dots_.Get(index);
}
inline ::xla::AutotuneResults_Entry* AutotuneResults::add_dots() {
  // @@protoc_insertion_point(field_add:xla.AutotuneResults.dots)
  return dots_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::AutotuneResults_Entry >&
AutotuneResults::dots() const {
  // @@protoc_insertion_point(field_list:xla.AutotuneResults.dots)
  return dots_;
}

// repeated .xla.AutotuneResults.Entry convs = 3;
inline int AutotuneResults::convs_size() const {
  return convs_.size();
}
inline void AutotuneResults::clear_convs() {
  convs_.Clear();
}
inline ::xla::AutotuneResults_Entry* AutotuneResults::mutable_convs(int index) {
  // @@protoc_insertion_point(field_mutable:xla.AutotuneResults.convs)
  return convs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::AutotuneResults_Entry >*
AutotuneResults::mutable_convs() {
  // @@protoc_insertion_point(field_mutable_list:xla.AutotuneResults.convs)
  return &convs_;
}
inline const ::xla::AutotuneResults_Entry& AutotuneResults::convs(int index) const {
  // @@protoc_insertion_point(field_get:xla.AutotuneResults.convs)
  return convs_.Get(index);
}
inline ::xla::AutotuneResults_Entry* AutotuneResults::add_convs() {
  // @@protoc_insertion_point(field_add:xla.AutotuneResults.convs)
  return convs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::AutotuneResults_Entry >&
AutotuneResults::convs() const {
  // @@protoc_insertion_point(field_list:xla.AutotuneResults.convs)
  return convs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fautotune_5fresults_2eproto
