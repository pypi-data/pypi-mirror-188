// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/mlir/quantization/tensorflow/exported_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto;
namespace tensorflow {
namespace quantization {
class ExportedModel;
class ExportedModelDefaultTypeInternal;
extern ExportedModelDefaultTypeInternal _ExportedModel_default_instance_;
class ExportedModel_FunctionAliasesEntry_DoNotUse;
class ExportedModel_FunctionAliasesEntry_DoNotUseDefaultTypeInternal;
extern ExportedModel_FunctionAliasesEntry_DoNotUseDefaultTypeInternal _ExportedModel_FunctionAliasesEntry_DoNotUse_default_instance_;
}  // namespace quantization
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::quantization::ExportedModel* Arena::CreateMaybeMessage<::tensorflow::quantization::ExportedModel>(Arena*);
template<> ::tensorflow::quantization::ExportedModel_FunctionAliasesEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::quantization::ExportedModel_FunctionAliasesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace quantization {

// ===================================================================

class ExportedModel_FunctionAliasesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ExportedModel_FunctionAliasesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ExportedModel_FunctionAliasesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ExportedModel_FunctionAliasesEntry_DoNotUse();
  ExportedModel_FunctionAliasesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ExportedModel_FunctionAliasesEntry_DoNotUse& other);
  static const ExportedModel_FunctionAliasesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ExportedModel_FunctionAliasesEntry_DoNotUse*>(&_ExportedModel_FunctionAliasesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tensorflow.quantization.ExportedModel.FunctionAliasesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tensorflow.quantization.ExportedModel.FunctionAliasesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class ExportedModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.quantization.ExportedModel) */ {
 public:
  ExportedModel();
  virtual ~ExportedModel();

  ExportedModel(const ExportedModel& from);
  ExportedModel(ExportedModel&& from) noexcept
    : ExportedModel() {
    *this = ::std::move(from);
  }

  inline ExportedModel& operator=(const ExportedModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportedModel& operator=(ExportedModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportedModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportedModel* internal_default_instance() {
    return reinterpret_cast<const ExportedModel*>(
               &_ExportedModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExportedModel& a, ExportedModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportedModel* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportedModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportedModel* New() const final {
    return CreateMaybeMessage<ExportedModel>(nullptr);
  }

  ExportedModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportedModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportedModel& from);
  void MergeFrom(const ExportedModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportedModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.quantization.ExportedModel";
  }
  protected:
  explicit ExportedModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVariableSharedNamesFieldNumber = 4,
    kFunctionAliasesFieldNumber = 6,
    kInitNodeNameFieldNumber = 2,
    kRestoreNodeNameFieldNumber = 3,
    kCheckpointDirFieldNumber = 5,
    kGraphDefFieldNumber = 1,
  };
  // repeated string variable_shared_names = 4;
  int variable_shared_names_size() const;
  void clear_variable_shared_names();
  const std::string& variable_shared_names(int index) const;
  std::string* mutable_variable_shared_names(int index);
  void set_variable_shared_names(int index, const std::string& value);
  void set_variable_shared_names(int index, std::string&& value);
  void set_variable_shared_names(int index, const char* value);
  void set_variable_shared_names(int index, const char* value, size_t size);
  std::string* add_variable_shared_names();
  void add_variable_shared_names(const std::string& value);
  void add_variable_shared_names(std::string&& value);
  void add_variable_shared_names(const char* value);
  void add_variable_shared_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& variable_shared_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_variable_shared_names();

  // map<string, string> function_aliases = 6;
  int function_aliases_size() const;
  void clear_function_aliases();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      function_aliases() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_function_aliases();

  // string init_node_name = 2;
  void clear_init_node_name();
  const std::string& init_node_name() const;
  void set_init_node_name(const std::string& value);
  void set_init_node_name(std::string&& value);
  void set_init_node_name(const char* value);
  void set_init_node_name(const char* value, size_t size);
  std::string* mutable_init_node_name();
  std::string* release_init_node_name();
  void set_allocated_init_node_name(std::string* init_node_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_init_node_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_init_node_name(
      std::string* init_node_name);

  // string restore_node_name = 3;
  void clear_restore_node_name();
  const std::string& restore_node_name() const;
  void set_restore_node_name(const std::string& value);
  void set_restore_node_name(std::string&& value);
  void set_restore_node_name(const char* value);
  void set_restore_node_name(const char* value, size_t size);
  std::string* mutable_restore_node_name();
  std::string* release_restore_node_name();
  void set_allocated_restore_node_name(std::string* restore_node_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_restore_node_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_restore_node_name(
      std::string* restore_node_name);

  // string checkpoint_dir = 5;
  void clear_checkpoint_dir();
  const std::string& checkpoint_dir() const;
  void set_checkpoint_dir(const std::string& value);
  void set_checkpoint_dir(std::string&& value);
  void set_checkpoint_dir(const char* value);
  void set_checkpoint_dir(const char* value, size_t size);
  std::string* mutable_checkpoint_dir();
  std::string* release_checkpoint_dir();
  void set_allocated_checkpoint_dir(std::string* checkpoint_dir);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpoint_dir();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpoint_dir(
      std::string* checkpoint_dir);

  // .tensorflow.GraphDef graph_def = 1;
  bool has_graph_def() const;
  void clear_graph_def();
  const ::tensorflow::GraphDef& graph_def() const;
  ::tensorflow::GraphDef* release_graph_def();
  ::tensorflow::GraphDef* mutable_graph_def();
  void set_allocated_graph_def(::tensorflow::GraphDef* graph_def);
  void unsafe_arena_set_allocated_graph_def(
      ::tensorflow::GraphDef* graph_def);
  ::tensorflow::GraphDef* unsafe_arena_release_graph_def();

  // @@protoc_insertion_point(class_scope:tensorflow.quantization.ExportedModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> variable_shared_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ExportedModel_FunctionAliasesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > function_aliases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr init_node_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr restore_node_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpoint_dir_;
  ::tensorflow::GraphDef* graph_def_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ExportedModel

// .tensorflow.GraphDef graph_def = 1;
inline bool ExportedModel::has_graph_def() const {
  return this != internal_default_instance() && graph_def_ != nullptr;
}
inline const ::tensorflow::GraphDef& ExportedModel::graph_def() const {
  const ::tensorflow::GraphDef* p = graph_def_;
  // @@protoc_insertion_point(field_get:tensorflow.quantization.ExportedModel.graph_def)
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::GraphDef*>(
      &::tensorflow::_GraphDef_default_instance_);
}
inline ::tensorflow::GraphDef* ExportedModel::release_graph_def() {
  // @@protoc_insertion_point(field_release:tensorflow.quantization.ExportedModel.graph_def)
  
  ::tensorflow::GraphDef* temp = graph_def_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  graph_def_ = nullptr;
  return temp;
}
inline ::tensorflow::GraphDef* ExportedModel::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.quantization.ExportedModel.graph_def)
  
  ::tensorflow::GraphDef* temp = graph_def_;
  graph_def_ = nullptr;
  return temp;
}
inline ::tensorflow::GraphDef* ExportedModel::mutable_graph_def() {
  
  if (graph_def_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::GraphDef>(GetArenaNoVirtual());
    graph_def_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.quantization.ExportedModel.graph_def)
  return graph_def_;
}
inline void ExportedModel::set_allocated_graph_def(::tensorflow::GraphDef* graph_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_def_);
  }
  if (graph_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_def)->GetArena();
    if (message_arena != submessage_arena) {
      graph_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_def, submessage_arena);
    }
    
  } else {
    
  }
  graph_def_ = graph_def;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.quantization.ExportedModel.graph_def)
}

// string init_node_name = 2;
inline void ExportedModel::clear_init_node_name() {
  init_node_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ExportedModel::init_node_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.quantization.ExportedModel.init_node_name)
  return init_node_name_.Get();
}
inline void ExportedModel::set_init_node_name(const std::string& value) {
  
  init_node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.quantization.ExportedModel.init_node_name)
}
inline void ExportedModel::set_init_node_name(std::string&& value) {
  
  init_node_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.quantization.ExportedModel.init_node_name)
}
inline void ExportedModel::set_init_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  init_node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.quantization.ExportedModel.init_node_name)
}
inline void ExportedModel::set_init_node_name(const char* value,
    size_t size) {
  
  init_node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.quantization.ExportedModel.init_node_name)
}
inline std::string* ExportedModel::mutable_init_node_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.quantization.ExportedModel.init_node_name)
  return init_node_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ExportedModel::release_init_node_name() {
  // @@protoc_insertion_point(field_release:tensorflow.quantization.ExportedModel.init_node_name)
  
  return init_node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ExportedModel::set_allocated_init_node_name(std::string* init_node_name) {
  if (init_node_name != nullptr) {
    
  } else {
    
  }
  init_node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), init_node_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.quantization.ExportedModel.init_node_name)
}
inline std::string* ExportedModel::unsafe_arena_release_init_node_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.quantization.ExportedModel.init_node_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return init_node_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ExportedModel::unsafe_arena_set_allocated_init_node_name(
    std::string* init_node_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (init_node_name != nullptr) {
    
  } else {
    
  }
  init_node_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      init_node_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.quantization.ExportedModel.init_node_name)
}

// string restore_node_name = 3;
inline void ExportedModel::clear_restore_node_name() {
  restore_node_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ExportedModel::restore_node_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.quantization.ExportedModel.restore_node_name)
  return restore_node_name_.Get();
}
inline void ExportedModel::set_restore_node_name(const std::string& value) {
  
  restore_node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.quantization.ExportedModel.restore_node_name)
}
inline void ExportedModel::set_restore_node_name(std::string&& value) {
  
  restore_node_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.quantization.ExportedModel.restore_node_name)
}
inline void ExportedModel::set_restore_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  restore_node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.quantization.ExportedModel.restore_node_name)
}
inline void ExportedModel::set_restore_node_name(const char* value,
    size_t size) {
  
  restore_node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.quantization.ExportedModel.restore_node_name)
}
inline std::string* ExportedModel::mutable_restore_node_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.quantization.ExportedModel.restore_node_name)
  return restore_node_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ExportedModel::release_restore_node_name() {
  // @@protoc_insertion_point(field_release:tensorflow.quantization.ExportedModel.restore_node_name)
  
  return restore_node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ExportedModel::set_allocated_restore_node_name(std::string* restore_node_name) {
  if (restore_node_name != nullptr) {
    
  } else {
    
  }
  restore_node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), restore_node_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.quantization.ExportedModel.restore_node_name)
}
inline std::string* ExportedModel::unsafe_arena_release_restore_node_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.quantization.ExportedModel.restore_node_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return restore_node_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ExportedModel::unsafe_arena_set_allocated_restore_node_name(
    std::string* restore_node_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (restore_node_name != nullptr) {
    
  } else {
    
  }
  restore_node_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      restore_node_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.quantization.ExportedModel.restore_node_name)
}

// repeated string variable_shared_names = 4;
inline int ExportedModel::variable_shared_names_size() const {
  return variable_shared_names_.size();
}
inline void ExportedModel::clear_variable_shared_names() {
  variable_shared_names_.Clear();
}
inline const std::string& ExportedModel::variable_shared_names(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.quantization.ExportedModel.variable_shared_names)
  return variable_shared_names_.Get(index);
}
inline std::string* ExportedModel::mutable_variable_shared_names(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.quantization.ExportedModel.variable_shared_names)
  return variable_shared_names_.Mutable(index);
}
inline void ExportedModel::set_variable_shared_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.quantization.ExportedModel.variable_shared_names)
  variable_shared_names_.Mutable(index)->assign(value);
}
inline void ExportedModel::set_variable_shared_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.quantization.ExportedModel.variable_shared_names)
  variable_shared_names_.Mutable(index)->assign(std::move(value));
}
inline void ExportedModel::set_variable_shared_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  variable_shared_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.quantization.ExportedModel.variable_shared_names)
}
inline void ExportedModel::set_variable_shared_names(int index, const char* value, size_t size) {
  variable_shared_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.quantization.ExportedModel.variable_shared_names)
}
inline std::string* ExportedModel::add_variable_shared_names() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.quantization.ExportedModel.variable_shared_names)
  return variable_shared_names_.Add();
}
inline void ExportedModel::add_variable_shared_names(const std::string& value) {
  variable_shared_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.quantization.ExportedModel.variable_shared_names)
}
inline void ExportedModel::add_variable_shared_names(std::string&& value) {
  variable_shared_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.quantization.ExportedModel.variable_shared_names)
}
inline void ExportedModel::add_variable_shared_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  variable_shared_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.quantization.ExportedModel.variable_shared_names)
}
inline void ExportedModel::add_variable_shared_names(const char* value, size_t size) {
  variable_shared_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.quantization.ExportedModel.variable_shared_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExportedModel::variable_shared_names() const {
  // @@protoc_insertion_point(field_list:tensorflow.quantization.ExportedModel.variable_shared_names)
  return variable_shared_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExportedModel::mutable_variable_shared_names() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.quantization.ExportedModel.variable_shared_names)
  return &variable_shared_names_;
}

// string checkpoint_dir = 5;
inline void ExportedModel::clear_checkpoint_dir() {
  checkpoint_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ExportedModel::checkpoint_dir() const {
  // @@protoc_insertion_point(field_get:tensorflow.quantization.ExportedModel.checkpoint_dir)
  return checkpoint_dir_.Get();
}
inline void ExportedModel::set_checkpoint_dir(const std::string& value) {
  
  checkpoint_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.quantization.ExportedModel.checkpoint_dir)
}
inline void ExportedModel::set_checkpoint_dir(std::string&& value) {
  
  checkpoint_dir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.quantization.ExportedModel.checkpoint_dir)
}
inline void ExportedModel::set_checkpoint_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpoint_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.quantization.ExportedModel.checkpoint_dir)
}
inline void ExportedModel::set_checkpoint_dir(const char* value,
    size_t size) {
  
  checkpoint_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.quantization.ExportedModel.checkpoint_dir)
}
inline std::string* ExportedModel::mutable_checkpoint_dir() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.quantization.ExportedModel.checkpoint_dir)
  return checkpoint_dir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ExportedModel::release_checkpoint_dir() {
  // @@protoc_insertion_point(field_release:tensorflow.quantization.ExportedModel.checkpoint_dir)
  
  return checkpoint_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ExportedModel::set_allocated_checkpoint_dir(std::string* checkpoint_dir) {
  if (checkpoint_dir != nullptr) {
    
  } else {
    
  }
  checkpoint_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpoint_dir,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.quantization.ExportedModel.checkpoint_dir)
}
inline std::string* ExportedModel::unsafe_arena_release_checkpoint_dir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.quantization.ExportedModel.checkpoint_dir)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return checkpoint_dir_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ExportedModel::unsafe_arena_set_allocated_checkpoint_dir(
    std::string* checkpoint_dir) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (checkpoint_dir != nullptr) {
    
  } else {
    
  }
  checkpoint_dir_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpoint_dir, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.quantization.ExportedModel.checkpoint_dir)
}

// map<string, string> function_aliases = 6;
inline int ExportedModel::function_aliases_size() const {
  return function_aliases_.size();
}
inline void ExportedModel::clear_function_aliases() {
  function_aliases_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ExportedModel::function_aliases() const {
  // @@protoc_insertion_point(field_map:tensorflow.quantization.ExportedModel.function_aliases)
  return function_aliases_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ExportedModel::mutable_function_aliases() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.quantization.ExportedModel.function_aliases)
  return function_aliases_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace quantization
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fexported_5fmodel_2eproto
