default:
  image: python:3.10  # use latest for building/linting
  before_script:
    - python --version # For debugging
    - python -m pip install --upgrade pip
    - pip install --upgrade tox twine
  cache:
    paths:
      - .cache/pip
      # Do not cache .tox, to recreate virtualenvs for every step
  interruptible: true

stages:
  - lint
  - test
  - package
  - integration
  - publish # publish instead of deploy

# Caching of dependencies to speed up builds
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

run_black:
  stage: lint
  script:
    - tox -e black
  allow_failure: true

run_flake8:
  stage: lint
  script:
    - tox -e pep8
  allow_failure: true

run_unit_tests_coverage:
  stage: test
  script:
    - tox -e coverage
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

run_unit_tests:
  stage: test
  image: python:3.${PY_VERSION}
  script:
    - tox -e py3${PY_VERSION}
  parallel:
    matrix: # use the matrix for testing
      - PY_VERSION: [6, 7, 8, 9, 10]

package_files:
  stage: package
  artifacts:
    expire_in: 1w
    paths:
      - dist/*
  script:
    - tox -e build

publish_on_gitlab:
  stage: publish
  needs:
    - package_files
  variables:
    TWINE_PASSWORD: "${CI_JOB_TOKEN}"
    TWINE_USERNAME: "gitlab-ci-token"
  script:
    - echo "run twine for gitlab"
    - python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

publish_on_pypi:
  stage: publish
  environment: pypi
  needs:
    - package_files
  when: manual
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    TWINE_PASSWORD: "${PYPI_TOKEN}"
    TWINE_USERNAME: "__token__"
  script:
    - env
    - echo "run twine for pypi"
    - python -m twine upload dist/*
