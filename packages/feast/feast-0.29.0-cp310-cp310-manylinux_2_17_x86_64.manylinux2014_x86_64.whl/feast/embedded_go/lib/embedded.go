/*
cgo stubs for package embedded.
File is generated by gopy. Do not edit.
gopy build -output /project/build/lib.linux-x86_64-cpython-310/feast/embedded_go/lib -vm /opt/python/cp310-cp310/bin/python --build-tags cgo,ccalloc --dynamic-link=True -no-make github.com/feast-dev/feast/go/embedded
*/

package main

/*

#cgo CFLAGS: -I/opt/_internal/cpython-3.10.5/include/python3.10 -Wno-error -Wno-implicit-function-declaration -Wno-int-conversion
#cgo LDFLAGS: -pthread -shared

// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}

*/
import "C"
import (
	"errors"
	"reflect"
	"unsafe"

	"github.com/go-python/gopy/gopyh" // handler

	"time"

	"github.com/feast-dev/feast/go/embedded"
)

// main doesn't do anything in lib / pkg mode, but is essential for exe mode
func main() {

}

// initialization functions -- can be called from python after library is loaded
// GoPyInitRunFile runs a separate python file -- call in GoPyInit if it
// steals the main thread e.g., for GUI event loop, as in GoGi startup.

//export GoPyInit
func GoPyInit() {

}

// type for the handle -- int64 for speed (can switch to string)
type GoHandle int64
type CGoHandle C.longlong

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//export DecRef
func DecRef(handle CGoHandle) {
	gopyh.DecRef(gopyh.CGoHandle(handle))
}

// IncRef increments the reference count for the specified handle.
//export IncRef
func IncRef(handle CGoHandle) {
	gopyh.IncRef(gopyh.CGoHandle(handle))
}

// NumHandles returns the number of handles currently in use.
//export NumHandles
func NumHandles() int {
	return gopyh.NumHandles()
}

// boolGoToPy converts a Go bool to python-compatible C.char
func boolGoToPy(b bool) C.char {
	if b {
		return 1
	}
	return 0
}

// boolPyToGo converts a python-compatible C.Char to Go bool
func boolPyToGo(b C.char) bool {
	if b != 0 {
		return true
	}
	return false
}

func complex64GoToPy(c complex64) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex64PyToGo(o *C.PyObject) complex64 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float32(v.real), float32(v.imag))
}

func complex128GoToPy(c complex128) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex128PyToGo(o *C.PyObject) complex128 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float64(v.real), float64(v.imag))
}

// errorGoToPy converts a Go error to python-compatible C.CString
func errorGoToPy(e error) *C.char {
	if e != nil {
		return C.CString(e.Error())
	}
	return C.CString("")
}

// --- generated code for package: embedded below: ---

// ---- External Types Outside of Targeted Packages ---

// ---- Package: go ---

// ---- Types ---

// Converters for implicit pointer handles for type: []bool
func ptrFromHandle_Slice_bool(h CGoHandle) *[]bool {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]bool")
	if p == nil {
		return nil
	}
	return p.(*[]bool)
}
func deptrFromHandle_Slice_bool(h CGoHandle) []bool {
	p := ptrFromHandle_Slice_bool(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_bool(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]bool", p))
}

// --- wrapping slice: []bool ---
//export Slice_bool_CTor
func Slice_bool_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_bool(&[]bool{}))
}

//export Slice_bool_len
func Slice_bool_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_bool(handle))
}

//export Slice_bool_elem
func Slice_bool_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_bool(handle)
	return boolGoToPy(s[_idx])
}

//export Slice_bool_subslice
func Slice_bool_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_bool(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_bool(&ss))
}

//export Slice_bool_set
func Slice_bool_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_bool(handle)
	s[_idx] = boolPyToGo(_vl)
}

//export Slice_bool_append
func Slice_bool_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_bool(handle)
	*s = append(*s, boolPyToGo(_vl))
}

// Converters for implicit pointer handles for type: []byte
func ptrFromHandle_Slice_byte(h CGoHandle) *[]byte {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]byte")
	if p == nil {
		return nil
	}
	return p.(*[]byte)
}
func deptrFromHandle_Slice_byte(h CGoHandle) []byte {
	p := ptrFromHandle_Slice_byte(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_byte(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]byte", p))
}

// --- wrapping slice: []byte ---
//export Slice_byte_CTor
func Slice_byte_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_byte(&[]byte{}))
}

//export Slice_byte_len
func Slice_byte_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_byte(handle))
}

//export Slice_byte_elem
func Slice_byte_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_byte(handle)
	return C.char(s[_idx])
}

//export Slice_byte_subslice
func Slice_byte_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_byte(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_byte(&ss))
}

//export Slice_byte_set
func Slice_byte_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_byte(handle)
	s[_idx] = byte(_vl)
}

//export Slice_byte_append
func Slice_byte_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_byte(handle)
	*s = append(*s, byte(_vl))
}

// Converters for implicit pointer handles for type: []error
func ptrFromHandle_Slice_error(h CGoHandle) *[]error {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]error")
	if p == nil {
		return nil
	}
	return p.(*[]error)
}
func deptrFromHandle_Slice_error(h CGoHandle) []error {
	p := ptrFromHandle_Slice_error(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_error(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]error", p))
}

// --- wrapping slice: []error ---
//export Slice_error_CTor
func Slice_error_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_error(&[]error{}))
}

//export Slice_error_len
func Slice_error_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_error(handle))
}

//export Slice_error_elem
func Slice_error_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_error(handle)
	return errorGoToPy(s[_idx])
}

//export Slice_error_subslice
func Slice_error_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_error(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_error(&ss))
}

//export Slice_error_set
func Slice_error_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_error(handle)
	s[_idx] = errors.New(C.GoString(_vl))
}

//export Slice_error_append
func Slice_error_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_error(handle)
	*s = append(*s, errors.New(C.GoString(_vl)))
}

// Converters for implicit pointer handles for type: []float32
func ptrFromHandle_Slice_float32(h CGoHandle) *[]float32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float32")
	if p == nil {
		return nil
	}
	return p.(*[]float32)
}
func deptrFromHandle_Slice_float32(h CGoHandle) []float32 {
	p := ptrFromHandle_Slice_float32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float32", p))
}

// --- wrapping slice: []float32 ---
//export Slice_float32_CTor
func Slice_float32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float32(&[]float32{}))
}

//export Slice_float32_len
func Slice_float32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float32(handle))
}

//export Slice_float32_elem
func Slice_float32_elem(handle CGoHandle, _idx int) C.float {
	s := deptrFromHandle_Slice_float32(handle)
	return C.float(s[_idx])
}

//export Slice_float32_subslice
func Slice_float32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float32(&ss))
}

//export Slice_float32_set
func Slice_float32_set(handle CGoHandle, _idx int, _vl C.float) {
	s := deptrFromHandle_Slice_float32(handle)
	s[_idx] = float32(_vl)
}

//export Slice_float32_append
func Slice_float32_append(handle CGoHandle, _vl C.float) {
	s := ptrFromHandle_Slice_float32(handle)
	*s = append(*s, float32(_vl))
}

// Converters for implicit pointer handles for type: []float64
func ptrFromHandle_Slice_float64(h CGoHandle) *[]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float64")
	if p == nil {
		return nil
	}
	return p.(*[]float64)
}
func deptrFromHandle_Slice_float64(h CGoHandle) []float64 {
	p := ptrFromHandle_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float64", p))
}

// --- wrapping slice: []float64 ---
//export Slice_float64_CTor
func Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float64(&[]float64{}))
}

//export Slice_float64_len
func Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float64(handle))
}

//export Slice_float64_elem
func Slice_float64_elem(handle CGoHandle, _idx int) C.double {
	s := deptrFromHandle_Slice_float64(handle)
	return C.double(s[_idx])
}

//export Slice_float64_subslice
func Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float64(&ss))
}

//export Slice_float64_set
func Slice_float64_set(handle CGoHandle, _idx int, _vl C.double) {
	s := deptrFromHandle_Slice_float64(handle)
	s[_idx] = float64(_vl)
}

//export Slice_float64_append
func Slice_float64_append(handle CGoHandle, _vl C.double) {
	s := ptrFromHandle_Slice_float64(handle)
	*s = append(*s, float64(_vl))
}

// Converters for implicit pointer handles for type: []int
func ptrFromHandle_Slice_int(h CGoHandle) *[]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int")
	if p == nil {
		return nil
	}
	return p.(*[]int)
}
func deptrFromHandle_Slice_int(h CGoHandle) []int {
	p := ptrFromHandle_Slice_int(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int", p))
}

// --- wrapping slice: []int ---
//export Slice_int_CTor
func Slice_int_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int(&[]int{}))
}

//export Slice_int_len
func Slice_int_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int(handle))
}

//export Slice_int_elem
func Slice_int_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int(handle)
	return C.longlong(s[_idx])
}

//export Slice_int_subslice
func Slice_int_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int(&ss))
}

//export Slice_int_set
func Slice_int_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int(handle)
	s[_idx] = int(_vl)
}

//export Slice_int_append
func Slice_int_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int(handle)
	*s = append(*s, int(_vl))
}

// Converters for implicit pointer handles for type: []int16
func ptrFromHandle_Slice_int16(h CGoHandle) *[]int16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int16")
	if p == nil {
		return nil
	}
	return p.(*[]int16)
}
func deptrFromHandle_Slice_int16(h CGoHandle) []int16 {
	p := ptrFromHandle_Slice_int16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int16", p))
}

// --- wrapping slice: []int16 ---
//export Slice_int16_CTor
func Slice_int16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int16(&[]int16{}))
}

//export Slice_int16_len
func Slice_int16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int16(handle))
}

//export Slice_int16_elem
func Slice_int16_elem(handle CGoHandle, _idx int) C.short {
	s := deptrFromHandle_Slice_int16(handle)
	return C.short(s[_idx])
}

//export Slice_int16_subslice
func Slice_int16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int16(&ss))
}

//export Slice_int16_set
func Slice_int16_set(handle CGoHandle, _idx int, _vl C.short) {
	s := deptrFromHandle_Slice_int16(handle)
	s[_idx] = int16(_vl)
}

//export Slice_int16_append
func Slice_int16_append(handle CGoHandle, _vl C.short) {
	s := ptrFromHandle_Slice_int16(handle)
	*s = append(*s, int16(_vl))
}

// Converters for implicit pointer handles for type: []int32
func ptrFromHandle_Slice_int32(h CGoHandle) *[]int32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int32")
	if p == nil {
		return nil
	}
	return p.(*[]int32)
}
func deptrFromHandle_Slice_int32(h CGoHandle) []int32 {
	p := ptrFromHandle_Slice_int32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int32", p))
}

// --- wrapping slice: []int32 ---
//export Slice_int32_CTor
func Slice_int32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int32(&[]int32{}))
}

//export Slice_int32_len
func Slice_int32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int32(handle))
}

//export Slice_int32_elem
func Slice_int32_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_int32(handle)
	return C.long(s[_idx])
}

//export Slice_int32_subslice
func Slice_int32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int32(&ss))
}

//export Slice_int32_set
func Slice_int32_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_int32(handle)
	s[_idx] = int32(_vl)
}

//export Slice_int32_append
func Slice_int32_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_int32(handle)
	*s = append(*s, int32(_vl))
}

// Converters for implicit pointer handles for type: []int64
func ptrFromHandle_Slice_int64(h CGoHandle) *[]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int64")
	if p == nil {
		return nil
	}
	return p.(*[]int64)
}
func deptrFromHandle_Slice_int64(h CGoHandle) []int64 {
	p := ptrFromHandle_Slice_int64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int64", p))
}

// --- wrapping slice: []int64 ---
//export Slice_int64_CTor
func Slice_int64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int64(&[]int64{}))
}

//export Slice_int64_len
func Slice_int64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int64(handle))
}

//export Slice_int64_elem
func Slice_int64_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int64(handle)
	return C.longlong(s[_idx])
}

//export Slice_int64_subslice
func Slice_int64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int64(&ss))
}

//export Slice_int64_set
func Slice_int64_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int64(handle)
	s[_idx] = int64(_vl)
}

//export Slice_int64_append
func Slice_int64_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int64(handle)
	*s = append(*s, int64(_vl))
}

// Converters for implicit pointer handles for type: []int8
func ptrFromHandle_Slice_int8(h CGoHandle) *[]int8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int8")
	if p == nil {
		return nil
	}
	return p.(*[]int8)
}
func deptrFromHandle_Slice_int8(h CGoHandle) []int8 {
	p := ptrFromHandle_Slice_int8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int8", p))
}

// --- wrapping slice: []int8 ---
//export Slice_int8_CTor
func Slice_int8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int8(&[]int8{}))
}

//export Slice_int8_len
func Slice_int8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int8(handle))
}

//export Slice_int8_elem
func Slice_int8_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_int8(handle)
	return C.char(s[_idx])
}

//export Slice_int8_subslice
func Slice_int8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int8(&ss))
}

//export Slice_int8_set
func Slice_int8_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_int8(handle)
	s[_idx] = int8(_vl)
}

//export Slice_int8_append
func Slice_int8_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_int8(handle)
	*s = append(*s, int8(_vl))
}

// Converters for implicit pointer handles for type: []rune
func ptrFromHandle_Slice_rune(h CGoHandle) *[]rune {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]rune")
	if p == nil {
		return nil
	}
	return p.(*[]rune)
}
func deptrFromHandle_Slice_rune(h CGoHandle) []rune {
	p := ptrFromHandle_Slice_rune(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_rune(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]rune", p))
}

// --- wrapping slice: []rune ---
//export Slice_rune_CTor
func Slice_rune_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_rune(&[]rune{}))
}

//export Slice_rune_len
func Slice_rune_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_rune(handle))
}

//export Slice_rune_elem
func Slice_rune_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_rune(handle)
	return C.long(s[_idx])
}

//export Slice_rune_subslice
func Slice_rune_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_rune(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_rune(&ss))
}

//export Slice_rune_set
func Slice_rune_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_rune(handle)
	s[_idx] = rune(_vl)
}

//export Slice_rune_append
func Slice_rune_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_rune(handle)
	*s = append(*s, rune(_vl))
}

// Converters for implicit pointer handles for type: []string
func ptrFromHandle_Slice_string(h CGoHandle) *[]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]string")
	if p == nil {
		return nil
	}
	return p.(*[]string)
}
func deptrFromHandle_Slice_string(h CGoHandle) []string {
	p := ptrFromHandle_Slice_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]string", p))
}

// --- wrapping slice: []string ---
//export Slice_string_CTor
func Slice_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_string(&[]string{}))
}

//export Slice_string_len
func Slice_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_string(handle))
}

//export Slice_string_elem
func Slice_string_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_string(handle)
	return C.CString(s[_idx])
}

//export Slice_string_subslice
func Slice_string_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_string(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_string(&ss))
}

//export Slice_string_set
func Slice_string_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_string(handle)
	s[_idx] = C.GoString(_vl)
}

//export Slice_string_append
func Slice_string_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_string(handle)
	*s = append(*s, C.GoString(_vl))
}

// Converters for implicit pointer handles for type: []uint
func ptrFromHandle_Slice_uint(h CGoHandle) *[]uint {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint")
	if p == nil {
		return nil
	}
	return p.(*[]uint)
}
func deptrFromHandle_Slice_uint(h CGoHandle) []uint {
	p := ptrFromHandle_Slice_uint(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint", p))
}

// --- wrapping slice: []uint ---
//export Slice_uint_CTor
func Slice_uint_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint(&[]uint{}))
}

//export Slice_uint_len
func Slice_uint_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint(handle))
}

//export Slice_uint_elem
func Slice_uint_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint_subslice
func Slice_uint_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint(&ss))
}

//export Slice_uint_set
func Slice_uint_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint(handle)
	s[_idx] = uint(_vl)
}

//export Slice_uint_append
func Slice_uint_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint(handle)
	*s = append(*s, uint(_vl))
}

// Converters for implicit pointer handles for type: []uint16
func ptrFromHandle_Slice_uint16(h CGoHandle) *[]uint16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint16")
	if p == nil {
		return nil
	}
	return p.(*[]uint16)
}
func deptrFromHandle_Slice_uint16(h CGoHandle) []uint16 {
	p := ptrFromHandle_Slice_uint16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint16", p))
}

// --- wrapping slice: []uint16 ---
//export Slice_uint16_CTor
func Slice_uint16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint16(&[]uint16{}))
}

//export Slice_uint16_len
func Slice_uint16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint16(handle))
}

//export Slice_uint16_elem
func Slice_uint16_elem(handle CGoHandle, _idx int) C.ushort {
	s := deptrFromHandle_Slice_uint16(handle)
	return C.ushort(s[_idx])
}

//export Slice_uint16_subslice
func Slice_uint16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint16(&ss))
}

//export Slice_uint16_set
func Slice_uint16_set(handle CGoHandle, _idx int, _vl C.ushort) {
	s := deptrFromHandle_Slice_uint16(handle)
	s[_idx] = uint16(_vl)
}

//export Slice_uint16_append
func Slice_uint16_append(handle CGoHandle, _vl C.ushort) {
	s := ptrFromHandle_Slice_uint16(handle)
	*s = append(*s, uint16(_vl))
}

// Converters for implicit pointer handles for type: []uint32
func ptrFromHandle_Slice_uint32(h CGoHandle) *[]uint32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint32")
	if p == nil {
		return nil
	}
	return p.(*[]uint32)
}
func deptrFromHandle_Slice_uint32(h CGoHandle) []uint32 {
	p := ptrFromHandle_Slice_uint32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint32", p))
}

// --- wrapping slice: []uint32 ---
//export Slice_uint32_CTor
func Slice_uint32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint32(&[]uint32{}))
}

//export Slice_uint32_len
func Slice_uint32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint32(handle))
}

//export Slice_uint32_elem
func Slice_uint32_elem(handle CGoHandle, _idx int) C.ulong {
	s := deptrFromHandle_Slice_uint32(handle)
	return C.ulong(s[_idx])
}

//export Slice_uint32_subslice
func Slice_uint32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint32(&ss))
}

//export Slice_uint32_set
func Slice_uint32_set(handle CGoHandle, _idx int, _vl C.ulong) {
	s := deptrFromHandle_Slice_uint32(handle)
	s[_idx] = uint32(_vl)
}

//export Slice_uint32_append
func Slice_uint32_append(handle CGoHandle, _vl C.ulong) {
	s := ptrFromHandle_Slice_uint32(handle)
	*s = append(*s, uint32(_vl))
}

// Converters for implicit pointer handles for type: []uint64
func ptrFromHandle_Slice_uint64(h CGoHandle) *[]uint64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint64")
	if p == nil {
		return nil
	}
	return p.(*[]uint64)
}
func deptrFromHandle_Slice_uint64(h CGoHandle) []uint64 {
	p := ptrFromHandle_Slice_uint64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint64", p))
}

// --- wrapping slice: []uint64 ---
//export Slice_uint64_CTor
func Slice_uint64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint64(&[]uint64{}))
}

//export Slice_uint64_len
func Slice_uint64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint64(handle))
}

//export Slice_uint64_elem
func Slice_uint64_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint64(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint64_subslice
func Slice_uint64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint64(&ss))
}

//export Slice_uint64_set
func Slice_uint64_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint64(handle)
	s[_idx] = uint64(_vl)
}

//export Slice_uint64_append
func Slice_uint64_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint64(handle)
	*s = append(*s, uint64(_vl))
}

// Converters for implicit pointer handles for type: []uint8
func ptrFromHandle_Slice_uint8(h CGoHandle) *[]uint8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint8")
	if p == nil {
		return nil
	}
	return p.(*[]uint8)
}
func deptrFromHandle_Slice_uint8(h CGoHandle) []uint8 {
	p := ptrFromHandle_Slice_uint8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint8", p))
}

// --- wrapping slice: []uint8 ---
//export Slice_uint8_CTor
func Slice_uint8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint8(&[]uint8{}))
}

//export Slice_uint8_len
func Slice_uint8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint8(handle))
}

//export Slice_uint8_elem
func Slice_uint8_elem(handle CGoHandle, _idx int) C.uchar {
	s := deptrFromHandle_Slice_uint8(handle)
	return C.uchar(s[_idx])
}

//export Slice_uint8_subslice
func Slice_uint8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint8(&ss))
}

//export Slice_uint8_set
func Slice_uint8_set(handle CGoHandle, _idx int, _vl C.uchar) {
	s := deptrFromHandle_Slice_uint8(handle)
	s[_idx] = uint8(_vl)
}

//export Slice_uint8_append
func Slice_uint8_append(handle CGoHandle, _vl C.uchar) {
	s := ptrFromHandle_Slice_uint8(handle)
	*s = append(*s, uint8(_vl))
}

// ---- Package: embedded ---

// ---- Types ---

// Converters for pointer handles for type: *embedded.DataTable
func ptrFromHandle_Ptr_embedded_DataTable(h CGoHandle) *embedded.DataTable {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*embedded.DataTable")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(embedded.DataTable{})).(*embedded.DataTable)
}
func handleFromPtr_Ptr_embedded_DataTable(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*embedded.DataTable", p))
}

// Converters for pointer handles for type: *embedded.LoggingOptions
func ptrFromHandle_Ptr_embedded_LoggingOptions(h CGoHandle) *embedded.LoggingOptions {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*embedded.LoggingOptions")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(embedded.LoggingOptions{})).(*embedded.LoggingOptions)
}
func handleFromPtr_Ptr_embedded_LoggingOptions(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*embedded.LoggingOptions", p))
}

// Converters for pointer handles for type: *embedded.OnlineFeatureService
func ptrFromHandle_Ptr_embedded_OnlineFeatureService(h CGoHandle) *embedded.OnlineFeatureService {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*embedded.OnlineFeatureService")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService)
}
func handleFromPtr_Ptr_embedded_OnlineFeatureService(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*embedded.OnlineFeatureService", p))
}

// Converters for pointer handles for type: *embedded.OnlineFeatureServiceConfig
func ptrFromHandle_Ptr_embedded_OnlineFeatureServiceConfig(h CGoHandle) *embedded.OnlineFeatureServiceConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*embedded.OnlineFeatureServiceConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(embedded.OnlineFeatureServiceConfig{})).(*embedded.OnlineFeatureServiceConfig)
}
func handleFromPtr_Ptr_embedded_OnlineFeatureServiceConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*embedded.OnlineFeatureServiceConfig", p))
}

// Converters for non-pointer handles for type: embedded.DataTable
func ptrFromHandle_embedded_DataTable(h CGoHandle) *embedded.DataTable {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "embedded.DataTable")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(embedded.DataTable{})).(*embedded.DataTable)
}
func handleFromPtr_embedded_DataTable(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("embedded.DataTable", p))
}

// Converters for non-pointer handles for type: embedded.LoggingOptions
func ptrFromHandle_embedded_LoggingOptions(h CGoHandle) *embedded.LoggingOptions {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "embedded.LoggingOptions")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(embedded.LoggingOptions{})).(*embedded.LoggingOptions)
}
func handleFromPtr_embedded_LoggingOptions(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("embedded.LoggingOptions", p))
}

// Converters for non-pointer handles for type: embedded.OnlineFeatureService
func ptrFromHandle_embedded_OnlineFeatureService(h CGoHandle) *embedded.OnlineFeatureService {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "embedded.OnlineFeatureService")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService)
}
func handleFromPtr_embedded_OnlineFeatureService(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("embedded.OnlineFeatureService", p))
}

// Converters for non-pointer handles for type: embedded.OnlineFeatureServiceConfig
func ptrFromHandle_embedded_OnlineFeatureServiceConfig(h CGoHandle) *embedded.OnlineFeatureServiceConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "embedded.OnlineFeatureServiceConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(embedded.OnlineFeatureServiceConfig{})).(*embedded.OnlineFeatureServiceConfig)
}
func handleFromPtr_embedded_OnlineFeatureServiceConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("embedded.OnlineFeatureServiceConfig", p))
}

// Converters for implicit pointer handles for type: map[string]int32
func ptrFromHandle_Map_string_int32(h CGoHandle) *map[string]int32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]int32")
	if p == nil {
		return nil
	}
	return p.(*map[string]int32)
}
func deptrFromHandle_Map_string_int32(h CGoHandle) map[string]int32 {
	p := ptrFromHandle_Map_string_int32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_int32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]int32", p))
}

// --- wrapping map: map[string]int32 ---
//export Map_string_int32_CTor
func Map_string_int32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_int32(&map[string]int32{}))
}

//export Map_string_int32_len
func Map_string_int32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_int32(handle))
}

//export Map_string_int32_elem
func Map_string_int32_elem(handle CGoHandle, _ky *C.char) C.long {
	s := deptrFromHandle_Map_string_int32(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return C.long(v)
}

//export Map_string_int32_contains
func Map_string_int32_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_int32(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_int32_set
func Map_string_int32_set(handle CGoHandle, _ky *C.char, _vl C.long) {
	s := deptrFromHandle_Map_string_int32(handle)
	s[C.GoString(_ky)] = int32(_vl)
}

//export Map_string_int32_delete
func Map_string_int32_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_int32(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_int32_keys
func Map_string_int32_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_int32(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// ---- Global Variables: can only use functions to access ---

// ---- Interfaces ---

// ---- Structs ---

// --- wrapping struct: embedded.DataTable ---
//export embedded_DataTable_CTor
func embedded_DataTable_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_embedded_DataTable(&embedded.DataTable{}))
}

//export embedded_DataTable_DataPtr_Get
func embedded_DataTable_DataPtr_Get(handle CGoHandle) C.ulonglong {
	op := ptrFromHandle_embedded_DataTable(handle)
	return C.ulonglong(op.DataPtr)
}

//export embedded_DataTable_DataPtr_Set
func embedded_DataTable_DataPtr_Set(handle CGoHandle, val C.ulonglong) {
	op := ptrFromHandle_embedded_DataTable(handle)
	op.DataPtr = uintptr(val)
}

//export embedded_DataTable_SchemaPtr_Get
func embedded_DataTable_SchemaPtr_Get(handle CGoHandle) C.ulonglong {
	op := ptrFromHandle_embedded_DataTable(handle)
	return C.ulonglong(op.SchemaPtr)
}

//export embedded_DataTable_SchemaPtr_Set
func embedded_DataTable_SchemaPtr_Set(handle CGoHandle, val C.ulonglong) {
	op := ptrFromHandle_embedded_DataTable(handle)
	op.SchemaPtr = uintptr(val)
}

// --- wrapping struct: embedded.LoggingOptions ---
//export embedded_LoggingOptions_CTor
func embedded_LoggingOptions_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_embedded_LoggingOptions(&embedded.LoggingOptions{}))
}

//export embedded_LoggingOptions_ChannelCapacity_Get
func embedded_LoggingOptions_ChannelCapacity_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_embedded_LoggingOptions(handle)
	return C.longlong(op.ChannelCapacity)
}

//export embedded_LoggingOptions_ChannelCapacity_Set
func embedded_LoggingOptions_ChannelCapacity_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_embedded_LoggingOptions(handle)
	op.ChannelCapacity = int(val)
}

//export embedded_LoggingOptions_EmitTimeout_Get
func embedded_LoggingOptions_EmitTimeout_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_embedded_LoggingOptions(handle)
	return C.longlong(int64(op.EmitTimeout))
}

//export embedded_LoggingOptions_EmitTimeout_Set
func embedded_LoggingOptions_EmitTimeout_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_embedded_LoggingOptions(handle)
	op.EmitTimeout = time.Duration(int64(val))
}

//export embedded_LoggingOptions_WriteInterval_Get
func embedded_LoggingOptions_WriteInterval_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_embedded_LoggingOptions(handle)
	return C.longlong(int64(op.WriteInterval))
}

//export embedded_LoggingOptions_WriteInterval_Set
func embedded_LoggingOptions_WriteInterval_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_embedded_LoggingOptions(handle)
	op.WriteInterval = time.Duration(int64(val))
}

//export embedded_LoggingOptions_FlushInterval_Get
func embedded_LoggingOptions_FlushInterval_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_embedded_LoggingOptions(handle)
	return C.longlong(int64(op.FlushInterval))
}

//export embedded_LoggingOptions_FlushInterval_Set
func embedded_LoggingOptions_FlushInterval_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_embedded_LoggingOptions(handle)
	op.FlushInterval = time.Duration(int64(val))
}

// --- wrapping struct: embedded.OnlineFeatureService ---
//export embedded_OnlineFeatureService_CTor
func embedded_OnlineFeatureService_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_embedded_OnlineFeatureService(&embedded.OnlineFeatureService{}))
}

//export embedded_OnlineFeatureService_GetEntityTypesMap
func embedded_OnlineFeatureService_GetEntityTypesMap(_handle CGoHandle, featureRefs CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return handleFromPtr_Map_string_int32(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).GetEntityTypesMap(deptrFromHandle_Slice_string(featureRefs))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Map_string_int32(nil)
	}
	return handleFromPtr_Map_string_int32(&cret)
}

//export embedded_OnlineFeatureService_GetEntityTypesMapByFeatureService
func embedded_OnlineFeatureService_GetEntityTypesMapByFeatureService(_handle CGoHandle, featureServiceName *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return handleFromPtr_Map_string_int32(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).GetEntityTypesMapByFeatureService(C.GoString(featureServiceName))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Map_string_int32(nil)
	}
	return handleFromPtr_Map_string_int32(&cret)
}

//export embedded_OnlineFeatureService_CheckForInstantiationError
func embedded_OnlineFeatureService_CheckForInstantiationError(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).CheckForInstantiationError()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export embedded_OnlineFeatureService_GetOnlineFeatures
func embedded_OnlineFeatureService_GetOnlineFeatures(_handle CGoHandle, featureRefs CGoHandle, featureServiceName *C.char, entities CGoHandle, requestData CGoHandle, fullFeatureNames C.char, output CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).GetOnlineFeatures(deptrFromHandle_Slice_string(featureRefs), C.GoString(featureServiceName), *ptrFromHandle_embedded_DataTable(entities), *ptrFromHandle_embedded_DataTable(requestData), boolPyToGo(fullFeatureNames), *ptrFromHandle_embedded_DataTable(output))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export embedded_OnlineFeatureService_StartGprcServer
func embedded_OnlineFeatureService_StartGprcServer(_handle CGoHandle, host *C.char, port C.longlong) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).StartGprcServer(C.GoString(host), int(port))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export embedded_OnlineFeatureService_StartGprcServerWithLoggingDefaultOpts
func embedded_OnlineFeatureService_StartGprcServerWithLoggingDefaultOpts(_handle CGoHandle, host *C.char, port C.longlong, writeLoggedFeaturesCallback *C.PyObject) *C.char {
	_fun_arg := writeLoggedFeaturesCallback
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).StartGprcServerWithLoggingDefaultOpts(C.GoString(host), int(port), func(featureServiceName string, datasetDir string) string {
		if C.PyCallable_Check(_fun_arg) == 0 {
			return C.GoString(nil)
		}
		_gstate := C.PyGILState_Ensure()
		_fcargs := C.PyTuple_New(2)
		C.PyTuple_SetItem(_fcargs, 0, C.gopy_build_string(C.CString(featureServiceName)))
		C.PyTuple_SetItem(_fcargs, 1, C.gopy_build_string(C.CString(datasetDir)))
		_fcret := C.PyObject_CallObject(_fun_arg, _fcargs)
		C.gopy_decref(_fcargs)
		C.gopy_err_handle()
		C.PyGILState_Release(_gstate)
		return C.GoString(C.PyBytes_AsString(_fcret))
	})

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export embedded_OnlineFeatureService_StartGprcServerWithLogging
func embedded_OnlineFeatureService_StartGprcServerWithLogging(_handle CGoHandle, host *C.char, port C.longlong, writeLoggedFeaturesCallback *C.PyObject, loggingOpts CGoHandle) *C.char {
	_fun_arg := writeLoggedFeaturesCallback
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).StartGprcServerWithLogging(C.GoString(host), int(port), func(featureServiceName string, datasetDir string) string {
		if C.PyCallable_Check(_fun_arg) == 0 {
			return C.GoString(nil)
		}
		_gstate := C.PyGILState_Ensure()
		_fcargs := C.PyTuple_New(2)
		C.PyTuple_SetItem(_fcargs, 0, C.gopy_build_string(C.CString(featureServiceName)))
		C.PyTuple_SetItem(_fcargs, 1, C.gopy_build_string(C.CString(datasetDir)))
		_fcret := C.PyObject_CallObject(_fun_arg, _fcargs)
		C.gopy_decref(_fcargs)
		C.gopy_err_handle()
		C.PyGILState_Release(_gstate)
		return C.GoString(C.PyBytes_AsString(_fcret))
	}, *ptrFromHandle_embedded_LoggingOptions(loggingOpts))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export embedded_OnlineFeatureService_StartHttpServer
func embedded_OnlineFeatureService_StartHttpServer(_handle CGoHandle, host *C.char, port C.longlong) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).StartHttpServer(C.GoString(host), int(port))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export embedded_OnlineFeatureService_StartHttpServerWithLoggingDefaultOpts
func embedded_OnlineFeatureService_StartHttpServerWithLoggingDefaultOpts(_handle CGoHandle, host *C.char, port C.longlong, writeLoggedFeaturesCallback *C.PyObject) *C.char {
	_fun_arg := writeLoggedFeaturesCallback
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).StartHttpServerWithLoggingDefaultOpts(C.GoString(host), int(port), func(featureServiceName string, datasetDir string) string {
		if C.PyCallable_Check(_fun_arg) == 0 {
			return C.GoString(nil)
		}
		_gstate := C.PyGILState_Ensure()
		_fcargs := C.PyTuple_New(2)
		C.PyTuple_SetItem(_fcargs, 0, C.gopy_build_string(C.CString(featureServiceName)))
		C.PyTuple_SetItem(_fcargs, 1, C.gopy_build_string(C.CString(datasetDir)))
		_fcret := C.PyObject_CallObject(_fun_arg, _fcargs)
		C.gopy_decref(_fcargs)
		C.gopy_err_handle()
		C.PyGILState_Release(_gstate)
		return C.GoString(C.PyBytes_AsString(_fcret))
	})

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export embedded_OnlineFeatureService_StartHttpServerWithLogging
func embedded_OnlineFeatureService_StartHttpServerWithLogging(_handle CGoHandle, host *C.char, port C.longlong, writeLoggedFeaturesCallback *C.PyObject, loggingOpts CGoHandle) *C.char {
	_fun_arg := writeLoggedFeaturesCallback
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).StartHttpServerWithLogging(C.GoString(host), int(port), func(featureServiceName string, datasetDir string) string {
		if C.PyCallable_Check(_fun_arg) == 0 {
			return C.GoString(nil)
		}
		_gstate := C.PyGILState_Ensure()
		_fcargs := C.PyTuple_New(2)
		C.PyTuple_SetItem(_fcargs, 0, C.gopy_build_string(C.CString(featureServiceName)))
		C.PyTuple_SetItem(_fcargs, 1, C.gopy_build_string(C.CString(datasetDir)))
		_fcret := C.PyObject_CallObject(_fun_arg, _fcargs)
		C.gopy_decref(_fcargs)
		C.gopy_err_handle()
		C.PyGILState_Release(_gstate)
		return C.GoString(C.PyBytes_AsString(_fcret))
	}, *ptrFromHandle_embedded_LoggingOptions(loggingOpts))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export embedded_OnlineFeatureService_StopHttpServer
func embedded_OnlineFeatureService_StopHttpServer(_handle CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).StopHttpServer()
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).StopHttpServer()
	}
}

//export embedded_OnlineFeatureService_StopGrpcServer
func embedded_OnlineFeatureService_StopGrpcServer(_handle CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*embedded.OnlineFeatureService")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).StopGrpcServer()
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(embedded.OnlineFeatureService{})).(*embedded.OnlineFeatureService).StopGrpcServer()
	}
}

// --- wrapping struct: embedded.OnlineFeatureServiceConfig ---
//export embedded_OnlineFeatureServiceConfig_CTor
func embedded_OnlineFeatureServiceConfig_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_embedded_OnlineFeatureServiceConfig(&embedded.OnlineFeatureServiceConfig{}))
}

//export embedded_OnlineFeatureServiceConfig_RepoPath_Get
func embedded_OnlineFeatureServiceConfig_RepoPath_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_embedded_OnlineFeatureServiceConfig(handle)
	return C.CString(op.RepoPath)
}

//export embedded_OnlineFeatureServiceConfig_RepoPath_Set
func embedded_OnlineFeatureServiceConfig_RepoPath_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_embedded_OnlineFeatureServiceConfig(handle)
	op.RepoPath = C.GoString(val)
}

//export embedded_OnlineFeatureServiceConfig_RepoConfig_Get
func embedded_OnlineFeatureServiceConfig_RepoConfig_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_embedded_OnlineFeatureServiceConfig(handle)
	return C.CString(op.RepoConfig)
}

//export embedded_OnlineFeatureServiceConfig_RepoConfig_Set
func embedded_OnlineFeatureServiceConfig_RepoConfig_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_embedded_OnlineFeatureServiceConfig(handle)
	op.RepoConfig = C.GoString(val)
}

// ---- Slices ---

// ---- Maps ---

// ---- Constructors ---

//export embedded_NewOnlineFeatureService
func embedded_NewOnlineFeatureService(conf CGoHandle, transformationCallback *C.PyObject) CGoHandle {
	_fun_arg := transformationCallback
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_embedded_OnlineFeatureService(embedded.NewOnlineFeatureService(ptrFromHandle_Ptr_embedded_OnlineFeatureServiceConfig(conf), func(ODFVName string, inputArrPtr uintptr, inputSchemaPtr uintptr, outArrPtr uintptr, outSchemaPtr uintptr, fullFeatureNames bool) int {
		if C.PyCallable_Check(_fun_arg) == 0 {
			return int(0)
		}
		_gstate := C.PyGILState_Ensure()
		_fcargs := C.PyTuple_New(6)
		C.PyTuple_SetItem(_fcargs, 0, C.gopy_build_string(C.CString(ODFVName)))
		C.PyTuple_SetItem(_fcargs, 1, C.gopy_build_uint64(C.uint64_t(inputArrPtr)))
		C.PyTuple_SetItem(_fcargs, 2, C.gopy_build_uint64(C.uint64_t(inputSchemaPtr)))
		C.PyTuple_SetItem(_fcargs, 3, C.gopy_build_uint64(C.uint64_t(outArrPtr)))
		C.PyTuple_SetItem(_fcargs, 4, C.gopy_build_uint64(C.uint64_t(outSchemaPtr)))
		C.PyTuple_SetItem(_fcargs, 5, C.gopy_build_bool(C.uint8_t(boolGoToPy(fullFeatureNames))))
		_fcret := C.PyObject_CallObject(_fun_arg, _fcargs)
		C.gopy_decref(_fcargs)
		C.gopy_err_handle()
		C.PyGILState_Release(_gstate)
		return int(C.PyLong_AsLongLong(_fcret))
	}))

}

// ---- Functions ---
