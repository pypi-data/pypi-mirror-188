name: Build for Windows

on:
  workflow_dispatch:
    inputs:
      edgar_renderer_ref:
        description: 'Arelle/EdgarRenderer branch, tag or SHA to checkout (blank for default)'
        required: false
        type: string
      ixbrl_viewer_ref:
        description: 'Workiva/ixbrl-viewer branch, tag or SHA to checkout (blank for default)'
        required: false
        type: string
      node_version:
        default: '19'
        description: 'Node.js version to use'
        required: true
        type: string
      python_version:
        default: '3.10'
        description: 'Python version to use'
        required: true
        type: string
      xule_ref:
        description: 'xbrlus/xule branch, tag or SHA to checkout (blank for default)'
        required: false
        type: string

jobs:
  build-windows:
    environment: release
    env:
      BUILD_PATH: build\exe.win-amd64-${{ inputs.python_version }}
    runs-on: windows-2022

    steps:
    - name: Checkout arelle
      uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0
    - name: Checkout EdgarRenderer
      uses: actions/checkout@v3.3.0
      with:
        repository: Arelle/EdgarRenderer
        path: arelle/plugin/EdgarRenderer
        ref: ${{ inputs.edgar_renderer_ref }}
    - shell: cmd
      run: rmdir /s /q arelle\plugin\EdgarRenderer\.git
    - name: Checkout xule
      uses: actions/checkout@v3.3.0
      with:
        repository: xbrlus/xule
        path: xule
        ref: ${{ inputs.xule_ref }}
    - name: Move plugins
      run: |
        mv xule\plugin\validate\* arelle\plugin\validate\
        rmdir xule\plugin\validate
        mv xule\plugin\* arelle\plugin\
    - shell: cmd
      run: rmdir /s /q xule
    - name: Checkout ixbrl-viewer
      uses: actions/checkout@v3.3.0
      with:
        repository: Workiva/ixbrl-viewer
        path: ixbrl-viewer
        ref: ${{ inputs.ixbrl_viewer_ref }}
    - name: Set up Node JS
      uses: actions/setup-node@v3.6.0
      with:
        node-version: ${{ inputs.node_version }}
    - name: Build ixbrl-viewer
      working-directory: ixbrl-viewer
      run: |
        npm install
        npm run prod
    - shell: cmd
      run: move ixbrl-viewer\iXBRLViewerPlugin arelle\plugin\iXBRLViewerPlugin && rmdir /s /q ixbrl-viewer
    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v4.5.0
      with:
        cache: 'pip'
        check-latest: true
        python-version: ${{ inputs.python_version }}
    - name: Install NSIS
      run: choco install nsis
    - name: Install requirements
      run: |
        pip install --upgrade pip setuptools wheel
        pip install -r requirements-build.txt
    - name: Capture build version
      run: echo ("BUILD_VERSION=" + (python -W ignore distro.py --version)) >> $env:GITHUB_ENV
    - name: Define build artifact names
      run: |
        echo "EXE_ARTIFACT_VERSIONED_NAME=arelle-win-${{ env.BUILD_VERSION }}.exe" >> $env:GITHUB_ENV
        echo "ZIP_ARTIFACT_VERSIONED_NAME=arelle-win-${{ env.BUILD_VERSION }}.zip" >> $env:GITHUB_ENV
        echo "EXE_ARTIFACT_NAME=arelle-win.exe" >> $env:GITHUB_ENV
        echo "ZIP_ARTIFACT_NAME=arelle-win.zip" >> $env:GITHUB_ENV
        echo "EXE_BUILD_ARTIFACT_PATH=dist\arelle-win-${{ env.BUILD_VERSION }}.exe" >> $env:GITHUB_ENV
        echo "ZIP_BUILD_ARTIFACT_PATH=dist\arelle-win-${{ env.BUILD_VERSION }}.zip" >> $env:GITHUB_ENV
    - name: Build exe
      run: ./scripts/buildWinDist.bat
    - name: Copy Tktable2.11
      run: xcopy libs\win64\Tktable2.11 ${{ env.BUILD_PATH }}\lib\tcltk\tk8.6 /y
    - name: Delete .git
      shell: cmd
      run: if exist "${{ env.BUILD_PATH }}\.git" rmdir /s /q ${{ env.BUILD_PATH }}\.git
    - name: Make installer
      run: makensis installWin64.nsi
    - name: Version installer
      run: mv dist\arelle-win-x64.exe ${{ env.EXE_BUILD_ARTIFACT_PATH }} 
    - name: Zip distribution
      working-directory: ${{ env.BUILD_PATH }}
      run: 7z a -tzip ..\..\${{ env.ZIP_BUILD_ARTIFACT_PATH }} *
    - name: Upload installer artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: windows installer distribution
        if-no-files-found: error
        path: ${{ env.EXE_BUILD_ARTIFACT_PATH }}
    - name: Upload zip artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: windows zip distribution
        if-no-files-found: error
        path: ${{ env.ZIP_BUILD_ARTIFACT_PATH }}
    - name: Upload release artifacts
      uses: softprops/action-gh-release@v0.1.15
      if: startsWith(github.ref, 'refs/tags/')
      with:
        fail_on_unmatched_files: true
        files: |
          dist/${{ env.EXE_ARTIFACT_VERSIONED_NAME }}
          dist/${{ env.ZIP_ARTIFACT_VERSIONED_NAME }}
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      if: startsWith(github.ref, 'refs/tags/')
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
        aws-region: us-west-1
    - name: Upload release artifacts to S3
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        aws s3 cp --acl public-read ${{ env.EXE_BUILD_ARTIFACT_PATH }} s3://arelle-us/${{ env.EXE_ARTIFACT_VERSIONED_NAME }}
        aws s3 cp --acl public-read ${{ env.ZIP_BUILD_ARTIFACT_PATH }} s3://arelle-us/${{ env.ZIP_ARTIFACT_VERSIONED_NAME }}
        aws s3 cp --acl public-read s3://arelle-us/${{ env.EXE_ARTIFACT_VERSIONED_NAME }} s3://arelle-us/${{ env.EXE_ARTIFACT_NAME }}
        aws s3 cp --acl public-read s3://arelle-us/${{ env.ZIP_ARTIFACT_VERSIONED_NAME }} s3://arelle-us/${{ env.ZIP_ARTIFACT_NAME }}
    - name: Configure Ali Cloud Credentials
      uses: yizhoumo/setup-ossutil@v1.1.3
      if: startsWith(github.ref, 'refs/tags/')
      with:
        endpoint: oss-cn-shenzhen.aliyuncs.com
        access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
        access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
    - name: Upload release artifacts to Ali Cloud
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        ossutil cp -f ${{ env.EXE_BUILD_ARTIFACT_PATH }} oss://arelle-cn/${{ env.EXE_ARTIFACT_VERSIONED_NAME }}
        ossutil cp -f ${{ env.ZIP_BUILD_ARTIFACT_PATH }} oss://arelle-cn/${{ env.ZIP_ARTIFACT_VERSIONED_NAME }}
        ossutil create-symlink oss://arelle-cn/${{ env.EXE_ARTIFACT_NAME }} oss://arelle-cn/${{ env.EXE_ARTIFACT_VERSIONED_NAME }}
        ossutil create-symlink oss://arelle-cn/${{ env.ZIP_ARTIFACT_NAME }} oss://arelle-cn/${{ env.ZIP_ARTIFACT_VERSIONED_NAME }}
