// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/python/framework/kythe_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto;
namespace tensorflow {
class GeneratedCodeInfo;
class GeneratedCodeInfoDefaultTypeInternal;
extern GeneratedCodeInfoDefaultTypeInternal _GeneratedCodeInfo_default_instance_;
class MappingRule;
class MappingRuleDefaultTypeInternal;
extern MappingRuleDefaultTypeInternal _MappingRule_default_instance_;
class VName;
class VNameDefaultTypeInternal;
extern VNameDefaultTypeInternal _VName_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::GeneratedCodeInfo* Arena::CreateMaybeMessage<::tensorflow::GeneratedCodeInfo>(Arena*);
template<> ::tensorflow::MappingRule* Arena::CreateMaybeMessage<::tensorflow::MappingRule>(Arena*);
template<> ::tensorflow::VName* Arena::CreateMaybeMessage<::tensorflow::VName>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

enum GeneratedCodeInfo_Type : int {
  GeneratedCodeInfo_Type_NONE = 0,
  GeneratedCodeInfo_Type_KYTHE0 = 1,
  GeneratedCodeInfo_Type_GeneratedCodeInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GeneratedCodeInfo_Type_GeneratedCodeInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GeneratedCodeInfo_Type_IsValid(int value);
constexpr GeneratedCodeInfo_Type GeneratedCodeInfo_Type_Type_MIN = GeneratedCodeInfo_Type_NONE;
constexpr GeneratedCodeInfo_Type GeneratedCodeInfo_Type_Type_MAX = GeneratedCodeInfo_Type_KYTHE0;
constexpr int GeneratedCodeInfo_Type_Type_ARRAYSIZE = GeneratedCodeInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeneratedCodeInfo_Type_descriptor();
template<typename T>
inline const std::string& GeneratedCodeInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GeneratedCodeInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GeneratedCodeInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeneratedCodeInfo_Type_descriptor(), enum_t_value);
}
inline bool GeneratedCodeInfo_Type_Parse(
    const std::string& name, GeneratedCodeInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeneratedCodeInfo_Type>(
    GeneratedCodeInfo_Type_descriptor(), name, value);
}
enum MappingRule_Type : int {
  MappingRule_Type_NONE = 0,
  MappingRule_Type_NOP = 1,
  MappingRule_Type_ANCHOR_DEFINES = 2,
  MappingRule_Type_ANCHOR_ANCHOR = 3,
  MappingRule_Type_MappingRule_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MappingRule_Type_MappingRule_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MappingRule_Type_IsValid(int value);
constexpr MappingRule_Type MappingRule_Type_Type_MIN = MappingRule_Type_NONE;
constexpr MappingRule_Type MappingRule_Type_Type_MAX = MappingRule_Type_ANCHOR_ANCHOR;
constexpr int MappingRule_Type_Type_ARRAYSIZE = MappingRule_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MappingRule_Type_descriptor();
template<typename T>
inline const std::string& MappingRule_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MappingRule_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MappingRule_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MappingRule_Type_descriptor(), enum_t_value);
}
inline bool MappingRule_Type_Parse(
    const std::string& name, MappingRule_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MappingRule_Type>(
    MappingRule_Type_descriptor(), name, value);
}
enum MappingRule_Semantic : int {
  MappingRule_Semantic_SEMA_NONE = 0,
  MappingRule_Semantic_SEMA_WRITE = 1,
  MappingRule_Semantic_SEMA_READ_WRITE = 2,
  MappingRule_Semantic_MappingRule_Semantic_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MappingRule_Semantic_MappingRule_Semantic_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MappingRule_Semantic_IsValid(int value);
constexpr MappingRule_Semantic MappingRule_Semantic_Semantic_MIN = MappingRule_Semantic_SEMA_NONE;
constexpr MappingRule_Semantic MappingRule_Semantic_Semantic_MAX = MappingRule_Semantic_SEMA_READ_WRITE;
constexpr int MappingRule_Semantic_Semantic_ARRAYSIZE = MappingRule_Semantic_Semantic_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MappingRule_Semantic_descriptor();
template<typename T>
inline const std::string& MappingRule_Semantic_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MappingRule_Semantic>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MappingRule_Semantic_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MappingRule_Semantic_descriptor(), enum_t_value);
}
inline bool MappingRule_Semantic_Parse(
    const std::string& name, MappingRule_Semantic* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MappingRule_Semantic>(
    MappingRule_Semantic_descriptor(), name, value);
}
// ===================================================================

class GeneratedCodeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.GeneratedCodeInfo) */ {
 public:
  GeneratedCodeInfo();
  virtual ~GeneratedCodeInfo();

  GeneratedCodeInfo(const GeneratedCodeInfo& from);
  GeneratedCodeInfo(GeneratedCodeInfo&& from) noexcept
    : GeneratedCodeInfo() {
    *this = ::std::move(from);
  }

  inline GeneratedCodeInfo& operator=(const GeneratedCodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratedCodeInfo& operator=(GeneratedCodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneratedCodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneratedCodeInfo* internal_default_instance() {
    return reinterpret_cast<const GeneratedCodeInfo*>(
               &_GeneratedCodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeneratedCodeInfo& a, GeneratedCodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneratedCodeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneratedCodeInfo* New() const final {
    return CreateMaybeMessage<GeneratedCodeInfo>(nullptr);
  }

  GeneratedCodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneratedCodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneratedCodeInfo& from);
  void MergeFrom(const GeneratedCodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneratedCodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.GeneratedCodeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto);
    return ::descriptor_table_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GeneratedCodeInfo_Type Type;
  static constexpr Type NONE =
    GeneratedCodeInfo_Type_NONE;
  static constexpr Type KYTHE0 =
    GeneratedCodeInfo_Type_KYTHE0;
  static inline bool Type_IsValid(int value) {
    return GeneratedCodeInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GeneratedCodeInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GeneratedCodeInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GeneratedCodeInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return GeneratedCodeInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return GeneratedCodeInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return GeneratedCodeInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .tensorflow.MappingRule meta = 2;
  int meta_size() const;
  void clear_meta();
  ::tensorflow::MappingRule* mutable_meta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::MappingRule >*
      mutable_meta();
  const ::tensorflow::MappingRule& meta(int index) const;
  ::tensorflow::MappingRule* add_meta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::MappingRule >&
      meta() const;

  // .tensorflow.GeneratedCodeInfo.Type type = 1;
  void clear_type();
  ::tensorflow::GeneratedCodeInfo_Type type() const;
  void set_type(::tensorflow::GeneratedCodeInfo_Type value);

  // @@protoc_insertion_point(class_scope:tensorflow.GeneratedCodeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::MappingRule > meta_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class MappingRule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.MappingRule) */ {
 public:
  MappingRule();
  virtual ~MappingRule();

  MappingRule(const MappingRule& from);
  MappingRule(MappingRule&& from) noexcept
    : MappingRule() {
    *this = ::std::move(from);
  }

  inline MappingRule& operator=(const MappingRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline MappingRule& operator=(MappingRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MappingRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MappingRule* internal_default_instance() {
    return reinterpret_cast<const MappingRule*>(
               &_MappingRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MappingRule& a, MappingRule& b) {
    a.Swap(&b);
  }
  inline void Swap(MappingRule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MappingRule* New() const final {
    return CreateMaybeMessage<MappingRule>(nullptr);
  }

  MappingRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MappingRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MappingRule& from);
  void MergeFrom(const MappingRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MappingRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.MappingRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto);
    return ::descriptor_table_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MappingRule_Type Type;
  static constexpr Type NONE =
    MappingRule_Type_NONE;
  static constexpr Type NOP =
    MappingRule_Type_NOP;
  static constexpr Type ANCHOR_DEFINES =
    MappingRule_Type_ANCHOR_DEFINES;
  static constexpr Type ANCHOR_ANCHOR =
    MappingRule_Type_ANCHOR_ANCHOR;
  static inline bool Type_IsValid(int value) {
    return MappingRule_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    MappingRule_Type_Type_MIN;
  static constexpr Type Type_MAX =
    MappingRule_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    MappingRule_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return MappingRule_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return MappingRule_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return MappingRule_Type_Parse(name, value);
  }

  typedef MappingRule_Semantic Semantic;
  static constexpr Semantic SEMA_NONE =
    MappingRule_Semantic_SEMA_NONE;
  static constexpr Semantic SEMA_WRITE =
    MappingRule_Semantic_SEMA_WRITE;
  static constexpr Semantic SEMA_READ_WRITE =
    MappingRule_Semantic_SEMA_READ_WRITE;
  static inline bool Semantic_IsValid(int value) {
    return MappingRule_Semantic_IsValid(value);
  }
  static constexpr Semantic Semantic_MIN =
    MappingRule_Semantic_Semantic_MIN;
  static constexpr Semantic Semantic_MAX =
    MappingRule_Semantic_Semantic_MAX;
  static constexpr int Semantic_ARRAYSIZE =
    MappingRule_Semantic_Semantic_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Semantic_descriptor() {
    return MappingRule_Semantic_descriptor();
  }
  template<typename T>
  static inline const std::string& Semantic_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Semantic>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Semantic_Name.");
    return MappingRule_Semantic_Name(enum_t_value);
  }
  static inline bool Semantic_Parse(const std::string& name,
      Semantic* value) {
    return MappingRule_Semantic_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeFieldNumber = 2,
    kVnameFieldNumber = 3,
    kSourceVnameFieldNumber = 6,
    kTypeFieldNumber = 1,
    kBeginFieldNumber = 4,
    kEndFieldNumber = 5,
    kSourceBeginFieldNumber = 7,
    kSourceEndFieldNumber = 8,
    kTargetBeginFieldNumber = 9,
    kTargetEndFieldNumber = 10,
    kSemanticFieldNumber = 11,
  };
  // string edge = 2;
  void clear_edge();
  const std::string& edge() const;
  void set_edge(const std::string& value);
  void set_edge(std::string&& value);
  void set_edge(const char* value);
  void set_edge(const char* value, size_t size);
  std::string* mutable_edge();
  std::string* release_edge();
  void set_allocated_edge(std::string* edge);

  // .tensorflow.VName vname = 3;
  bool has_vname() const;
  void clear_vname();
  const ::tensorflow::VName& vname() const;
  ::tensorflow::VName* release_vname();
  ::tensorflow::VName* mutable_vname();
  void set_allocated_vname(::tensorflow::VName* vname);

  // .tensorflow.VName source_vname = 6;
  bool has_source_vname() const;
  void clear_source_vname();
  const ::tensorflow::VName& source_vname() const;
  ::tensorflow::VName* release_source_vname();
  ::tensorflow::VName* mutable_source_vname();
  void set_allocated_source_vname(::tensorflow::VName* source_vname);

  // .tensorflow.MappingRule.Type type = 1;
  void clear_type();
  ::tensorflow::MappingRule_Type type() const;
  void set_type(::tensorflow::MappingRule_Type value);

  // uint32 begin = 4;
  void clear_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 begin() const;
  void set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 end = 5;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 source_begin = 7;
  void clear_source_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 source_begin() const;
  void set_source_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 source_end = 8;
  void clear_source_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 source_end() const;
  void set_source_end(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 target_begin = 9;
  void clear_target_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_begin() const;
  void set_target_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 target_end = 10;
  void clear_target_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_end() const;
  void set_target_end(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .tensorflow.MappingRule.Semantic semantic = 11;
  void clear_semantic();
  ::tensorflow::MappingRule_Semantic semantic() const;
  void set_semantic(::tensorflow::MappingRule_Semantic value);

  // @@protoc_insertion_point(class_scope:tensorflow.MappingRule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edge_;
  ::tensorflow::VName* vname_;
  ::tensorflow::VName* source_vname_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 begin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_begin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_begin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_end_;
  int semantic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class VName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.VName) */ {
 public:
  VName();
  virtual ~VName();

  VName(const VName& from);
  VName(VName&& from) noexcept
    : VName() {
    *this = ::std::move(from);
  }

  inline VName& operator=(const VName& from) {
    CopyFrom(from);
    return *this;
  }
  inline VName& operator=(VName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VName* internal_default_instance() {
    return reinterpret_cast<const VName*>(
               &_VName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VName& a, VName& b) {
    a.Swap(&b);
  }
  inline void Swap(VName* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VName* New() const final {
    return CreateMaybeMessage<VName>(nullptr);
  }

  VName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VName& from);
  void MergeFrom(const VName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.VName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto);
    return ::descriptor_table_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kCorpusFieldNumber = 2,
    kRootFieldNumber = 3,
    kPathFieldNumber = 4,
    kLanguageFieldNumber = 5,
  };
  // string signature = 1;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // string corpus = 2;
  void clear_corpus();
  const std::string& corpus() const;
  void set_corpus(const std::string& value);
  void set_corpus(std::string&& value);
  void set_corpus(const char* value);
  void set_corpus(const char* value, size_t size);
  std::string* mutable_corpus();
  std::string* release_corpus();
  void set_allocated_corpus(std::string* corpus);

  // string root = 3;
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);

  // string path = 4;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // string language = 5;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);

  // @@protoc_insertion_point(class_scope:tensorflow.VName)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr corpus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeneratedCodeInfo

// .tensorflow.GeneratedCodeInfo.Type type = 1;
inline void GeneratedCodeInfo::clear_type() {
  type_ = 0;
}
inline ::tensorflow::GeneratedCodeInfo_Type GeneratedCodeInfo::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.GeneratedCodeInfo.type)
  return static_cast< ::tensorflow::GeneratedCodeInfo_Type >(type_);
}
inline void GeneratedCodeInfo::set_type(::tensorflow::GeneratedCodeInfo_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GeneratedCodeInfo.type)
}

// repeated .tensorflow.MappingRule meta = 2;
inline int GeneratedCodeInfo::meta_size() const {
  return meta_.size();
}
inline void GeneratedCodeInfo::clear_meta() {
  meta_.Clear();
}
inline ::tensorflow::MappingRule* GeneratedCodeInfo::mutable_meta(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GeneratedCodeInfo.meta)
  return meta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::MappingRule >*
GeneratedCodeInfo::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GeneratedCodeInfo.meta)
  return &meta_;
}
inline const ::tensorflow::MappingRule& GeneratedCodeInfo::meta(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GeneratedCodeInfo.meta)
  return meta_.Get(index);
}
inline ::tensorflow::MappingRule* GeneratedCodeInfo::add_meta() {
  // @@protoc_insertion_point(field_add:tensorflow.GeneratedCodeInfo.meta)
  return meta_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::MappingRule >&
GeneratedCodeInfo::meta() const {
  // @@protoc_insertion_point(field_list:tensorflow.GeneratedCodeInfo.meta)
  return meta_;
}

// -------------------------------------------------------------------

// MappingRule

// .tensorflow.MappingRule.Type type = 1;
inline void MappingRule::clear_type() {
  type_ = 0;
}
inline ::tensorflow::MappingRule_Type MappingRule::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.type)
  return static_cast< ::tensorflow::MappingRule_Type >(type_);
}
inline void MappingRule::set_type(::tensorflow::MappingRule_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.type)
}

// string edge = 2;
inline void MappingRule::clear_edge() {
  edge_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MappingRule::edge() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.edge)
  return edge_.GetNoArena();
}
inline void MappingRule::set_edge(const std::string& value) {
  
  edge_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.edge)
}
inline void MappingRule::set_edge(std::string&& value) {
  
  edge_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.MappingRule.edge)
}
inline void MappingRule::set_edge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edge_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.MappingRule.edge)
}
inline void MappingRule::set_edge(const char* value, size_t size) {
  
  edge_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MappingRule.edge)
}
inline std::string* MappingRule::mutable_edge() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MappingRule.edge)
  return edge_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MappingRule::release_edge() {
  // @@protoc_insertion_point(field_release:tensorflow.MappingRule.edge)
  
  return edge_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MappingRule::set_allocated_edge(std::string* edge) {
  if (edge != nullptr) {
    
  } else {
    
  }
  edge_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edge);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MappingRule.edge)
}

// .tensorflow.VName vname = 3;
inline bool MappingRule::has_vname() const {
  return this != internal_default_instance() && vname_ != nullptr;
}
inline void MappingRule::clear_vname() {
  if (GetArenaNoVirtual() == nullptr && vname_ != nullptr) {
    delete vname_;
  }
  vname_ = nullptr;
}
inline const ::tensorflow::VName& MappingRule::vname() const {
  const ::tensorflow::VName* p = vname_;
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.vname)
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::VName*>(
      &::tensorflow::_VName_default_instance_);
}
inline ::tensorflow::VName* MappingRule::release_vname() {
  // @@protoc_insertion_point(field_release:tensorflow.MappingRule.vname)
  
  ::tensorflow::VName* temp = vname_;
  vname_ = nullptr;
  return temp;
}
inline ::tensorflow::VName* MappingRule::mutable_vname() {
  
  if (vname_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::VName>(GetArenaNoVirtual());
    vname_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MappingRule.vname)
  return vname_;
}
inline void MappingRule::set_allocated_vname(::tensorflow::VName* vname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vname_;
  }
  if (vname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vname, submessage_arena);
    }
    
  } else {
    
  }
  vname_ = vname;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MappingRule.vname)
}

// uint32 begin = 4;
inline void MappingRule::clear_begin() {
  begin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MappingRule::begin() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.begin)
  return begin_;
}
inline void MappingRule::set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  begin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.begin)
}

// uint32 end = 5;
inline void MappingRule::clear_end() {
  end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MappingRule::end() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.end)
  return end_;
}
inline void MappingRule::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.end)
}

// .tensorflow.MappingRule.Semantic semantic = 11;
inline void MappingRule::clear_semantic() {
  semantic_ = 0;
}
inline ::tensorflow::MappingRule_Semantic MappingRule::semantic() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.semantic)
  return static_cast< ::tensorflow::MappingRule_Semantic >(semantic_);
}
inline void MappingRule::set_semantic(::tensorflow::MappingRule_Semantic value) {
  
  semantic_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.semantic)
}

// .tensorflow.VName source_vname = 6;
inline bool MappingRule::has_source_vname() const {
  return this != internal_default_instance() && source_vname_ != nullptr;
}
inline void MappingRule::clear_source_vname() {
  if (GetArenaNoVirtual() == nullptr && source_vname_ != nullptr) {
    delete source_vname_;
  }
  source_vname_ = nullptr;
}
inline const ::tensorflow::VName& MappingRule::source_vname() const {
  const ::tensorflow::VName* p = source_vname_;
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.source_vname)
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::VName*>(
      &::tensorflow::_VName_default_instance_);
}
inline ::tensorflow::VName* MappingRule::release_source_vname() {
  // @@protoc_insertion_point(field_release:tensorflow.MappingRule.source_vname)
  
  ::tensorflow::VName* temp = source_vname_;
  source_vname_ = nullptr;
  return temp;
}
inline ::tensorflow::VName* MappingRule::mutable_source_vname() {
  
  if (source_vname_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::VName>(GetArenaNoVirtual());
    source_vname_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MappingRule.source_vname)
  return source_vname_;
}
inline void MappingRule::set_allocated_source_vname(::tensorflow::VName* source_vname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_vname_;
  }
  if (source_vname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_vname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_vname, submessage_arena);
    }
    
  } else {
    
  }
  source_vname_ = source_vname;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MappingRule.source_vname)
}

// uint32 source_begin = 7;
inline void MappingRule::clear_source_begin() {
  source_begin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MappingRule::source_begin() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.source_begin)
  return source_begin_;
}
inline void MappingRule::set_source_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  source_begin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.source_begin)
}

// uint32 source_end = 8;
inline void MappingRule::clear_source_end() {
  source_end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MappingRule::source_end() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.source_end)
  return source_end_;
}
inline void MappingRule::set_source_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  source_end_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.source_end)
}

// uint32 target_begin = 9;
inline void MappingRule::clear_target_begin() {
  target_begin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MappingRule::target_begin() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.target_begin)
  return target_begin_;
}
inline void MappingRule::set_target_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_begin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.target_begin)
}

// uint32 target_end = 10;
inline void MappingRule::clear_target_end() {
  target_end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MappingRule::target_end() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.target_end)
  return target_end_;
}
inline void MappingRule::set_target_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_end_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.target_end)
}

// -------------------------------------------------------------------

// VName

// string signature = 1;
inline void VName::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VName::signature() const {
  // @@protoc_insertion_point(field_get:tensorflow.VName.signature)
  return signature_.GetNoArena();
}
inline void VName::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.VName.signature)
}
inline void VName::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.VName.signature)
}
inline void VName::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.VName.signature)
}
inline void VName::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.VName.signature)
}
inline std::string* VName::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.VName.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VName::release_signature() {
  // @@protoc_insertion_point(field_release:tensorflow.VName.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VName::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VName.signature)
}

// string corpus = 2;
inline void VName::clear_corpus() {
  corpus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VName::corpus() const {
  // @@protoc_insertion_point(field_get:tensorflow.VName.corpus)
  return corpus_.GetNoArena();
}
inline void VName::set_corpus(const std::string& value) {
  
  corpus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.VName.corpus)
}
inline void VName::set_corpus(std::string&& value) {
  
  corpus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.VName.corpus)
}
inline void VName::set_corpus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  corpus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.VName.corpus)
}
inline void VName::set_corpus(const char* value, size_t size) {
  
  corpus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.VName.corpus)
}
inline std::string* VName::mutable_corpus() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.VName.corpus)
  return corpus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VName::release_corpus() {
  // @@protoc_insertion_point(field_release:tensorflow.VName.corpus)
  
  return corpus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VName::set_allocated_corpus(std::string* corpus) {
  if (corpus != nullptr) {
    
  } else {
    
  }
  corpus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), corpus);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VName.corpus)
}

// string root = 3;
inline void VName::clear_root() {
  root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VName::root() const {
  // @@protoc_insertion_point(field_get:tensorflow.VName.root)
  return root_.GetNoArena();
}
inline void VName::set_root(const std::string& value) {
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.VName.root)
}
inline void VName::set_root(std::string&& value) {
  
  root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.VName.root)
}
inline void VName::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.VName.root)
}
inline void VName::set_root(const char* value, size_t size) {
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.VName.root)
}
inline std::string* VName::mutable_root() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.VName.root)
  return root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VName::release_root() {
  // @@protoc_insertion_point(field_release:tensorflow.VName.root)
  
  return root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VName::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VName.root)
}

// string path = 4;
inline void VName::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VName::path() const {
  // @@protoc_insertion_point(field_get:tensorflow.VName.path)
  return path_.GetNoArena();
}
inline void VName::set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.VName.path)
}
inline void VName::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.VName.path)
}
inline void VName::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.VName.path)
}
inline void VName::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.VName.path)
}
inline std::string* VName::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.VName.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VName::release_path() {
  // @@protoc_insertion_point(field_release:tensorflow.VName.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VName::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VName.path)
}

// string language = 5;
inline void VName::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VName::language() const {
  // @@protoc_insertion_point(field_get:tensorflow.VName.language)
  return language_.GetNoArena();
}
inline void VName::set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.VName.language)
}
inline void VName::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.VName.language)
}
inline void VName::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.VName.language)
}
inline void VName::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.VName.language)
}
inline std::string* VName::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.VName.language)
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VName::release_language() {
  // @@protoc_insertion_point(field_release:tensorflow.VName.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VName::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VName.language)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::GeneratedCodeInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::GeneratedCodeInfo_Type>() {
  return ::tensorflow::GeneratedCodeInfo_Type_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::MappingRule_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::MappingRule_Type>() {
  return ::tensorflow::MappingRule_Type_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::MappingRule_Semantic> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::MappingRule_Semantic>() {
  return ::tensorflow::MappingRule_Semantic_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto
