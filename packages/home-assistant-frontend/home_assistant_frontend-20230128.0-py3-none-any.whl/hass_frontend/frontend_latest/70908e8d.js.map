{"version":3,"file":"70908e8d.js","mappings":";AAsMA;;AAEA;;;AAKA;AACA;AACA;AACA;;AAEA;;;;AApBA;;;;;;;;;;AAyCA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-history-graph-card.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/chart/state-history-charts\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport {\n  HistoryResult,\n  subscribeHistoryStatesTimeWindow,\n  computeHistory,\n} from \"../../../data/history\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntitiesChanged } from \"../common/has-changed\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { EntityConfig } from \"../entity-rows/types\";\nimport { LovelaceCard } from \"../types\";\nimport { HistoryGraphCardConfig } from \"./types\";\n\n@customElement(\"hui-history-graph-card\")\nexport class HuiHistoryGraphCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement() {\n    await import(\"../editor/config-elements/hui-history-graph-card-editor\");\n    return document.createElement(\"hui-history-graph-card-editor\");\n  }\n\n  public static getStubConfig(): HistoryGraphCardConfig {\n    // Hard coded to sun.sun to prevent high server load when it would pick an entity with a lot of state changes\n    return { type: \"history-graph\", entities: [\"sun.sun\"] };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _stateHistory?: HistoryResult;\n\n  @state() private _config?: HistoryGraphCardConfig;\n\n  private _configEntities?: EntityConfig[];\n\n  private _names: Record<string, string> = {};\n\n  private _entityIds: string[] = [];\n\n  private _hoursToShow = 24;\n\n  private _error?: string;\n\n  private _interval?: number;\n\n  private _subscribed?: Promise<(() => Promise<void>) | void>;\n\n  public getCardSize(): number {\n    return this._config?.title\n      ? 2\n      : 0 + 2 * (this._configEntities?.length || 1);\n  }\n\n  public setConfig(config: HistoryGraphCardConfig): void {\n    if (!config.entities || !Array.isArray(config.entities)) {\n      throw new Error(\"Entities need to be an array\");\n    }\n\n    if (!config.entities.length) {\n      throw new Error(\"You must include at least one entity\");\n    }\n\n    this._configEntities = config.entities\n      ? processConfigEntities(config.entities)\n      : [];\n\n    this._configEntities.forEach((entity) => {\n      this._entityIds.push(entity.entity);\n      if (entity.name) {\n        this._names[entity.entity] = entity.name;\n      }\n    });\n\n    this._hoursToShow = config.hours_to_show || 24;\n\n    this._config = config;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this.hasUpdated) {\n      this._subscribeHistoryTimeWindow();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._unsubscribeHistoryTimeWindow();\n  }\n\n  private _subscribeHistoryTimeWindow() {\n    if (!isComponentLoaded(this.hass!, \"history\") || this._subscribed) {\n      return;\n    }\n    this._subscribed = subscribeHistoryStatesTimeWindow(\n      this.hass!,\n      (combinedHistory) => {\n        if (!this._subscribed) {\n          // Message came in before we had a chance to unload\n          return;\n        }\n        this._stateHistory = computeHistory(\n          this.hass!,\n          combinedHistory,\n          this.hass!.localize\n        );\n      },\n      this._hoursToShow,\n      this._entityIds\n    ).catch((err) => {\n      this._subscribed = undefined;\n      this._error = err;\n    });\n    this._setRedrawTimer();\n  }\n\n  private _redrawGraph() {\n    if (this._stateHistory) {\n      this._stateHistory = { ...this._stateHistory };\n    }\n  }\n\n  private _setRedrawTimer() {\n    // redraw the graph every minute to update the time axis\n    clearInterval(this._interval);\n    this._interval = window.setInterval(() => this._redrawGraph(), 1000 * 60);\n  }\n\n  private _unsubscribeHistoryTimeWindow() {\n    if (!this._subscribed) {\n      return;\n    }\n    clearInterval(this._interval);\n    this._subscribed.then((unsubscribe) => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n      this._subscribed = undefined;\n    });\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.has(\"_stateHistory\")) {\n      return true;\n    }\n    return hasConfigOrEntitiesChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (\n      !this._config ||\n      !this.hass ||\n      !this._hoursToShow ||\n      !this._entityIds.length\n    ) {\n      return;\n    }\n\n    if (!changedProps.has(\"_config\") && !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldConfig = changedProps.get(\"_config\") as\n      | HistoryGraphCardConfig\n      | undefined;\n\n    if (\n      changedProps.has(\"_config\") &&\n      (!this._subscribed ||\n        oldConfig?.entities !== this._config.entities ||\n        oldConfig?.hours_to_show !== this._hoursToShow)\n    ) {\n      this._unsubscribeHistoryTimeWindow();\n      this._subscribeHistoryTimeWindow();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    if (this._error) {\n      return html`<div class=\"errors\">${this._error}</div>`;\n    }\n\n    return html`\n      <ha-card .header=${this._config.title}>\n        <div\n          class=\"content ${classMap({\n            \"has-header\": !!this._config.title,\n          })}\"\n        >\n          <state-history-charts\n            .hass=${this.hass}\n            .isLoadingData=${!this._stateHistory}\n            .historyData=${this._stateHistory}\n            .names=${this._names}\n            up-to-now\n            .showNames=${this._config.show_names !== undefined\n              ? this._config.show_names\n              : true}\n          ></state-history-charts>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        height: 100%;\n      }\n      .content {\n        padding: 16px;\n      }\n      .has-header {\n        padding-top: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-history-graph-card\": HuiHistoryGraphCard;\n  }\n}\n"],"names":[],"sourceRoot":""}