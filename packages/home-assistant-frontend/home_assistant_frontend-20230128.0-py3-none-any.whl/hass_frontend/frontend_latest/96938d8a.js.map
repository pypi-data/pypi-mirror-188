{"version":3,"file":"96938d8a.js","mappings":";;AAwDA;AACA;;;;AAIA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AAIA;AACA;;;AA7BA;;AAEA;;AAiCA;;;;;;;;;AAWA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-input-select-entity-row.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/ha-select\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport {\n  InputSelectEntity,\n  setInputSelectOption,\n} from \"../../../data/input_select\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { LovelaceRow } from \"./types\";\n\n@customElement(\"hui-input-select-entity-row\")\nclass HuiInputSelectEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntitiesCardEntityConfig;\n\n  public setConfig(config: EntitiesCardEntityConfig): void {\n    if (!config || !config.entity) {\n      throw new Error(\"Entity must be specified\");\n    }\n\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as\n      | InputSelectEntity\n      | undefined;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row\n        .hass=${this.hass}\n        .config=${this._config}\n        hideName\n      >\n        <ha-select\n          .label=${this._config.name || computeStateName(stateObj)}\n          .value=${stateObj.state}\n          .disabled=${\n            stateObj.state === UNAVAILABLE /* UNKNWON state is allowed */\n          }\n          naturalMenuWidth\n          @selected=${this._selectedChanged}\n          @click=${stopPropagation}\n          @closed=${stopPropagation}\n        >\n          ${stateObj.attributes.options\n            ? stateObj.attributes.options.map(\n                (option) =>\n                  html`<mwc-list-item .value=${option}\n                    >${option}</mwc-list-item\n                  >`\n              )\n            : \"\"}\n        </ha-select>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  static styles = css`\n    hui-generic-entity-row {\n      display: flex;\n      align-items: center;\n    }\n    ha-select {\n      width: 100%;\n      --ha-select-min-width: 0;\n    }\n  `;\n\n  private _selectedChanged(ev): void {\n    const stateObj = this.hass!.states[\n      this._config!.entity\n    ] as InputSelectEntity;\n    const option = ev.target.value;\n    if (\n      option === stateObj.state ||\n      !stateObj.attributes.options.includes(option)\n    ) {\n      return;\n    }\n\n    forwardHaptic(\"light\");\n\n    setInputSelectOption(this.hass!, stateObj.entity_id, option);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-select-entity-row\": HuiInputSelectEntityRow;\n  }\n}\n"],"names":[],"sourceRoot":""}