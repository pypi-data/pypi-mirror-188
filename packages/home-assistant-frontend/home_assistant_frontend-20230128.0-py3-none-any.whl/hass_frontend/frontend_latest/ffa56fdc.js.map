{"version":3,"file":"ffa56fdc.js","mappings":";;AA6CA;;;AAKA;;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;AAMA;;AAGA;AACA;;;AAGA;AACA;;AAEA;AAEA;AACA;;;;AAOA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAmGA","sources":["webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-humidifier.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/ha-select\";\nimport \"../../../components/ha-slider\";\nimport \"../../../components/ha-switch\";\nimport {\n  HumidifierEntity,\n  HUMIDIFIER_SUPPORT_MODES,\n} from \"../../../data/humidifier\";\nimport { HomeAssistant } from \"../../../types\";\n\nclass MoreInfoHumidifier extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: HumidifierEntity;\n\n  private _resizeDebounce?: number;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html``;\n    }\n\n    const hass = this.hass;\n    const stateObj = this.stateObj;\n\n    const supportModes = supportsFeature(stateObj, HUMIDIFIER_SUPPORT_MODES);\n\n    const rtlDirection = computeRTLDirection(hass);\n\n    return html`\n      <div\n        class=${classMap({\n          \"has-modes\": supportModes,\n        })}\n      >\n        <div class=\"container-humidity\">\n          <div>${hass.localize(\"ui.card.humidifier.humidity\")}</div>\n          <div class=\"single-row\">\n            <div class=\"target-humidity\">${stateObj.attributes.humidity} %</div>\n            <ha-slider\n              step=\"1\"\n              pin\n              ignore-bar-touch\n              dir=${rtlDirection}\n              .min=${stateObj.attributes.min_humidity}\n              .max=${stateObj.attributes.max_humidity}\n              .value=${stateObj.attributes.humidity}\n              @change=${this._targetHumiditySliderChanged}\n            >\n            </ha-slider>\n          </div>\n        </div>\n\n        ${supportModes\n          ? html`\n              <ha-select\n                .label=${hass.localize(\"ui.card.humidifier.mode\")}\n                .value=${stateObj.attributes.mode}\n                fixedMenuPosition\n                naturalMenuWidth\n                @selected=${this._handleModeChanged}\n                @closed=${stopPropagation}\n              >\n                ${stateObj.attributes.available_modes!.map(\n                  (mode) => html`\n                    <mwc-list-item .value=${mode}>\n                      ${hass.localize(\n                        `state_attributes.humidifier.mode.${mode}`\n                      ) || mode}\n                    </mwc-list-item>\n                  `\n                )}\n              </ha-select>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (!changedProps.has(\"stateObj\") || !this.stateObj) {\n      return;\n    }\n\n    if (this._resizeDebounce) {\n      clearTimeout(this._resizeDebounce);\n    }\n    this._resizeDebounce = window.setTimeout(() => {\n      fireEvent(this, \"iron-resize\");\n      this._resizeDebounce = undefined;\n    }, 500);\n  }\n\n  private _targetHumiditySliderChanged(ev) {\n    const newVal = ev.target.value;\n    this._callServiceHelper(\n      this.stateObj!.attributes.humidity,\n      newVal,\n      \"set_humidity\",\n      { humidity: newVal }\n    );\n  }\n\n  private _handleModeChanged(ev) {\n    const newVal = ev.target.value || null;\n    this._callServiceHelper(\n      this.stateObj!.attributes.mode,\n      newVal,\n      \"set_mode\",\n      { mode: newVal }\n    );\n  }\n\n  private async _callServiceHelper(\n    oldVal: unknown,\n    newVal: unknown,\n    service: string,\n    data: {\n      entity_id?: string;\n      [key: string]: unknown;\n    }\n  ) {\n    if (oldVal === newVal) {\n      return;\n    }\n\n    data.entity_id = this.stateObj!.entity_id;\n    const curState = this.stateObj;\n\n    await this.hass.callService(\"humidifier\", service, data);\n\n    // We reset stateObj to re-sync the inputs with the state. It will be out\n    // of sync if our service call did not result in the entity to be turned\n    // on. Since the state is not changing, the resync is not called automatic.\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    // No need to resync if we received a new state.\n    if (this.stateObj !== curState) {\n      return;\n    }\n\n    this.stateObj = undefined;\n    await this.updateComplete;\n    // Only restore if not set yet by a state change\n    if (this.stateObj === undefined) {\n      this.stateObj = curState;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        color: var(--primary-text-color);\n      }\n\n      ha-select {\n        width: 100%;\n      }\n\n      .container-humidity .single-row {\n        display: flex;\n        height: 50px;\n      }\n\n      .target-humidity {\n        width: 90px;\n        font-size: 200%;\n        margin: auto;\n        direction: ltr;\n      }\n\n      .single-row {\n        padding: 8px 0;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"more-info-humidifier\", MoreInfoHumidifier);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-humidifier\": MoreInfoHumidifier;\n  }\n}\n"],"names":[],"sourceRoot":""}