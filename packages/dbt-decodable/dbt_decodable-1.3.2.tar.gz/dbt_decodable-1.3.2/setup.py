# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['dbt',
 'dbt.adapters',
 'dbt.adapters.decodable',
 'dbt.include.decodable',
 'decodable',
 'decodable.client',
 'decodable.config',
 'tests',
 'tests.functional.adapter.simple',
 'tests.unit',
 'tests.unit.decodable',
 'tests.unit.decodable.client',
 'tests.unit.decodable.config']

package_data = \
{'': ['*'],
 'dbt.include.decodable': ['macros/*',
                           'macros/materializations/seed/*',
                           'macros/materializations/table/*',
                           'macros/materializations/test/*',
                           'macros/materializations/unsupported/*']}

install_requires = \
['dbt-core>=1.3.1,<1.4.0']

setup_kwargs = {
    'name': 'dbt-decodable',
    'version': '1.3.2',
    'description': 'The Decodable adapter plugin for DBT',
    'long_description': "# dbt-decodable\n\n[dbt] adapter for [Decodable].\n\n[dbt] enables data analysts and engineers to transform their data using the same practices that software engineers use to build applications.\n\nDecodable is a fully managed stream processing service, based on [Apache Flink®] and using SQL as the primary means of defining data streaming pipelines.\n\n## Installation\n\n`dbt-decodable` is available on [PyPI]. To install the latest version via `pip` (optionally using a virtual environment),\nrun:\n\n```nofmt\npython3 -m venv dbt-venv         # create the virtual environment\nsource dbt-venv/bin/activate     # activate the virtual environment\npip install dbt-decodable        # install the adapter\n```\n\n## Configuring your profile\n\nProfiles in dbt describe a set of configurations specific to a connection with the underlying data warehouse. Each dbt project should have a corresponding profile (though profiles can be reused for different project). Within a profile, multiple targets can be described to further control dbt's behavior. For example, it's very common to have a `dev` target for development and a `prod` target for production related configurations.\n\nMost of the profile configuration options available can be found inside the [`dbt documentation`](https://docs.getdbt.com/reference/profiles.yml). Additionally, `dbt-decodable` defines a few adapter-specific ones that can be found below.\n\n```yml\ndbt-decodable:        # the name of the profile\n  target: dev         # the default target to run commands with\n  outputs:            # the list of all defined targets under this profile\n    dev:              # the name of the target\n      type: decodable\n      database: None  # Ignored by this adapter, but required properties\n      schema: None    # Ignored by this adapter, but required properties\n\n      # decodable specific settings\n      account_name: [your account]          # Decodable account name\n      profile_name: [name of the profile]   # Decodable profile name\n      materialize_tests: [true | false]     # whether to materialize tests as a pipeline/stream pair, default is `false`\n      timeout: [ms]                         # maximum accumulative time a preview request should run for, default is `60000`\n      preview_start: [earliest | latest]    # whether preview should be run with `earliest` or `latest` start position, default is `earliest`\n      local_namespace: [namespace prefix]   # prefix added to all entities created on Decodable, default is `None`, meaning no prefix gets added.\n```\n\ndbt looks for the `profiles.yml` file in the `~/.dbt` directory. This file contains all user profiles.\n\n## Supported Features\n\n### Materializations\n\nOnly table [materialization](https://docs.getdbt.com/docs/build/materializations) is supported for dbt models at the moment. A dbt table model translates to a pipeline/stream pair on Decodable, both sharing the same name. Pipelines for models are automatically activated upon materialization.\n\nTo materialize your models simply run the [`dbt run`](https://docs.getdbt.com/reference/commands/run) command, which will perform the following steps for each model:\n\n1. Create a stream with the model's name and schema inferred by Decodable from the model's SQL.\n\n2. Create a pipeline that inserts the SQL's results into the newly created stream.\n\n3. Activate the pipeline.\n\nBy default, the adapter will not tear down and recreate the model on Decodable if no changes to the model have been detected. Invoking dbt with the `--full-refresh` flag set, or setting that configuration option for a specific model will cause the corresponding resources on Decodable to be destroyed and built from scratch. See the [docs](https://docs.getdbt.com/reference/resource-configs/full_refresh) for more information on using this option.\n\n### Custom model configuration\n\nA `watermark` option can be configured to specify the [watermark](https://docs.decodable.co/docs/streams#managing-streams) to be set for the model's respective Decodable stream.\n\nMore on specifying configuration options per model can be found [here](https://docs.getdbt.com/reference/model-configs).\n\n### Seeds\n\n[`dbt seed`](https://docs.getdbt.com/reference/commands/seed/) will perform the following steps for each specified seed:\n\n1. Create a REST connection and an associated stream with the same name (reflecting the seed's name).\n\n2. Activate the connection.\n\n3. Send the data stored in the seed's `.csv` file to the connection as events.\n\n4. Deactivate the connection.\n\nAfter these steps are completed, you can access the seed's data on the newly created stream.\n\n### Sources\n\n[`Sources`](https://docs.getdbt.com/docs/build/sources) in dbt correspond to Decodable's source connections. However, `dbt source` command is not supported at the moment.\n\n### Documentation\n\n[`dbt docs`](https://docs.getdbt.com/reference/commands/cmd-docs) is not supported at the moment. You can check your Decodable account for details about your models.\n\n### Testing\n\nBased on the `materialize_tests` option set for the current target, [`dbt test`](https://docs.getdbt.com/reference/commands/test) will behave differently:\n\n* `materialize_tests = false` will cause dbt to run the specified tests as previews return the results after they finish. The exact time the preview runs for, as well as whether they run starting positions should be set to `earliest` or `latest` can be changed using the `timeout` and `preview_start` target configurations respectively.\n\n* `materialize_tests = true` will cause dbt to persist the specified tests as pipeline/stream pairs on Decodable. This configuration is designed to allow continous testing of your models. You can then run a preview on the created stream (for example using [Decodable CLI]) to monitor the results.\n\n### Snapshots\n\nNeither the [`dbt snapshot`] command nor the notion of snapshots are supported at the moment.\n\n### Additional Operations\n\n`dbt-decodable` provides a set of commands for managing the project's resources on Decodable. Those commands can be run using [`dbt run-operation {name} --args {args}`](https://docs.getdbt.com/reference/commands/run-operation).\n\nExample invocation of the `delete_streams` operation detailed below:\n\n```bash\n$ dbt run-operation delete_streams --args '{streams: [stream1, stream2], skip_errors: True}'\n```\n\n___\n\n#### **`stop_pipelines(pipelines)`**\n\n**pipelines** : Optional list of names. Default value is `None`.\n\nDeactivate pipelines for resources defined within the project. If the `pipelines` arg is provided, the command only considers the listed resources. Otherwise, it deactivates all pipelines associated with the project.\n\n___\n\n#### **`delete_pipelines(pipelines)`**\n\n**pipelines** : Optional list of names. Default value is `None`.\n\nDelete pipelines for resources defined within the project. If the `pipelines` arg is provided, the command only considers the listed resources. Otherwise, it deletes all pipelines associated with the project.\n\n___\n\n#### **`delete_streams(streams, skip_errors)`**\n\n**streams** : Optional list of names. Default value is `None`. <br>\n**skip_errors** : Whether to treat errors as warnings. Default value is `true`.\n\nDelete streams for resources defined within the project. Note that it does not delete pipelines associated with those streams, failing to remove a stream if one exists. For a complete removal of stream/pipeline pairs, see the `cleanup` operation. <br>\nIf the `streams` arg is provided, the command only considers the listed resources. Otherwise, it attempts to delete all streams associated with the project. <br>\nIf `skip_errors` is set to `true`, failure to delete a stream (e.g. due to an associated pipeline) will be reported as a warning. Otherwise, the operation stops upon the first error encountered.\n\n___\n\n#### **`cleanup(list, models, seeds, tests)`**\n\n**list** : Optional list of names. Default value is `None`. <br>\n**models** : Whether to include models during cleanup. Default value is `true`. <br>\n**seeds** : Whether to include seeds during cleanup. Default value is `true`. <br>\n**tests** : Whether to include tests during cleanup. Default value is `true`.\n\nDelete all Decodable entities resulting from the materialization of the project's resources, i.e. connections, streams and pipelines. <br>\nIf the `list` arg is provided, the command only considers the listed resources. Otherwise, it deletes all entities associated with the project. <br>\nThe `models`, `seeds` and `tests` arguments specify whether those resource types should be included in the cleanup. Note that cleanup does nothing for tests that have not been materialized.\n\n## Contributions\n\nContributions to this repository are more than welcome.\nThe [gitflow] development model is used for this repository,\nplease create any pull requests against the [develop] branch.\n\n## License\n\nThis code base is available under the Apache License, version 2.\n\nApache Flink, Flink®, Apache®, the squirrel logo, and the Apache feather logo are either registered trademarks or trademarks of The Apache Software Foundation.\n\n[Apache Flink]: https://flink.apache.org/\n[dbt]: https://www.getdbt.com/\n[Decodable]: https://www.decodable.co/\n[Decodable CLI]: https://docs.decodable.co/docs/command-line-interface\n[develop]: https://github.com/decodableco/dbt-decodable/tree/develop\n[gitflow]: https://nvie.com/posts/a-successful-git-branching-model/\n[PyPI]: https://pypi.org/project/dbt-decodable/\n",
    'author': 'Getindata',
    'author_email': 'hello@getindata.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/decodableco/dbt-decodable',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7.2',
}


setup(**setup_kwargs)
