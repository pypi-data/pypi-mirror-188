@Library('jenkins-shared-library@morelia-shared-library') _
pipeline {
    environment {
        GIT_CI_CREDENTIALS = credentials('Morelia(Roman.Mhoian)')
        DOCKER_NETWORK_NAME = "ealp-${UUID.randomUUID().toString()}"
        TEST_AGENT_ID = "ealj-testagent-${UUID.randomUUID().toString()}"
        RC_BRANCH_NAME = "${params.RC_BRANCH_NAME}"
        RD_VERSION = "${params.RD_VERSION}"
        USERNAME = credentials('morelia_bams_username')
        PASSWORD = credentials('morelia_bams_password')

        TEST_AGENT = "EAPI-testagent-${JOB_BASE_NAME}-py"

        DOCKER_EIKON = "ealp-eikon-${UUID.randomUUID().toString()}-py"

        EDP_USERNAME = credentials('RDP_LOGIN-1855')
        EDP_PASSWORD = credentials('RDP_PASSWORD-1855')
        DESKTOP_APP_KEY = credentials('APP_KEY-1855')

        RDP_USERNAME = credentials('RDP_USERNAME_MORELIA')
        RDP_PASSWORD = credentials('RDP_PASSWORD_MORELIA')

        PROD_USERNAME = credentials('TEST_USER_12')
        PROD_PASSWORD = credentials('TEST_USER_12_PASSWORD')

        GIT_BRANCH = "${params.GIT_BRANCH}"
        DEPLOYED_PLATFORM_HOST = "10.187.14.95:15000"
        DEPLOYED_PLATFORM_USER_NAME = " "
    }

    options {
        timestamps()
        disableConcurrentBuilds()
    }

    agent {label 'slave5'}

    stages {
        stage('Build package and deploy to BAMS') {
                steps {
                    script {
                        sh "docker network create ${DOCKER_NETWORK_NAME}"
                        docker.build("release-candidate-env", "-f .jenkins/DockerFile .").inside('--name ${TEST_AGENT_ID} --net ${DOCKER_NETWORK_NAME} -v /var/run/docker.sock:/var/run/docker.sock -u 0') {
                            sh 'rm -rf ./refinitiv-data'
                            sh 'git clone --single-branch --branch ${RC_BRANCH_NAME} https://${GIT_CI_CREDENTIALS}@gitlab.dx1.lseg.com/206243/dapi/python-libraries/refinitiv-data.git'
                            sh 'pip install setuptools==57.4.0 wheel==0.36.2 twine==3.4.2 build'
                            sh 'cd ./refinitiv-data/ && python3 -m build .'
                            sh 'twine upload --username ${USERNAME} --password ${PASSWORD} --config-file ./.pypirc -r bams  --verbose ./refinitiv-data/dist/*'
                        }
                    }
                }
            }
        stage('Run Workspace') {
            steps {
                    runApiProxy()
                }
            }
        stage('Post-release check') {
            steps {
                script {
                     docker.image("python:${PY_VER}").inside('--name ${TEST_AGENT} --net ${DOCKER_NETWORK_NAME} -v /var/run/docker.sock:/var/run/docker.sock -u 0') {
                            setUpSocatAndTox()
                            dir('tests/tests_external_notebooks') {
                                sh 'git clone -b ${GIT_BRANCH} https://github.com/Refinitiv-API-Samples/Example.DataLibrary.Python.git'
                                dir('Example.DataLibrary.Python/') {
                                    sh 'rm Configuration/refinitiv-data.config.json || true'
                                    sh 'rm Configuration/refinitiv-data.custom.config.json || true'
                                }
                                sh 'cp refinitiv-data.config.json ./Example.DataLibrary.Python/Configuration'
                                sh 'cp refinitiv-data.custom.config.json ./Example.DataLibrary.Python/Configuration'
                                sh 'python3 -m tox -e post_release_check_on_bams'
                            }
                        }
                    }
                }
            }
        }

    post {
        always {
            removeDockerNetwork()
        }
    }
}