{"version":3,"file":"101.b14b8c98dade650fe22f.js?v=b14b8c98dade650fe22f","mappings":"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","sources":["webpack://@deathbeds/jyg/./js/sources/_base.ts","webpack://@deathbeds/jyg/./js/sources/window-proxy.ts"],"sourcesContent":["import { PromiseDelegate } from '@lumino/coreutils';\n\nimport { DEBUG, EMOJI, IRemoteCommandManager } from '../tokens';\nimport * as M from '../_msgV0';\n\nexport interface IOptions {\n  remoteCommands: IRemoteCommandManager;\n}\n\nexport class BaseCommandSource<T extends any = any, U extends IOptions = any> {\n  protected _remoteCommands: IRemoteCommandManager;\n  protected _client: T | null = null;\n  protected _ready = new PromiseDelegate<void>();\n\n  constructor(options: U) {\n    this._remoteCommands = options.remoteCommands;\n  }\n\n  async initialize(options: U): Promise<void> {\n    this._client = await this.initClient(options);\n  }\n\n  /* istanbul ignore next */\n  protected async initClient(options: U): Promise<T> {\n    return null as any;\n  }\n\n  protected onRequest = async (request: M.AnyRequest, source: T): Promise<any> => {\n    await this._ready;\n    /* istanbul ignore next */\n    DEBUG && console.warn(EMOJI, 'message received', request);\n    let responseContent: any;\n    let error: any = null;\n    const { request_id, request_type } = request;\n    const header = { request_id, request_type };\n\n    switch (request_type) {\n      case 'app_info':\n        responseContent = await this._remoteCommands.getAppInfo();\n        break;\n      case 'run':\n        try {\n          responseContent = await this._remoteCommands.run(\n            request.content.id,\n            request.content.args || {}\n          );\n        } catch (err) {\n          error = err;\n        }\n        break;\n      /* istanbul ignore next */\n      default:\n        console.warn(EMOJI, 'unexpected request', request);\n        return {};\n    }\n\n    try {\n      if (error) {\n        await this.sendError({ error: `${error}`, ...header }, source);\n      } else {\n        await this.sendResponse(\n          { content: responseContent || null, ...header } as any,\n          source\n        );\n      }\n    } catch (err) {\n      await this.sendError(\n        { error: `multiple errors\\n${err}\\n${error}`, ...header },\n        source\n      );\n    }\n  };\n\n  /* istanbul ignore next */\n  protected async sendError(error: M.ErrorResponse, source: T): Promise<void> {\n    // nothing here\n  }\n\n  /* istanbul ignore next */\n  protected async sendResponse(response: M.AnyValidResponse, source: T): Promise<void> {\n    // nothing here\n  }\n}\n","import { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport * as M from '../_msgV0';\nimport * as P from '../_windowProxy';\nimport { IWindowProxyCommandSource, IRemoteCommandSource, EMOJI } from '../tokens';\n\nimport { BaseCommandSource, IOptions as _IOptions } from './_base';\n\nexport interface IOptions extends _IOptions {\n  appReady: Promise<void>;\n}\n\nexport class WindowProxyCommandSource\n  extends BaseCommandSource<WindowProxy | Worker>\n  implements IRemoteCommandSource, IWindowProxyCommandSource\n{\n  protected _sources: (WindowProxy | Worker)[] = [];\n  protected _listening = false;\n  protected _settings: ISettingRegistry.ISettings | null = null;\n\n  async initClient(options: IOptions): Promise<any> {\n    await options.appReady;\n    return null;\n  }\n\n  set settings(settings: ISettingRegistry.ISettings) {\n    if (this._settings) {\n      throw new Error('already has settings');\n    }\n    this._settings = settings;\n    settings.changed.connect(this.onSettingsChanged, this);\n    this.onSettingsChanged();\n  }\n\n  onSettingsChanged(): void {\n    if (this._settings?.composite.enabled && this._listening) {\n      this.unlisten();\n    }\n  }\n\n  listen() {\n    if (this.composite.enabled) {\n      window.addEventListener('message', this.onSourceMessage);\n      this._listening = true;\n    }\n  }\n\n  unlisten() {\n    window.removeEventListener('message', this.onSourceMessage);\n    this._listening = false;\n    this._sources = [];\n  }\n\n  addSource(source: WindowProxy | Worker, origin: string): void {\n    const allowedSource = this.isAllowedSource(source as any, origin);\n\n    if (allowedSource) {\n      this._sources.push(allowedSource);\n\n      if (!this._listening) {\n        this.listen();\n      }\n    }\n  }\n\n  removeSource(source: WindowProxy | Worker): void {\n    const i = this._sources.indexOf(source);\n    if (i != -1) {\n      this._sources = this._sources.splice(i, 1);\n    }\n    if (!this._sources.length) {\n      this.unlisten();\n    }\n  }\n\n  protected onSourceMessage = async (ev: MessageEvent<any>): Promise<void> => {\n    if (!this.composite.enabled) {\n      this.unlisten();\n      return;\n    }\n\n    const { source, origin } = ev;\n    const allowedSource = this.isAllowedSource(source, origin);\n    if (allowedSource) {\n      this.onRequest(JSON.parse(ev.data), allowedSource).catch(this.onError);\n    }\n  };\n\n  get composite(): P.RemoteCommandsWindow {\n    return (this._settings?.composite || {}) as P.RemoteCommandsWindow;\n  }\n\n  isAllowedSource(\n    source: MessageEventSource | null,\n    origin: string\n  ): WindowProxy | null {\n    if (!(this.composite.enabled && source)) {\n      return null;\n    }\n\n    const { composite } = this;\n\n    if (composite.allow_same_origin && origin == window.origin) {\n      return source as WindowProxy;\n    }\n\n    if (composite.allowed_origins && composite.allowed_origins.includes(origin)) {\n      return source as WindowProxy;\n    }\n\n    return null;\n  }\n\n  async sendResponse(\n    response: M.AnyResponse,\n    source: WindowProxy | Worker\n  ): Promise<void> {\n    source.postMessage(JSON.stringify(response));\n  }\n\n  async sendError(error: M.ErrorResponse, source: WindowProxy | Worker): Promise<void> {\n    source.postMessage(JSON.stringify(error));\n  }\n\n  async onError(error: any) {\n    console.error(EMOJI, 'encountered an error', error);\n  }\n}\n"],"names":["BaseCommandSource","constructor","options","_client","_ready","PromiseDelegate","onRequest","async","request","source","responseContent","this","console","warn","error","request_id","request_type","header","_remoteCommands","getAppInfo","run","content","id","args","err","sendError","sendResponse","remoteCommands","initClient","response","WindowProxyCommandSource","_sources","_listening","_settings","onSourceMessage","ev","composite","enabled","unlisten","origin","allowedSource","isAllowedSource","JSON","parse","data","catch","onError","appReady","settings","Error","changed","connect","onSettingsChanged","listen","window","addEventListener","removeEventListener","addSource","push","removeSource","i","indexOf","splice","length","allow_same_origin","allowed_origins","includes","postMessage","stringify"],"sourceRoot":""}