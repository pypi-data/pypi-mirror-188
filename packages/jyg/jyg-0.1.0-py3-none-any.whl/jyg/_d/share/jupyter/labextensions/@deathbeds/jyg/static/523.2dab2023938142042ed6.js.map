{"version":3,"file":"523.2dab2023938142042ed6.js?v=2dab2023938142042ed6","mappings":"qJASO,MAAMA,EAKXC,YAAYC,GAHF,KAAAC,QAAoB,KACpB,KAAAC,OAAS,IAAI,EAAAC,gBAeb,KAAAC,UAAYC,MAAOC,EAAuBC,KAIlD,IAAIC,QAHEC,KAAKP,OAEX,MAASQ,QAAQC,KAAK,KAAO,mBAAoBL,GAEjD,IAAIM,EAAa,KACjB,MAAM,WAAEC,EAAU,aAAEC,GAAiBR,EAC/BS,EAAS,CAAEF,aAAYC,gBAE7B,OAAQA,GACN,IAAK,WACHN,QAAwBC,KAAKO,gBAAgBC,aAC7C,MACF,IAAK,MACH,IACET,QAAwBC,KAAKO,gBAAgBE,IAC3CZ,EAAQa,QAAQC,GAChBd,EAAQa,QAAQE,MAAQ,CAAC,E,CAE3B,MAAOC,GACPV,EAAQU,C,CAEV,MAEF,QAEE,OADAZ,QAAQC,KAAK,KAAO,qBAAsBL,GACnC,CAAC,EAGZ,IACMM,QACIH,KAAKc,UAAU,CAAEX,MAAO,GAAGA,OAAYG,GAAUR,SAEjDE,KAAKe,aAAa,CAAEL,QAASX,KAAoBO,GAAiBR,E,CAE1E,MAAOe,SACDb,KAAKc,UACT,CAAEX,MAAO,oBAAoBU,MAAQV,OAAYG,GACjDR,E,GAlDJE,KAAKO,gBAAkBhB,EAAQyB,cACjC,CAEApB,iBAAiBL,GACfS,KAAKR,cAAgBQ,KAAKiB,WAAW1B,EACvC,CAGUK,iBAAiBL,GACzB,OAAO,IACT,CA8CUK,gBAAgBO,EAAwBL,GAElD,CAGUF,mBAAmBsB,EAA8BpB,GAE3D,E,gICrEK,MAAMqB,EAAU,EAAAC,OAAA,KAAY,EAAAC,WAAA,aAAyB,OAC/CC,EAAS,EAAAF,OAAA,KAAYD,EAAS,MAAMI,QAAQ,QAAS,MAO3D,MAAMC,UACH,IADV,c,oBAIY,KAAA/B,OAAS,IAAI,EAAAC,gBAWb,KAAA+B,UAAY7B,MAAO8B,IAC3B1B,KAAKL,UAAUgC,KAAKC,MAAMF,EAAGG,MAAO7B,KAAKR,SAAUsC,MAAM9B,KAAK+B,QAAQ,EAY9D,KAAAC,QAAUpC,MAAO8B,IACzBzB,QAAQC,KAAK,KAAO,uBAAwBwB,EAAG,EAIvC,KAAAK,QAAUnC,MAAO8B,IACzBzB,QAAQE,MAAM,KAAO,gCAAiCuB,EAAG,CAE7D,CA9BE9B,iBAAiBL,GACf,MAAM0C,EAAK,IAAI1C,EAAQ2C,eAAeC,UAAUb,GAKhD,OAJAW,EAAGG,OAAS,IAAMpC,KAAKP,OAAO4C,UAC9BJ,EAAGK,UAAYtC,KAAKyB,UACpBQ,EAAGM,QAAUvC,KAAKgC,QAClBC,EAAGO,QAAUxC,KAAK+B,QACXE,CACT,CAMArC,mBAAmBsB,GACjBlB,KAAKR,QAASiD,KAAKd,KAAKe,UAAUxB,GACpC,CAEAtB,gBAAgBO,GACdH,KAAKR,QAASiD,KAAKd,KAAKe,UAAUvC,GACpC,E","sources":["webpack://@deathbeds/jyg/./js/sources/_base.ts","webpack://@deathbeds/jyg/./js/sources/websocket.ts"],"sourcesContent":["import { PromiseDelegate } from '@lumino/coreutils';\n\nimport { DEBUG, EMOJI, IRemoteCommandManager } from '../tokens';\nimport * as M from '../_msgV0';\n\nexport interface IOptions {\n  remoteCommands: IRemoteCommandManager;\n}\n\nexport class BaseCommandSource<T extends any = any, U extends IOptions = any> {\n  protected _remoteCommands: IRemoteCommandManager;\n  protected _client: T | null = null;\n  protected _ready = new PromiseDelegate<void>();\n\n  constructor(options: U) {\n    this._remoteCommands = options.remoteCommands;\n  }\n\n  async initialize(options: U): Promise<void> {\n    this._client = await this.initClient(options);\n  }\n\n  /* istanbul ignore next */\n  protected async initClient(options: U): Promise<T> {\n    return null as any;\n  }\n\n  protected onRequest = async (request: M.AnyRequest, source: T): Promise<any> => {\n    await this._ready;\n    /* istanbul ignore next */\n    DEBUG && console.warn(EMOJI, 'message received', request);\n    let responseContent: any;\n    let error: any = null;\n    const { request_id, request_type } = request;\n    const header = { request_id, request_type };\n\n    switch (request_type) {\n      case 'app_info':\n        responseContent = await this._remoteCommands.getAppInfo();\n        break;\n      case 'run':\n        try {\n          responseContent = await this._remoteCommands.run(\n            request.content.id,\n            request.content.args || {}\n          );\n        } catch (err) {\n          error = err;\n        }\n        break;\n      /* istanbul ignore next */\n      default:\n        console.warn(EMOJI, 'unexpected request', request);\n        return {};\n    }\n\n    try {\n      if (error) {\n        await this.sendError({ error: `${error}`, ...header }, source);\n      } else {\n        await this.sendResponse({ content: responseContent, ...header } as any, source);\n      }\n    } catch (err) {\n      await this.sendError(\n        { error: `multiple errors\\n${err}\\n${error}`, ...header },\n        source\n      );\n    }\n  };\n\n  /* istanbul ignore next */\n  protected async sendError(error: M.ErrorResponse, source: T): Promise<void> {\n    // nothing here\n  }\n\n  /* istanbul ignore next */\n  protected async sendResponse(response: M.AnyValidResponse, source: T): Promise<void> {\n    // nothing here\n  }\n}\n","import { URLExt, PageConfig } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { PromiseDelegate } from '@lumino/coreutils';\n\nimport * as M from '../_msgV0';\nimport { EMOJI, IRemoteCommandManager, IRemoteCommandSource } from '../tokens';\n\nimport { BaseCommandSource } from './_base';\n\nexport const API_URL = URLExt.join(PageConfig.getBaseUrl(), 'jyg');\nexport const WS_URL = URLExt.join(API_URL, 'ws').replace(/^http/, 'ws');\n\nexport interface IOptions {\n  serverSettings: ServerConnection.ISettings;\n  remoteCommands: IRemoteCommandManager;\n}\n\nexport class WebSocketCommandSource\n  extends BaseCommandSource<WebSocket>\n  implements IRemoteCommandSource\n{\n  protected _ready = new PromiseDelegate<void>();\n\n  async initClient(options: IOptions): Promise<WebSocket> {\n    const ws = new options.serverSettings.WebSocket(WS_URL);\n    ws.onopen = () => this._ready.resolve();\n    ws.onmessage = this.onMessage;\n    ws.onclose = this.onClose;\n    ws.onerror = this.onError;\n    return ws;\n  }\n\n  protected onMessage = async (ev: MessageEvent<any>): Promise<void> => {\n    this.onRequest(JSON.parse(ev.data), this._client!).catch(this.onError);\n  };\n\n  async sendResponse(response: M.AnyResponse): Promise<void> {\n    this._client!.send(JSON.stringify(response));\n  }\n\n  async sendError(error: M.ErrorResponse): Promise<void> {\n    this._client!.send(JSON.stringify(error));\n  }\n\n  /* istanbul ignore next */\n  protected onClose = async (ev: Event) => {\n    console.warn(EMOJI, 'websocket was closed', ev);\n  };\n\n  /* istanbul ignore next */\n  protected onError = async (ev: Event) => {\n    console.error(EMOJI, 'encountered a websocket error', ev);\n  };\n}\n"],"names":["BaseCommandSource","constructor","options","_client","_ready","PromiseDelegate","onRequest","async","request","source","responseContent","this","console","warn","error","request_id","request_type","header","_remoteCommands","getAppInfo","run","content","id","args","err","sendError","sendResponse","remoteCommands","initClient","response","API_URL","URLExt","PageConfig","WS_URL","replace","WebSocketCommandSource","onMessage","ev","JSON","parse","data","catch","onError","onClose","ws","serverSettings","WebSocket","onopen","resolve","onmessage","onclose","onerror","send","stringify"],"sourceRoot":""}