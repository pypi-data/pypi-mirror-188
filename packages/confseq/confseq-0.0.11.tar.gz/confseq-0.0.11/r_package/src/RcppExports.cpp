// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// normal_log_mixture
Rcpp::NumericVector normal_log_mixture(const Rcpp::NumericVector s, const Rcpp::NumericVector v, const double v_opt, const double alpha_opt, const bool is_one_sided);
RcppExport SEXP _confseq_normal_log_mixture(SEXP sSEXP, SEXP vSEXP, SEXP v_optSEXP, SEXP alpha_optSEXP, SEXP is_one_sidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const double >::type v_opt(v_optSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_opt(alpha_optSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_one_sided(is_one_sidedSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_log_mixture(s, v, v_opt, alpha_opt, is_one_sided));
    return rcpp_result_gen;
END_RCPP
}
// normal_mixture_bound
Rcpp::NumericVector normal_mixture_bound(const Rcpp::NumericVector v, const Rcpp::NumericVector alpha, const double v_opt, const double alpha_opt, const bool is_one_sided);
RcppExport SEXP _confseq_normal_mixture_bound(SEXP vSEXP, SEXP alphaSEXP, SEXP v_optSEXP, SEXP alpha_optSEXP, SEXP is_one_sidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type v_opt(v_optSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_opt(alpha_optSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_one_sided(is_one_sidedSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_mixture_bound(v, alpha, v_opt, alpha_opt, is_one_sided));
    return rcpp_result_gen;
END_RCPP
}
// gamma_exponential_log_mixture
Rcpp::NumericVector gamma_exponential_log_mixture(const Rcpp::NumericVector s, const Rcpp::NumericVector v, const double v_opt, const double c, const double alpha_opt);
RcppExport SEXP _confseq_gamma_exponential_log_mixture(SEXP sSEXP, SEXP vSEXP, SEXP v_optSEXP, SEXP cSEXP, SEXP alpha_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const double >::type v_opt(v_optSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_opt(alpha_optSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_exponential_log_mixture(s, v, v_opt, c, alpha_opt));
    return rcpp_result_gen;
END_RCPP
}
// gamma_exponential_mixture_bound
Rcpp::NumericVector gamma_exponential_mixture_bound(const Rcpp::NumericVector v, const Rcpp::NumericVector alpha, const double v_opt, const double c, const double alpha_opt);
RcppExport SEXP _confseq_gamma_exponential_mixture_bound(SEXP vSEXP, SEXP alphaSEXP, SEXP v_optSEXP, SEXP cSEXP, SEXP alpha_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type v_opt(v_optSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_opt(alpha_optSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_exponential_mixture_bound(v, alpha, v_opt, c, alpha_opt));
    return rcpp_result_gen;
END_RCPP
}
// gamma_poisson_log_mixture
Rcpp::NumericVector gamma_poisson_log_mixture(const Rcpp::NumericVector s, const Rcpp::NumericVector v, const double v_opt, const double c, const double alpha_opt);
RcppExport SEXP _confseq_gamma_poisson_log_mixture(SEXP sSEXP, SEXP vSEXP, SEXP v_optSEXP, SEXP cSEXP, SEXP alpha_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const double >::type v_opt(v_optSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_opt(alpha_optSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_poisson_log_mixture(s, v, v_opt, c, alpha_opt));
    return rcpp_result_gen;
END_RCPP
}
// gamma_poisson_mixture_bound
Rcpp::NumericVector gamma_poisson_mixture_bound(const Rcpp::NumericVector v, const Rcpp::NumericVector alpha, const double v_opt, const double c, const double alpha_opt);
RcppExport SEXP _confseq_gamma_poisson_mixture_bound(SEXP vSEXP, SEXP alphaSEXP, SEXP v_optSEXP, SEXP cSEXP, SEXP alpha_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type v_opt(v_optSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_opt(alpha_optSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_poisson_mixture_bound(v, alpha, v_opt, c, alpha_opt));
    return rcpp_result_gen;
END_RCPP
}
// beta_binomial_log_mixture
Rcpp::NumericVector beta_binomial_log_mixture(const Rcpp::NumericVector s, const Rcpp::NumericVector v, const double v_opt, const double g, const double h, const double alpha_opt, const bool is_one_sided);
RcppExport SEXP _confseq_beta_binomial_log_mixture(SEXP sSEXP, SEXP vSEXP, SEXP v_optSEXP, SEXP gSEXP, SEXP hSEXP, SEXP alpha_optSEXP, SEXP is_one_sidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const double >::type v_opt(v_optSEXP);
    Rcpp::traits::input_parameter< const double >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_opt(alpha_optSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_one_sided(is_one_sidedSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_binomial_log_mixture(s, v, v_opt, g, h, alpha_opt, is_one_sided));
    return rcpp_result_gen;
END_RCPP
}
// beta_binomial_mixture_bound
Rcpp::NumericVector beta_binomial_mixture_bound(const Rcpp::NumericVector v, const Rcpp::NumericVector alpha, const double v_opt, const double g, const double h, const double alpha_opt, const bool is_one_sided);
RcppExport SEXP _confseq_beta_binomial_mixture_bound(SEXP vSEXP, SEXP alphaSEXP, SEXP v_optSEXP, SEXP gSEXP, SEXP hSEXP, SEXP alpha_optSEXP, SEXP is_one_sidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type v_opt(v_optSEXP);
    Rcpp::traits::input_parameter< const double >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_opt(alpha_optSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_one_sided(is_one_sidedSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_binomial_mixture_bound(v, alpha, v_opt, g, h, alpha_opt, is_one_sided));
    return rcpp_result_gen;
END_RCPP
}
// poly_stitching_bound
Rcpp::NumericVector poly_stitching_bound(const Rcpp::NumericVector v, const Rcpp::NumericVector alpha, const double v_min, const double c, const double s, const double eta);
RcppExport SEXP _confseq_poly_stitching_bound(SEXP vSEXP, SEXP alphaSEXP, SEXP v_minSEXP, SEXP cSEXP, SEXP sSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type v_min(v_minSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(poly_stitching_bound(v, alpha, v_min, c, s, eta));
    return rcpp_result_gen;
END_RCPP
}
// empirical_process_lil_bound
Rcpp::NumericVector empirical_process_lil_bound(const Rcpp::NumericVector t, const Rcpp::NumericVector alpha, const double t_min, const double A);
RcppExport SEXP _confseq_empirical_process_lil_bound(SEXP tSEXP, SEXP alphaSEXP, SEXP t_minSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type t_min(t_minSEXP);
    Rcpp::traits::input_parameter< const double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(empirical_process_lil_bound(t, alpha, t_min, A));
    return rcpp_result_gen;
END_RCPP
}
// double_stitching_bound
Rcpp::NumericVector double_stitching_bound(const Rcpp::NumericVector quantile_p, const Rcpp::NumericVector t, const Rcpp::NumericVector alpha, const double t_opt, const double delta, const double s, const double eta);
RcppExport SEXP _confseq_double_stitching_bound(SEXP quantile_pSEXP, SEXP tSEXP, SEXP alphaSEXP, SEXP t_optSEXP, SEXP deltaSEXP, SEXP sSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type quantile_p(quantile_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type t_opt(t_optSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(double_stitching_bound(quantile_p, t, alpha, t_opt, delta, s, eta));
    return rcpp_result_gen;
END_RCPP
}
// bernoulli_confidence_interval
Rcpp::List bernoulli_confidence_interval(const Rcpp::NumericVector num_successes, const Rcpp::NumericVector num_trials, const double alpha, const double t_opt, const double alpha_opt);
RcppExport SEXP _confseq_bernoulli_confidence_interval(SEXP num_successesSEXP, SEXP num_trialsSEXP, SEXP alphaSEXP, SEXP t_optSEXP, SEXP alpha_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type num_successes(num_successesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type num_trials(num_trialsSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type t_opt(t_optSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_opt(alpha_optSEXP);
    rcpp_result_gen = Rcpp::wrap(bernoulli_confidence_interval(num_successes, num_trials, alpha, t_opt, alpha_opt));
    return rcpp_result_gen;
END_RCPP
}
// quantile_ab_p_value
double quantile_ab_p_value(const Rcpp::NumericVector a_values, const Rcpp::NumericVector b_values, const double quantile_p, const int t_opt, const double alpha_opt);
RcppExport SEXP _confseq_quantile_ab_p_value(SEXP a_valuesSEXP, SEXP b_valuesSEXP, SEXP quantile_pSEXP, SEXP t_optSEXP, SEXP alpha_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type a_values(a_valuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type b_values(b_valuesSEXP);
    Rcpp::traits::input_parameter< const double >::type quantile_p(quantile_pSEXP);
    Rcpp::traits::input_parameter< const int >::type t_opt(t_optSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_opt(alpha_optSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile_ab_p_value(a_values, b_values, quantile_p, t_opt, alpha_opt));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_confseq_normal_log_mixture", (DL_FUNC) &_confseq_normal_log_mixture, 5},
    {"_confseq_normal_mixture_bound", (DL_FUNC) &_confseq_normal_mixture_bound, 5},
    {"_confseq_gamma_exponential_log_mixture", (DL_FUNC) &_confseq_gamma_exponential_log_mixture, 5},
    {"_confseq_gamma_exponential_mixture_bound", (DL_FUNC) &_confseq_gamma_exponential_mixture_bound, 5},
    {"_confseq_gamma_poisson_log_mixture", (DL_FUNC) &_confseq_gamma_poisson_log_mixture, 5},
    {"_confseq_gamma_poisson_mixture_bound", (DL_FUNC) &_confseq_gamma_poisson_mixture_bound, 5},
    {"_confseq_beta_binomial_log_mixture", (DL_FUNC) &_confseq_beta_binomial_log_mixture, 7},
    {"_confseq_beta_binomial_mixture_bound", (DL_FUNC) &_confseq_beta_binomial_mixture_bound, 7},
    {"_confseq_poly_stitching_bound", (DL_FUNC) &_confseq_poly_stitching_bound, 6},
    {"_confseq_empirical_process_lil_bound", (DL_FUNC) &_confseq_empirical_process_lil_bound, 4},
    {"_confseq_double_stitching_bound", (DL_FUNC) &_confseq_double_stitching_bound, 7},
    {"_confseq_bernoulli_confidence_interval", (DL_FUNC) &_confseq_bernoulli_confidence_interval, 5},
    {"_confseq_quantile_ab_p_value", (DL_FUNC) &_confseq_quantile_ab_p_value, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_confseq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
