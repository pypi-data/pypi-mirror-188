# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'kafka_temporal_mapper', 'common': 'kafka_temporal_mapper/common'}

packages = \
['client', 'common']

package_data = \
{'': ['*']}

install_requires = \
['dacite>=1.7.0,<2.0.0',
 'dataclasses-json>=0.5.7,<0.6.0',
 'kafka-python>=2.0.2,<3.0.0']

setup_kwargs = {
    'name': 'kafka-temporal-mapper-client',
    'version': '0.1.0',
    'description': 'A client library to send subscribe and notify workflow events to the kafka-temporal-mapper server.',
    'long_description': '# Kafka-Temporal Mapper\n\nThe Kafka-Temporal mapper is a component which listens on Kafka for certain events and triggers \nTemporal workflows accordingly. The events it listens to can be:\n- Workflow event\n- Mapping event\n\nA workflow event is an event generated by a workflow which notifies the change of its status. \nFor example, when a workflow is successfully executed, it notifies this by publishing a message in Kafka in a specific topic.\nThis message can also contain arguments which can come from the parameters originally passed to the workflow, \nor from the results computed during its execution.\n\nA mapping event is an event generated by a Temporal workflow during worker initialization, and it is used subscribe to \na workflow event from another workflow. \nFor example, *Workflow B* sends a mapping (subscribe) message to the mapper indicating that it subscribes to \nworkflow events generated by *Workflow A*.\n\nIn this way when *Workflow A* executes successfully, it generates a workflow event which is received by the mapper,\nwhich in turn start *Workflow B*\n\n![overview](docs/mapper.svg)\n\n## Message format\nMessages are in a JSON format. \n\nA workflow event has currently the following format:\n```json\n{\n    "type": "workflow", \n    "name":"Workflow A",\n    "args": {"a":"hello", "b": {"c": "world"}}\n}\n```\nwhere *args* could be any value (not necessarily an object)\n\nA mapping event has a similar format:\n```json\n{\n    "type": "mapping", \n    "target":"Workflow B",\n    "triggers": [\n        { \n            "name": "Workflow A",\n            "args": {"a":"hello", "b":"@b.c"}\n        }\n    ] \n}\n```\nNote that in the `args`, the subscribing workflow can reference arguments from the triggering workflow, \nusing the `@` annotation. This is useful when passing parameters between the two workflows \n(ex: the results of one are passed as arguments to the other). \nIn the example above, `@b.c` refers to the triggering workflow args `args["b"]["c"]` and will be replaced by\nthe mapper with the right value `"world"` when starting *Workflow B*\n\n\n## Usage\nThis repository is based on the [cs template](https://github.com/canonical/cs-python-project-template), \nand uses [Poetry](https://python-poetry.org/docs/) for building and managing the dependencies.\nPlease refer to the readme of that project for more information on how to install *Poetry*.\n\nOnce Poetry is installed, run the following:\n```bash\n# Install the dependencies\nmake install-dev && make install\n\n#Start the kafka-temporal mapper server\nmake run\n```\n\nIn order to run a simple client test, make sure to run the worker of the *hello* workflow in our [samples repository](https://github.com/canonical/temporal-lib-samples).\nThen run:\n```bash\nmake run-cli\n```\nNote that the client would act as if the GreetingWorkflow registered to fictitious\nworkflow called *TriggerWorkflow*. Then, it will publish a workflow event as if the *TriggerWorkflow* executed\nsuccessfully. This would in turn make the worker execute the GreetingWorkflow.  \n\n\n## Client library\nIn addition to the mapping server which listens to Kafka, this project provides also a client library,\nwhich facilitates the interaction between the workflows and the mapping server.\nThis library is used by the workflows and provides methods for publishing of the workflow and mapping events. \n\nThe client provides two methods:\n- **subscribe**: used to subscribe a workflow to the execution of another workflow.   \n- **notify**: used by a workflow to notify the termination of its execution.  \n\n### Installation\n```bash\npip install kafka_temporal_mapper_client\n```\n\n### Usage\nTo use this library for notifying or subscribing:\n```python\nfrom kafka_temporal_mapper.client import KafkaTemporalClient\n\nktc = KafkaTemporalClient()\n\n# subscribe workflow B to workflow A using a part of A\'s results as argument (@b.c)\nktc.subscribe(\'WorkflowB\', [{\'name\':\'WorkflowA\', \'args\': {"a":"hello", "b":"@b.c"}}]) \n\n# notify workflow A execution and its results\nktc.notify(\'WorkflowA\', {"a":"hello", "b": {"c": "world"}})\n```\nAn example of usage of this library can be a workflow being triggered by another workflow, can be found in the our [samples repository](https://github.com/canonical/temporal-lib-samples/blob/main/docs/samples/event.md). \n',
    'author': 'CanonicalLtd',
    'author_email': 'genc.tato@canonical.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
