[tool.bandit]
# Skip assert_used check in test files
[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']


[tool.black]
line-length = 120


[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
force_grid_wrap = 2
include_trailing_comma = true
force_sort_within_sections = true
combine_as_imports = true
lines_after_imports = 2


[tool.mypy]
# function/decorator related settings
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_any_decorated = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true

# imports/generics
disallow_any_unimported = true
disallow_any_generics = true

# warnings
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
warn_no_return = true

# so that the same variable may be reused by redefining the type
allow_redefinition = true

# make mypy output a little more friendly
show_error_context = true
show_error_codes = true
pretty = true


[tool.pylint]
logging-format-style = "new"
score = false
# disable checks that are already handled by flake8, isort and black. Also disable checks with high false positives and low utility.
# reference: https://github.com/PyCQA/pylint/issues/3512
disable = ["bad-classmethod-argument", "bad-indentation", "bad-mcs-classmethod-argument", "bare-except", "fixme", "format",
    "invalid-name", "line-too-long", "missing-class-docstring", "missing-final-newline", "missing-function-docstring",
    "missing-module-docstring", "multiple-statements", "no-self-argument", "too-many-branches", "trailing-whitespace",
    "undefined-variable", "unnecessary-semicolon", "unused-import", "unused-variable", "wrong-import-order", "wrong-import-position"]


[tool.pytest.ini_options]
addopts = "-ra -s -v --cov-report term-missing"


[tool.poetry]
name = "kafka_temporal_mapper_client"
version = "0.1.0"
description = "A client library to send subscribe and notify workflow events to the kafka-temporal-mapper server."
authors = ["CanonicalLtd <genc.tato@canonical.com>"]
license = "AGPL-3.0-only"
readme = "README.md"
urls = { source = "https://github.com/canonical/kafka_temporal_mapper" }
packages = [
    { include = "client/*.py", from = "kafka_temporal_mapper"  },
    { include = "common/*.py", from = "kafka_temporal_mapper"  }
]

[tool.poetry.dependencies]
python = "^3.8"
kafka-python = "^2.0.2"
dacite = "^1.7.0"
dataclasses-json = "^0.5.7"

[tool.poetry.group.dev.dependencies]
bandit = "^1.7.4"
black = "^22.10.0"
flake8 = "^5.0.4"
isort = "^5.10.1"
mypy = "^0.991"
pylint = "^2.15.6"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
toml = "^0.10.2"
types-toml = "^0.10.8.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
