Metadata-Version: 2.1
Name: kafka-temporal-mapper-client
Version: 0.1.0
Summary: A client library to send subscribe and notify workflow events to the kafka-temporal-mapper server.
License: AGPL-3.0-only
Author: CanonicalLtd
Author-email: genc.tato@canonical.com
Requires-Python: >=3.8,<4.0
Classifier: License :: OSI Approved :: GNU Affero General Public License v3
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: dacite (>=1.7.0,<2.0.0)
Requires-Dist: dataclasses-json (>=0.5.7,<0.6.0)
Requires-Dist: kafka-python (>=2.0.2,<3.0.0)
Project-URL: source, https://github.com/canonical/kafka_temporal_mapper
Description-Content-Type: text/markdown

# Kafka-Temporal Mapper

The Kafka-Temporal mapper is a component which listens on Kafka for certain events and triggers 
Temporal workflows accordingly. The events it listens to can be:
- Workflow event
- Mapping event

A workflow event is an event generated by a workflow which notifies the change of its status. 
For example, when a workflow is successfully executed, it notifies this by publishing a message in Kafka in a specific topic.
This message can also contain arguments which can come from the parameters originally passed to the workflow, 
or from the results computed during its execution.

A mapping event is an event generated by a Temporal workflow during worker initialization, and it is used subscribe to 
a workflow event from another workflow. 
For example, *Workflow B* sends a mapping (subscribe) message to the mapper indicating that it subscribes to 
workflow events generated by *Workflow A*.

In this way when *Workflow A* executes successfully, it generates a workflow event which is received by the mapper,
which in turn start *Workflow B*

![overview](docs/mapper.svg)

## Message format
Messages are in a JSON format. 

A workflow event has currently the following format:
```json
{
    "type": "workflow", 
    "name":"Workflow A",
    "args": {"a":"hello", "b": {"c": "world"}}
}
```
where *args* could be any value (not necessarily an object)

A mapping event has a similar format:
```json
{
    "type": "mapping", 
    "target":"Workflow B",
    "triggers": [
        { 
            "name": "Workflow A",
            "args": {"a":"hello", "b":"@b.c"}
        }
    ] 
}
```
Note that in the `args`, the subscribing workflow can reference arguments from the triggering workflow, 
using the `@` annotation. This is useful when passing parameters between the two workflows 
(ex: the results of one are passed as arguments to the other). 
In the example above, `@b.c` refers to the triggering workflow args `args["b"]["c"]` and will be replaced by
the mapper with the right value `"world"` when starting *Workflow B*


## Usage
This repository is based on the [cs template](https://github.com/canonical/cs-python-project-template), 
and uses [Poetry](https://python-poetry.org/docs/) for building and managing the dependencies.
Please refer to the readme of that project for more information on how to install *Poetry*.

Once Poetry is installed, run the following:
```bash
# Install the dependencies
make install-dev && make install

#Start the kafka-temporal mapper server
make run
```

In order to run a simple client test, make sure to run the worker of the *hello* workflow in our [samples repository](https://github.com/canonical/temporal-lib-samples).
Then run:
```bash
make run-cli
```
Note that the client would act as if the GreetingWorkflow registered to fictitious
workflow called *TriggerWorkflow*. Then, it will publish a workflow event as if the *TriggerWorkflow* executed
successfully. This would in turn make the worker execute the GreetingWorkflow.  


## Client library
In addition to the mapping server which listens to Kafka, this project provides also a client library,
which facilitates the interaction between the workflows and the mapping server.
This library is used by the workflows and provides methods for publishing of the workflow and mapping events. 

The client provides two methods:
- **subscribe**: used to subscribe a workflow to the execution of another workflow.   
- **notify**: used by a workflow to notify the termination of its execution.  

### Installation
```bash
pip install kafka_temporal_mapper_client
```

### Usage
To use this library for notifying or subscribing:
```python
from kafka_temporal_mapper.client import KafkaTemporalClient

ktc = KafkaTemporalClient()

# subscribe workflow B to workflow A using a part of A's results as argument (@b.c)
ktc.subscribe('WorkflowB', [{'name':'WorkflowA', 'args': {"a":"hello", "b":"@b.c"}}]) 

# notify workflow A execution and its results
ktc.notify('WorkflowA', {"a":"hello", "b": {"c": "world"}})
```
An example of usage of this library can be a workflow being triggered by another workflow, can be found in the our [samples repository](https://github.com/canonical/temporal-lib-samples/blob/main/docs/samples/event.md). 

