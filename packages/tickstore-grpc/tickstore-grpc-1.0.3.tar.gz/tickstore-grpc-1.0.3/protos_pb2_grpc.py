# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protos_pb2 as protos__pb2


class StoreStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Write = channel.stream_stream(
                '/tickstore_grpc.Store/Write',
                request_serializer=protos__pb2.TickEventBatch.SerializeToString,
                response_deserializer=protos__pb2.WriteAck.FromString,
                )
        self.Query = channel.unary_stream(
                '/tickstore_grpc.Store/Query',
                request_serializer=protos__pb2.StoreQueryRequest.SerializeToString,
                response_deserializer=protos__pb2.StoreQueryBatch.FromString,
                )
        self.RegisterMeasurement = channel.unary_unary(
                '/tickstore_grpc.Store/RegisterMeasurement',
                request_serializer=protos__pb2.RegisterMeasurementRequest.SerializeToString,
                response_deserializer=protos__pb2.RegisterMeasurementResponse.FromString,
                )
        self.GetMeasurements = channel.unary_unary(
                '/tickstore_grpc.Store/GetMeasurements',
                request_serializer=protos__pb2.GetMeasurementsRequest.SerializeToString,
                response_deserializer=protos__pb2.GetMeasurementsResponse.FromString,
                )
        self.DeleteMeasurement = channel.unary_unary(
                '/tickstore_grpc.Store/DeleteMeasurement',
                request_serializer=protos__pb2.DeleteMeasurementRequest.SerializeToString,
                response_deserializer=protos__pb2.DeleteMeasurementResponse.FromString,
                )
        self.GetLastEventTime = channel.unary_unary(
                '/tickstore_grpc.Store/GetLastEventTime',
                request_serializer=protos__pb2.GetLastEventTimeRequest.SerializeToString,
                response_deserializer=protos__pb2.GetLastEventTimeResponse.FromString,
                )


class StoreServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Write(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMeasurements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLastEventTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Write': grpc.stream_stream_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=protos__pb2.TickEventBatch.FromString,
                    response_serializer=protos__pb2.WriteAck.SerializeToString,
            ),
            'Query': grpc.unary_stream_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=protos__pb2.StoreQueryRequest.FromString,
                    response_serializer=protos__pb2.StoreQueryBatch.SerializeToString,
            ),
            'RegisterMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterMeasurement,
                    request_deserializer=protos__pb2.RegisterMeasurementRequest.FromString,
                    response_serializer=protos__pb2.RegisterMeasurementResponse.SerializeToString,
            ),
            'GetMeasurements': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMeasurements,
                    request_deserializer=protos__pb2.GetMeasurementsRequest.FromString,
                    response_serializer=protos__pb2.GetMeasurementsResponse.SerializeToString,
            ),
            'DeleteMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMeasurement,
                    request_deserializer=protos__pb2.DeleteMeasurementRequest.FromString,
                    response_serializer=protos__pb2.DeleteMeasurementResponse.SerializeToString,
            ),
            'GetLastEventTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLastEventTime,
                    request_deserializer=protos__pb2.GetLastEventTimeRequest.FromString,
                    response_serializer=protos__pb2.GetLastEventTimeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tickstore_grpc.Store', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Store(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Write(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/tickstore_grpc.Store/Write',
            protos__pb2.TickEventBatch.SerializeToString,
            protos__pb2.WriteAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tickstore_grpc.Store/Query',
            protos__pb2.StoreQueryRequest.SerializeToString,
            protos__pb2.StoreQueryBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tickstore_grpc.Store/RegisterMeasurement',
            protos__pb2.RegisterMeasurementRequest.SerializeToString,
            protos__pb2.RegisterMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMeasurements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tickstore_grpc.Store/GetMeasurements',
            protos__pb2.GetMeasurementsRequest.SerializeToString,
            protos__pb2.GetMeasurementsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tickstore_grpc.Store/DeleteMeasurement',
            protos__pb2.DeleteMeasurementRequest.SerializeToString,
            protos__pb2.DeleteMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLastEventTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tickstore_grpc.Store/GetLastEventTime',
            protos__pb2.GetLastEventTimeRequest.SerializeToString,
            protos__pb2.GetLastEventTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StorageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Query = channel.unary_unary(
                '/tickstore_grpc.Storage/Query',
                request_serializer=protos__pb2.StorageQueryRequest.SerializeToString,
                response_deserializer=protos__pb2.StorageQueryResponse.FromString,
                )
        self.Open = channel.unary_stream(
                '/tickstore_grpc.Storage/Open',
                request_serializer=protos__pb2.OpenRequest.SerializeToString,
                response_deserializer=protos__pb2.StorageHandleBatch.FromString,
                )
        self.GetMeasurements = channel.unary_unary(
                '/tickstore_grpc.Storage/GetMeasurements',
                request_serializer=protos__pb2.GetMeasurementsRequest.SerializeToString,
                response_deserializer=protos__pb2.GetMeasurementsResponse.FromString,
                )


class StorageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Open(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMeasurements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=protos__pb2.StorageQueryRequest.FromString,
                    response_serializer=protos__pb2.StorageQueryResponse.SerializeToString,
            ),
            'Open': grpc.unary_stream_rpc_method_handler(
                    servicer.Open,
                    request_deserializer=protos__pb2.OpenRequest.FromString,
                    response_serializer=protos__pb2.StorageHandleBatch.SerializeToString,
            ),
            'GetMeasurements': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMeasurements,
                    request_deserializer=protos__pb2.GetMeasurementsRequest.FromString,
                    response_serializer=protos__pb2.GetMeasurementsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tickstore_grpc.Storage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Storage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tickstore_grpc.Storage/Query',
            protos__pb2.StorageQueryRequest.SerializeToString,
            protos__pb2.StorageQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tickstore_grpc.Storage/Open',
            protos__pb2.OpenRequest.SerializeToString,
            protos__pb2.StorageHandleBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMeasurements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tickstore_grpc.Storage/GetMeasurements',
            protos__pb2.GetMeasurementsRequest.SerializeToString,
            protos__pb2.GetMeasurementsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
