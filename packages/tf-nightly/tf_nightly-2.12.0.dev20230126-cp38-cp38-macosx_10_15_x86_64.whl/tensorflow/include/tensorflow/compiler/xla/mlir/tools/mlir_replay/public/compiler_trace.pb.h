// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/xla/mlir/tools/mlir_replay/public/compiler_trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto;
namespace mlir {
namespace interpreter {
class MlirCompilationTrace;
class MlirCompilationTraceDefaultTypeInternal;
extern MlirCompilationTraceDefaultTypeInternal _MlirCompilationTrace_default_instance_;
class MlirCompilationTraceEntry;
class MlirCompilationTraceEntryDefaultTypeInternal;
extern MlirCompilationTraceEntryDefaultTypeInternal _MlirCompilationTraceEntry_default_instance_;
}  // namespace interpreter
}  // namespace mlir
PROTOBUF_NAMESPACE_OPEN
template<> ::mlir::interpreter::MlirCompilationTrace* Arena::CreateMaybeMessage<::mlir::interpreter::MlirCompilationTrace>(Arena*);
template<> ::mlir::interpreter::MlirCompilationTraceEntry* Arena::CreateMaybeMessage<::mlir::interpreter::MlirCompilationTraceEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mlir {
namespace interpreter {

// ===================================================================

class MlirCompilationTraceEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mlir.interpreter.MlirCompilationTraceEntry) */ {
 public:
  MlirCompilationTraceEntry();
  virtual ~MlirCompilationTraceEntry();

  MlirCompilationTraceEntry(const MlirCompilationTraceEntry& from);
  MlirCompilationTraceEntry(MlirCompilationTraceEntry&& from) noexcept
    : MlirCompilationTraceEntry() {
    *this = ::std::move(from);
  }

  inline MlirCompilationTraceEntry& operator=(const MlirCompilationTraceEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MlirCompilationTraceEntry& operator=(MlirCompilationTraceEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MlirCompilationTraceEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MlirCompilationTraceEntry* internal_default_instance() {
    return reinterpret_cast<const MlirCompilationTraceEntry*>(
               &_MlirCompilationTraceEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MlirCompilationTraceEntry& a, MlirCompilationTraceEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MlirCompilationTraceEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MlirCompilationTraceEntry* New() const final {
    return CreateMaybeMessage<MlirCompilationTraceEntry>(nullptr);
  }

  MlirCompilationTraceEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MlirCompilationTraceEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MlirCompilationTraceEntry& from);
  void MergeFrom(const MlirCompilationTraceEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MlirCompilationTraceEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mlir.interpreter.MlirCompilationTraceEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAfterPassFieldNumber = 1,
    kMlirModuleFieldNumber = 2,
  };
  // optional string after_pass = 1;
  bool has_after_pass() const;
  void clear_after_pass();
  const std::string& after_pass() const;
  void set_after_pass(const std::string& value);
  void set_after_pass(std::string&& value);
  void set_after_pass(const char* value);
  void set_after_pass(const char* value, size_t size);
  std::string* mutable_after_pass();
  std::string* release_after_pass();
  void set_allocated_after_pass(std::string* after_pass);

  // optional string mlir_module = 2;
  bool has_mlir_module() const;
  void clear_mlir_module();
  const std::string& mlir_module() const;
  void set_mlir_module(const std::string& value);
  void set_mlir_module(std::string&& value);
  void set_mlir_module(const char* value);
  void set_mlir_module(const char* value, size_t size);
  std::string* mutable_mlir_module();
  std::string* release_mlir_module();
  void set_allocated_mlir_module(std::string* mlir_module);

  // @@protoc_insertion_point(class_scope:mlir.interpreter.MlirCompilationTraceEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr after_pass_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mlir_module_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto;
};
// -------------------------------------------------------------------

class MlirCompilationTrace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mlir.interpreter.MlirCompilationTrace) */ {
 public:
  MlirCompilationTrace();
  virtual ~MlirCompilationTrace();

  MlirCompilationTrace(const MlirCompilationTrace& from);
  MlirCompilationTrace(MlirCompilationTrace&& from) noexcept
    : MlirCompilationTrace() {
    *this = ::std::move(from);
  }

  inline MlirCompilationTrace& operator=(const MlirCompilationTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline MlirCompilationTrace& operator=(MlirCompilationTrace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MlirCompilationTrace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MlirCompilationTrace* internal_default_instance() {
    return reinterpret_cast<const MlirCompilationTrace*>(
               &_MlirCompilationTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MlirCompilationTrace& a, MlirCompilationTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(MlirCompilationTrace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MlirCompilationTrace* New() const final {
    return CreateMaybeMessage<MlirCompilationTrace>(nullptr);
  }

  MlirCompilationTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MlirCompilationTrace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MlirCompilationTrace& from);
  void MergeFrom(const MlirCompilationTrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MlirCompilationTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mlir.interpreter.MlirCompilationTrace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto);
    return ::descriptor_table_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassesFieldNumber = 1,
  };
  // repeated .mlir.interpreter.MlirCompilationTraceEntry passes = 1;
  int passes_size() const;
  void clear_passes();
  ::mlir::interpreter::MlirCompilationTraceEntry* mutable_passes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mlir::interpreter::MlirCompilationTraceEntry >*
      mutable_passes();
  const ::mlir::interpreter::MlirCompilationTraceEntry& passes(int index) const;
  ::mlir::interpreter::MlirCompilationTraceEntry* add_passes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mlir::interpreter::MlirCompilationTraceEntry >&
      passes() const;

  // @@protoc_insertion_point(class_scope:mlir.interpreter.MlirCompilationTrace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mlir::interpreter::MlirCompilationTraceEntry > passes_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MlirCompilationTraceEntry

// optional string after_pass = 1;
inline bool MlirCompilationTraceEntry::has_after_pass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MlirCompilationTraceEntry::clear_after_pass() {
  after_pass_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MlirCompilationTraceEntry::after_pass() const {
  // @@protoc_insertion_point(field_get:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
  return after_pass_.GetNoArena();
}
inline void MlirCompilationTraceEntry::set_after_pass(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  after_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
}
inline void MlirCompilationTraceEntry::set_after_pass(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  after_pass_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
}
inline void MlirCompilationTraceEntry::set_after_pass(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  after_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
}
inline void MlirCompilationTraceEntry::set_after_pass(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  after_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
}
inline std::string* MlirCompilationTraceEntry::mutable_after_pass() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
  return after_pass_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MlirCompilationTraceEntry::release_after_pass() {
  // @@protoc_insertion_point(field_release:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
  if (!has_after_pass()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return after_pass_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MlirCompilationTraceEntry::set_allocated_after_pass(std::string* after_pass) {
  if (after_pass != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  after_pass_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), after_pass);
  // @@protoc_insertion_point(field_set_allocated:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
}

// optional string mlir_module = 2;
inline bool MlirCompilationTraceEntry::has_mlir_module() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MlirCompilationTraceEntry::clear_mlir_module() {
  mlir_module_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MlirCompilationTraceEntry::mlir_module() const {
  // @@protoc_insertion_point(field_get:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
  return mlir_module_.GetNoArena();
}
inline void MlirCompilationTraceEntry::set_mlir_module(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mlir_module_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
}
inline void MlirCompilationTraceEntry::set_mlir_module(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mlir_module_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
}
inline void MlirCompilationTraceEntry::set_mlir_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mlir_module_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
}
inline void MlirCompilationTraceEntry::set_mlir_module(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mlir_module_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
}
inline std::string* MlirCompilationTraceEntry::mutable_mlir_module() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
  return mlir_module_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MlirCompilationTraceEntry::release_mlir_module() {
  // @@protoc_insertion_point(field_release:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
  if (!has_mlir_module()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mlir_module_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MlirCompilationTraceEntry::set_allocated_mlir_module(std::string* mlir_module) {
  if (mlir_module != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mlir_module_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mlir_module);
  // @@protoc_insertion_point(field_set_allocated:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
}

// -------------------------------------------------------------------

// MlirCompilationTrace

// repeated .mlir.interpreter.MlirCompilationTraceEntry passes = 1;
inline int MlirCompilationTrace::passes_size() const {
  return passes_.size();
}
inline void MlirCompilationTrace::clear_passes() {
  passes_.Clear();
}
inline ::mlir::interpreter::MlirCompilationTraceEntry* MlirCompilationTrace::mutable_passes(int index) {
  // @@protoc_insertion_point(field_mutable:mlir.interpreter.MlirCompilationTrace.passes)
  return passes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mlir::interpreter::MlirCompilationTraceEntry >*
MlirCompilationTrace::mutable_passes() {
  // @@protoc_insertion_point(field_mutable_list:mlir.interpreter.MlirCompilationTrace.passes)
  return &passes_;
}
inline const ::mlir::interpreter::MlirCompilationTraceEntry& MlirCompilationTrace::passes(int index) const {
  // @@protoc_insertion_point(field_get:mlir.interpreter.MlirCompilationTrace.passes)
  return passes_.Get(index);
}
inline ::mlir::interpreter::MlirCompilationTraceEntry* MlirCompilationTrace::add_passes() {
  // @@protoc_insertion_point(field_add:mlir.interpreter.MlirCompilationTrace.passes)
  return passes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mlir::interpreter::MlirCompilationTraceEntry >&
MlirCompilationTrace::passes() const {
  // @@protoc_insertion_point(field_list:mlir.interpreter.MlirCompilationTrace.passes)
  return passes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace interpreter
}  // namespace mlir

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto
