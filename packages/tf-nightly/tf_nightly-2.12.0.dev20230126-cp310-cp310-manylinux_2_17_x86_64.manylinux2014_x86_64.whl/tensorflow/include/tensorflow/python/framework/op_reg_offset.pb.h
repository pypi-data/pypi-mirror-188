// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/python/framework/op_reg_offset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto;
namespace tensorflow {
class OpRegOffset;
class OpRegOffsetDefaultTypeInternal;
extern OpRegOffsetDefaultTypeInternal _OpRegOffset_default_instance_;
class OpRegOffsets;
class OpRegOffsetsDefaultTypeInternal;
extern OpRegOffsetsDefaultTypeInternal _OpRegOffsets_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::OpRegOffset* Arena::CreateMaybeMessage<::tensorflow::OpRegOffset>(Arena*);
template<> ::tensorflow::OpRegOffsets* Arena::CreateMaybeMessage<::tensorflow::OpRegOffsets>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class OpRegOffset :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.OpRegOffset) */ {
 public:
  OpRegOffset();
  virtual ~OpRegOffset();

  OpRegOffset(const OpRegOffset& from);
  OpRegOffset(OpRegOffset&& from) noexcept
    : OpRegOffset() {
    *this = ::std::move(from);
  }

  inline OpRegOffset& operator=(const OpRegOffset& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpRegOffset& operator=(OpRegOffset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpRegOffset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpRegOffset* internal_default_instance() {
    return reinterpret_cast<const OpRegOffset*>(
               &_OpRegOffset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpRegOffset& a, OpRegOffset& b) {
    a.Swap(&b);
  }
  inline void Swap(OpRegOffset* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpRegOffset* New() const final {
    return CreateMaybeMessage<OpRegOffset>(nullptr);
  }

  OpRegOffset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpRegOffset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpRegOffset& from);
  void MergeFrom(const OpRegOffset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpRegOffset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.OpRegOffset";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto);
    return ::descriptor_table_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFilepathFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string filepath = 2;
  void clear_filepath();
  const std::string& filepath() const;
  void set_filepath(const std::string& value);
  void set_filepath(std::string&& value);
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  std::string* mutable_filepath();
  std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);

  // uint32 start = 3;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 end = 4;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.OpRegOffset)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto;
};
// -------------------------------------------------------------------

class OpRegOffsets :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.OpRegOffsets) */ {
 public:
  OpRegOffsets();
  virtual ~OpRegOffsets();

  OpRegOffsets(const OpRegOffsets& from);
  OpRegOffsets(OpRegOffsets&& from) noexcept
    : OpRegOffsets() {
    *this = ::std::move(from);
  }

  inline OpRegOffsets& operator=(const OpRegOffsets& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpRegOffsets& operator=(OpRegOffsets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpRegOffsets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpRegOffsets* internal_default_instance() {
    return reinterpret_cast<const OpRegOffsets*>(
               &_OpRegOffsets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpRegOffsets& a, OpRegOffsets& b) {
    a.Swap(&b);
  }
  inline void Swap(OpRegOffsets* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpRegOffsets* New() const final {
    return CreateMaybeMessage<OpRegOffsets>(nullptr);
  }

  OpRegOffsets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpRegOffsets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpRegOffsets& from);
  void MergeFrom(const OpRegOffsets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpRegOffsets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.OpRegOffsets";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto);
    return ::descriptor_table_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetsFieldNumber = 1,
  };
  // repeated .tensorflow.OpRegOffset offsets = 1;
  int offsets_size() const;
  void clear_offsets();
  ::tensorflow::OpRegOffset* mutable_offsets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::OpRegOffset >*
      mutable_offsets();
  const ::tensorflow::OpRegOffset& offsets(int index) const;
  ::tensorflow::OpRegOffset* add_offsets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::OpRegOffset >&
      offsets() const;

  // @@protoc_insertion_point(class_scope:tensorflow.OpRegOffsets)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::OpRegOffset > offsets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpRegOffset

// string name = 1;
inline void OpRegOffset::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpRegOffset::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpRegOffset.name)
  return name_.GetNoArena();
}
inline void OpRegOffset::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.OpRegOffset.name)
}
inline void OpRegOffset::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.OpRegOffset.name)
}
inline void OpRegOffset::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.OpRegOffset.name)
}
inline void OpRegOffset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.OpRegOffset.name)
}
inline std::string* OpRegOffset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.OpRegOffset.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpRegOffset::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.OpRegOffset.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpRegOffset::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpRegOffset.name)
}

// string filepath = 2;
inline void OpRegOffset::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpRegOffset::filepath() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpRegOffset.filepath)
  return filepath_.GetNoArena();
}
inline void OpRegOffset::set_filepath(const std::string& value) {
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.OpRegOffset.filepath)
}
inline void OpRegOffset::set_filepath(std::string&& value) {
  
  filepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.OpRegOffset.filepath)
}
inline void OpRegOffset::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.OpRegOffset.filepath)
}
inline void OpRegOffset::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.OpRegOffset.filepath)
}
inline std::string* OpRegOffset::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.OpRegOffset.filepath)
  return filepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpRegOffset::release_filepath() {
  // @@protoc_insertion_point(field_release:tensorflow.OpRegOffset.filepath)
  
  return filepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpRegOffset::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpRegOffset.filepath)
}

// uint32 start = 3;
inline void OpRegOffset::clear_start() {
  start_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpRegOffset::start() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpRegOffset.start)
  return start_;
}
inline void OpRegOffset::set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpRegOffset.start)
}

// uint32 end = 4;
inline void OpRegOffset::clear_end() {
  end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpRegOffset::end() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpRegOffset.end)
  return end_;
}
inline void OpRegOffset::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpRegOffset.end)
}

// -------------------------------------------------------------------

// OpRegOffsets

// repeated .tensorflow.OpRegOffset offsets = 1;
inline int OpRegOffsets::offsets_size() const {
  return offsets_.size();
}
inline void OpRegOffsets::clear_offsets() {
  offsets_.Clear();
}
inline ::tensorflow::OpRegOffset* OpRegOffsets::mutable_offsets(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.OpRegOffsets.offsets)
  return offsets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::OpRegOffset >*
OpRegOffsets::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.OpRegOffsets.offsets)
  return &offsets_;
}
inline const ::tensorflow::OpRegOffset& OpRegOffsets::offsets(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.OpRegOffsets.offsets)
  return offsets_.Get(index);
}
inline ::tensorflow::OpRegOffset* OpRegOffsets::add_offsets() {
  // @@protoc_insertion_point(field_add:tensorflow.OpRegOffsets.offsets)
  return offsets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::OpRegOffset >&
OpRegOffsets::offsets() const {
  // @@protoc_insertion_point(field_list:tensorflow.OpRegOffsets.offsets)
  return offsets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fpython_2fframework_2fop_5freg_5foffset_2eproto
